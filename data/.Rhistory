sals_2023 <- sals_2023 %>%
separate(subplot_code, into = c("stands", "trt", "subplot"), sep = "_")
#that left the landowner and stand number in one column. separate those out:
sals_2023 <- sals_2023 %>%
mutate(landowner = str_extract(stands, "^([A-Za-z]+)"),
stand = str_extract(stands, "(?<=\\D)(\\d+)")) %>%
select(-stands) #replace "stands" col above with new "stand" col
#delete unnecessary col, add year, format date, delete leading zero
sals_2023 <- sals_2023[, -8] #delete "under" column
sals_2023$year <- 2023 #add year column
sals_2023$date_mdy <- as.Date(sals_2023$date, format = "%m/%d/%Y") #format date
sals_2023$subplot <- as.numeric(gsub("^0+", "", sals_2023$subplot)) #remove leading zero
#add unique site code, combo of stand#_replicate#_year
sals_2023$site_id <- paste(sals_2023$stand, "_", sals_2023$site_rep, "_", sals_2023$year)
#create a new column for sal_id
#single digit for each animal found within each site
#this groups the rows by the site identifier, then numbers each row sequentially within sites
sals_2023 <- sals_2023 %>%
group_by(site_id) %>%
mutate(sal_rep = row_number())
#add unique sal code for each animal, combo of site id and sal replicate
sals_2023$sal_id <- paste(sals_2023$site_id,"_",sals_2023$sal_rep)
#back to data frame, somehow became a tibble
sals_2023 <- as.data.frame(sals_2023)
#reorder
new_order <- c("site_id","landowner","stand","site_rep","trt","year","date",
"date_mdy","sal_id","sal_rep","obs","subplot","pass","spp",
"cover_obj","substrate","age_class")
sals_2023 <- sals_2023[,new_order]
#save as csv
write.csv(sals_2023, "C:/Users/jasmi/OneDrive/Documents/Academic/OSU/Git/oss-occu/data/sals.2023.csv",
row.names = FALSE)
#load and format 2024 data
sals_2024 <- read.csv("oss_2024_sals.csv",
colClasses = c(landowner="factor", stand="character", trt="factor",
obs="factor", pass="factor", spp="factor",
cover_obj="factor", substrate="factor"))
sals_2024$date_mdy <- as.Date(sals_2024$date, format = "%m/%d/%Y")
#add unique site code, combo of stand#_replicate#_year
sals_2024$site_id <- paste(sals_2024$stand, "_", sals_2024$site_rep, "_", sals_2024$year)
#create a new column for sal_id
#single digit for each animal found within each site
#this groups the rows by the site identifier, then numbers each row sequentially within sites
sals_2024 <- sals_2024 %>%
group_by(site_id) %>%
mutate(sal_rep = row_number())
#add unique sal code for each animal, combo of site id and sal replicate
sals_2024$sal_id <- paste(sals_2024$site_id,"_",sals_2024$sal_rep)
#back to data frame
sals_2024 <- as.data.frame(sals_2024)
#reorder
new_order <- c("site_id","landowner","stand","site_rep","trt","year","date",
"date_mdy","sal_id","sal_rep","obs","subplot","pass","spp",
"cover_obj","substrate","age_class","svl","sample_id","recap")
sals_2024 <- sals_2024[,new_order]
#save as csv
write.csv(sals_2024, "C:/Users/jasmi/OneDrive/Documents/Academic/OSU/Git/oss-occu/data/sals.2024.csv",
row.names = FALSE)
#data frame with both years of sal data
sals <- bind_rows(sals_2024,sals_2023)
#change column classes to check df summary
sals$landowner <- as.factor(sals$landowner)
sals$trt <- as.factor(sals$trt)
sals$subplot <- as.factor(sals$subplot)
sals$age_class <- as.character(sals$age_class)
#deal with missing values from 2023 set
sals$age_class[sals$age_class == "" | is.na(sals$age_class)] <- "U"
sals$age_class <- as.factor(sals$age_class)
sals$recap <- as.factor(sals$recap)
sals$recap[sals$recap == "" | is.na(sals$recap)] <- 0 #change blank recap to zero
summary(sals)
head(sals)
# save as csv
write.csv(sals, "C:/Users/jasmi/OneDrive/Documents/Academic/OSU/Git/oss-occu/data/sals.complete.csv",
row.names = FALSE)
sals <- read.csv("sals.complete.csv",
colClasses = c(landowner="factor", stand="character", trt="factor",
obs="factor", subplot="factor", recap="factor",
pass="factor", spp="factor", cover_obj="factor",
substrate="factor", age_class="factor"))
sals.new <- sals[,c(1,12,14)] #subset of sals with site, subplot, spp
#oss detection df
sals.oss <- subset(sals.new, spp=="OSS")
sals.oss <- sals.oss[,-3]
sals.oss <- sals.oss %>%
distinct(site_id, subplot) #only keeping single detection per subplot
sals.oss$detect <- 1
#enes detection df
sals.enes <- subset(sals.new, spp=="ENES")
sals.enes <- sals.enes[,-3]
sals.enes <- sals.enes %>%
distinct(site_id, subplot)
sals.enes$detect <- 1
#creating occupancy df with non-detections
df.new <- df[,c(1,9)] #new df with all subplots to merge sals df with
df.new$subplot <- as.factor(df.new$subplot)
#oss occupancy df
df.merge.oss <- full_join(df.new,sals.oss,by=c("site_id","subplot")) #merge by site and subplot
#enes occupancy df
df.merge.enes <- full_join(df.new,sals.enes,by=c("site_id","subplot")) #
df.merge.oss$detect <- ifelse(is.na(df.merge.oss$detect), 0, df.merge.oss$detect)
df.merge.enes$detect <- ifelse(is.na(df.merge.enes$detect), 0, df.merge.enes$detect)
View(df.merge.enes)
df.wide.oss <- df.merge.oss %>%
pivot_wider(names_from = subplot, values_from = detect)
View(df.wide.oss)
df.wide.oss <- as.data.frame(df.wide.oss)
rownames(wdf.wide.oss) <- df.wide.oss[,1]
rownames(df.wide.oss) <- df.wide.oss[,1]
df.wide.oss <- df.wide.oss[,-1]
df.wide.enes <- df.merge.enes %>%
pivot_wider(names_from = subplot, values_from = detect)
df.wide.enes <- as.data.frame(df.wide.enes)
rownames(df.wide.enes) <- df.wide.enes[,1]
df.wide.enes <- df.wide.enes[,-1]
View(df.wide.enes)
write.csv(sals, "C:/Users/jasmi/OneDrive/Documents/Academic/OSU/Git/oss-occu/data/oss.occu.df.csv",
row.names = FALSE)
write.csv(df.wide.oss, "C:/Users/jasmi/OneDrive/Documents/Academic/OSU/Git/oss-occu/data/oss.occu.df.csv",
row.names = FALSE)
write.csv(df.wide.enes, "C:/Users/jasmi/OneDrive/Documents/Academic/OSU/Git/oss-occu/data/enes.occu.df.csv",
row.names = FALSE)
rm(list=ls())
setwd("C:/Users/jasmi/OneDrive/Documents/Academic/OSU/Git/oss-occu/data")
library(unmarked)
library(ggplot2)
library(stats)
library(MASS)
library(tidyverse)
site <- read.csv("site.complete.csv")
df <- read.csv("subplot.complete.csv")
sals <- read.csv("sals.complete.csv",
colClasses = c(landowner="factor", stand="character", trt="factor",
obs="factor", subplot="factor", recap="factor",
pass="factor", spp="factor", cover_obj="factor",
substrate="factor", age_class="factor"))
df <- subset(subplot[,c('subplot','soil_moist_avg')])
subplot <- read.csv("subplot.complete.csv")
df <- subset(subplot[,c('subplot','soil_moist_avg')])
#change to long format
df_long <- df %>%
pivot_longer(cols = -subplot, names_to = "variable", values_to = "value")
#add site id back in
df_long <- cbind(df_long, subplot$site_id)
# Reshape the data back to wide format, flipping the dimensions
df_wide <- df_long %>%
pivot_wider(names_from = subplot, values_from = value)
soil_moist_wide <- df_wide[,-1]
soil_moist_wide <- as.data.frame(soil_moist_wide)
rownames(soil_moist_wide) <- soil_moist_wide[,1]
soil_moist <- soil_moist_wide[,-1]
#scale
scaled_soilmoist <- as.data.frame(scale(soilmoist))
#scale
scaled_soilmoist <- as.data.frame(scale(soil_moist))
df <- subset(subplot[,c('subplot','weather')])
#change to long format
df_long <- df %>%
pivot_longer(cols = -subplot, names_to = "variable", values_to = "value")
#add site id back in
df_long <- cbind(df_long, subplot$site_id)
# Reshape the data back to wide format, flipping the dimensions
df_wide <- df_long %>%
pivot_wider(names_from = subplot, values_from = value)
weather_wide <- df_wide[,-1]
weather_wide <- as.data.frame(weather_wide)
rownames(weather_wide) <- weather_wide[,1]
weather <- weather_wide[,-1]
site_new <- subset(site[,c('site_id','trt','date_mdy','elev','temp','hum')])
read.csv("oss.occu.df.csv")
oss.occu <- read.csv("oss.occu.df.csv")
rm(list=ls())
setwd("C:/Users/jasmi/OneDrive/Documents/Academic/OSU/Git/oss-occu/data")
library(unmarked)
library(ggplot2)
library(stats)
library(MASS)
library(tidyverse)
## load data----------------------------------------------------------------------------------------------
site <- read.csv("site.complete.csv")
subplot <- read.csv("subplot.complete.csv")
sals <- read.csv("sals.complete.csv",
colClasses = c(landowner="factor", stand="character", trt="factor",
obs="factor", subplot="factor", recap="factor",
pass="factor", spp="factor", cover_obj="factor",
substrate="factor", age_class="factor"))
## Create occu data frames for oss -----------------------------------------------------------------
#subset of sals with site, subplot, spp
sals.new <- sals[,c(1,12,14)]
#creating occupancy df with non-detections
df.new <- df[,c(1,9)] #new df with all subplots to merge sals df with
rm(list=ls())
setwd("C:/Users/jasmi/OneDrive/Documents/Academic/OSU/Git/oss-occu/data")
library(unmarked)
library(ggplot2)
library(stats)
library(MASS)
library(tidyverse)
## load data----------------------------------------------------------------------------------------------
site <- read.csv("site.complete.csv")
subplot <- read.csv("subplot.complete.csv")
sals <- read.csv("sals.complete.csv",
colClasses = c(landowner="factor", stand="character", trt="factor",
obs="factor", subplot="factor", recap="factor",
pass="factor", spp="factor", cover_obj="factor",
substrate="factor", age_class="factor"))
## Create occu data frames for oss ---------
rm(list=ls())
library(unmarked)
library(ggplot2)
library(stats)
library(MASS)
library(tidyverse)
## load data----------------------------------------------------------------------------------------------
site <- read.csv("site.complete.csv")
subplot <- read.csv("subplot.complete.csv")
sals <- read.csv("sals.complete.csv",
colClasses = c(landowner="factor", stand="character", trt="factor",
obs="factor", subplot="factor", recap="factor",
pass="factor", spp="factor", cover_obj="factor",
substrate="factor", age_class="factor"))
sals.new <- sals[,c(1,12,14)]
#creating occupancy df with non-detections
df.new <- df[,c(1,9)] #new df with all subplots to merge sals df with
#creating occupancy df with non-detections
df.new <- subplot[,c(1,9)] #new df with all subplots to merge sals df with
df.new$subplot <- as.factor(df.new$subplot)
sals.oss <- subset(sals.new, spp=="OSS")
sals.oss <- sals.oss[,-3]
sals.oss <- sals.oss %>%
distinct(site_id, subplot) #only keeping single detection per subplot
sals.oss$detect <- 1
#oss occupancy df
df.merge.oss <- full_join(df.new,sals.oss,by=c("site_id","subplot")) #merge by site and subplot
df.merge.oss$detect <- ifelse(is.na(df.merge.oss$detect), 0, df.merge.oss$detect) #make NA's = 0
#make into wide format occu df
df.wide.oss <- df.merge.oss %>%
pivot_wider(names_from = subplot, values_from = detect)
df.wide.oss <- as.data.frame(df.wide.oss)
rownames(df.wide.oss) <- df.wide.oss[,1]
df.wide.oss <- df.wide.oss[,-1]
#save
write.csv(df.wide.oss, "C:/Users/jasmi/OneDrive/Documents/Academic/OSU/Git/oss-occu/data/oss.occu.df.csv",
row.names = FALSE)
#enes detection df
sals.enes <- subset(sals.new, spp=="ENES")
sals.enes <- sals.enes[,-3]
sals.enes <- sals.enes %>%
distinct(site_id, subplot)
sals.enes$detect <- 1
#enes occupancy df
df.merge.enes <- full_join(df.new,sals.enes,by=c("site_id","subplot")) #merge by site and subplot
df.merge.enes$detect <- ifelse(is.na(df.merge.enes$detect), 0, df.merge.enes$detect) #make NA's = 0
#make into wide format occu df
df.wide.enes <- df.merge.enes %>%
pivot_wider(names_from = subplot, values_from = detect)
df.wide.enes <- as.data.frame(df.wide.enes)
rownames(df.wide.enes) <- df.wide.enes[,1]
df.wide.enes <- df.wide.enes[,-1]
#save
write.csv(df.wide.enes, "C:/Users/jasmi/OneDrive/Documents/Academic/OSU/Git/oss-occu/data/enes.occu.df.csv",
row.names = FALSE)
oss.occu <- read.csv("oss.occu.df.csv")
enes.occu <- read.csv("enes.occu.df.csv")
rm(list=ls())
setwd("C:/Users/jasmi/OneDrive/Documents/Academic/OSU/Git/oss-occu/data")
library(unmarked)
library(ggplot2)
library(stats)
library(MASS)
library(tidyverse)
## load data----------------------------------------------------------------------------------------------
dwd <- read.csv("dwd.complete.csv")
site <- read.csv("site.complete.csv")
subplot <- read.csv("subplot.complete.csv")
sals <- read.csv("sals.complete.csv",
colClasses = c(landowner="factor", stand="character", trt="factor",
obs="factor", subplot="factor", recap="factor",
pass="factor", spp="factor", cover_obj="factor",
substrate="factor", age_class="factor"))
oss.occu <- read.csv("oss.occu.df.csv")
enes.occu <- read.csv("enes.occu.df.csv")
setwd("~/Academic/OSU/Git/Occupancy-2023/data")
hum <- read.csv("detcov_humidity.csv", row.names = 1)
temp <- read.csv("detcov_temp.csv", row.names = 1 )
weather <- read.csv("detcov_weather.csv", row.names = 1 )
date <- read.csv("detcov_juliandate.csv", row.names = 1 )
soilmoist <- read.csv("detcov_soilmoist.csv", row.names = 1 )
# Scale Detection Covariates
scaled_hum <- as.data.frame(scale(hum))
scaled_temp <- as.data.frame(scale(temp))
scaled_date <- as.data.frame(scale(date))
scaled_soilmoist <- as.data.frame(scale(soilmoist))
sitecovs <- read.csv("sitecovs.csv")
# Reorder treatments
sitecovs$treatment <- factor(sitecovs$treatment,
levels = c("UU", "BU", "HB", "HU", "BS"))
# Scale Occupancy Covariates
sitecovs$site <- as.character(sitecovs$site)
# Identify numeric sitecovs
numeric_sitecovs <- sitecovs[sapply(sitecovs, is.numeric)]
# Scale the numeric sitecovs
scaled_numeric_sitecovs <- as.data.frame(scale(numeric_sitecovs))
# Combine the scaled numeric sitecovs with non-numeric sitecovs
scaled_sitecovs <- cbind(scaled_numeric_sitecovs, sitecovs[setdiff(names(sitecovs), names(numeric_sitecovs))])
oss.dat <- read.csv("OSS_occ_7.csv")
oss.dets <- oss.dat[,-1]
enes.dat <- read.csv("ENES_occ_7.csv")
enes.dets <- enes.dat[,-1]
oss.dets <- read.csv("oss.occu.df.csv")
enes.dets <- read.csv("enes.occu.df.csv")
setwd("C:/Users/jasmi/OneDrive/Documents/Academic/OSU/Git/oss-occu/data")
oss.dets <- read.csv("oss.occu.df.csv")
enes.dets <- read.csv("enes.occu.df.csv")
View(scaled_hum)
View(scaled_soilmoist)
View(weather)
View(site)
View(subplot)
View(site)
site_new <- subset(site[,c('site_id','trt','date_mdy','elev','temp','hum')])
sitecovs <- subset(site[,c('site_id','trt','date_mdy','elev','temp','hum')])
# Scale Occupancy Covariates
sitecovs$site <- as.character(sitecovs$site)
# Identify numeric sitecovs
numeric_sitecovs <- sitecovs[sapply(sitecovs, is.numeric)]
# Scale the numeric sitecovs
scaled_numeric_sitecovs <- as.data.frame(scale(numeric_sitecovs))
# Combine the scaled numeric sitecovs with non-numeric sitecovs
scaled_sitecovs <- cbind(scaled_numeric_sitecovs, sitecovs[setdiff(names(sitecovs), names(numeric_sitecovs))])
rm(list=ls())
setwd("C:/Users/jasmi/OneDrive/Documents/Academic/OSU/Git/oss-occu/data")
library(unmarked)
library(ggplot2)
library(stats)
library(MASS)
library(tidyverse)
dwd <- read.csv("dwd.complete.csv")
site <- read.csv("site.complete.csv")
subplot <- read.csv("subplot.complete.csv")
sals <- read.csv("sals.complete.csv",
colClasses = c(landowner="factor", stand="character", trt="factor",
obs="factor", subplot="factor", recap="factor",
pass="factor", spp="factor", cover_obj="factor",
substrate="factor", age_class="factor"))
oss.dets <- read.csv("oss.occu.df.csv")
enes.dets <- read.csv("enes.occu.df.csv")
#subset df with only cols i need (cant use site id here bc its a character)
df <- subset(subplot[,c('subplot','soil_moist_avg')])
#change to long format
df_long <- df %>%
pivot_longer(cols = -subplot, names_to = "variable", values_to = "value")
#add site id back in
df_long <- cbind(df_long, subplot$site_id)
# Reshape the data back to wide format, flipping the dimensions
df_wide <- df_long %>%
pivot_wider(names_from = subplot, values_from = value)
soil_moist_wide <- df_wide[,-1]
soil_moist_wide <- as.data.frame(soil_moist_wide)
rownames(soil_moist_wide) <- soil_moist_wide[,1]
soil_moist <- soil_moist_wide[,-1]
df <- subset(subplot[,c('subplot','weather')])
#change to long format
df_long <- df %>%
pivot_longer(cols = -subplot, names_to = "variable", values_to = "value")
#add site id back in
df_long <- cbind(df_long, subplot$site_id)
#reshape the data back to wide format, flipping the dimensions
df_wide <- df_long %>%
pivot_wider(names_from = subplot, values_from = value)
weather_wide <- df_wide[,-1]
weather_wide <- as.data.frame(weather_wide)
rownames(weather_wide) <- weather_wide[,1]
weather <- weather_wide[,-1]
hum <- sitecovs$hum
sitecovs <- subset(site[,c('site_id','trt','date_mdy','elev','temp','hum')])
sitecovs$trt <- factor(sitecovs$treatment,
levels = c("UU", "BU", "HB", "HU", "BS"))
sitecovs$trt <- factor(sitecovs$trt,
levels = c("UU", "BU", "HB", "HU", "BS"))
# Scale Occupancy Covariates
sitecovs$site <- as.character(sitecovs$site)
# Identify numeric sitecovs
numeric_sitecovs <- sitecovs[sapply(sitecovs, is.numeric)]
# Scale the numeric sitecovs
scaled_numeric_sitecovs <- as.data.frame(scale(numeric_sitecovs))
# Combine the scaled numeric sitecovs with non-numeric sitecovs
scaled_sitecovs <- cbind(scaled_numeric_sitecovs, sitecovs[setdiff(names(sitecovs), names(numeric_sitecovs))])
## name and scale covs for unmarked object ----------------------------------------------------------
#data frames with site rows and subplots columns
hum <- sitecovs$hum
temp <- sitecovs$temp
weather <- weather
date <- site$date_mdy
soilmoist <- soil_moist
#scale det dovs
scaled_hum <- as.data.frame(scale(hum))
scaled_temp <- as.data.frame(scale(temp))
#scaled_date <- as.data.frame(scale(date))
scaled_soilmoist <- as.data.frame(scale(soilmoist))
## OSS Top Model Exploration-------------------------------------------------------------------------------
# Build OSS unmarkedFrameOccu Object
UMF.oss.scaled <- unmarkedFrameOccu(
y = oss.dets,
obsCovs = list(humidity = scaled_hum, temp = scaled_temp, weather = weather, date = date_mdy,
soilmoist = scaled_soilmoist),
siteCovs = scaled_sitecovs)
date <-  site$date_mdy
## OSS Top Model Exploration-------------------------------------------------------------------------------
# Build OSS unmarkedFrameOccu Object
UMF.oss.scaled <- unmarkedFrameOccu(
y = oss.dets,
obsCovs = list(humidity = scaled_hum, temp = scaled_temp, weather = weather, date = date,
soilmoist = scaled_soilmoist),
siteCovs = scaled_sitecovs)
View(scaled_hum)
## OSS Top Model Exploration-------------------------------------------------------------------------------
# Build OSS unmarkedFrameOccu Object
UMF.oss.scaled <- unmarkedFrameOccu(
y = oss.dets,
obsCovs = list(weather = weather, date = date,
soilmoist = scaled_soilmoist),
siteCovs = scaled_sitecovs)
## OSS Top Model Exploration-------------------------------------------------------------------------------
# Build OSS unmarkedFrameOccu Object
UMF.oss.scaled <- unmarkedFrameOccu(
y = oss.dets,
obsCovs = list(weather = weather,
soilmoist = scaled_soilmoist),
siteCovs = scaled_sitecovs)
## OSS Top Model Exploration-------------------------------------------------------------------------------
# Build OSS unmarkedFrameOccu Object
UMF.oss.scaled <- unmarkedFrameOccu(
y = oss.dets,
obsCovs = list(weather = weather, soilmoist = scaled_soilmoist),
siteCovs = scaled_sitecovs)
# 1: psi(.) p(.)
m1 <- occu(~1 ~1, data=UMF.oss.scaled)
preds1 <- predict(m1, type="state")
sites_trt <- sitecovs[, c("site","treatment")]
sites_trt <- sitecovs[, c("site","trt")]
site_preds1 <- cbind(sites_trt, preds1)
view(site_preds1)
view(m1)
summary(m1)
## OSS Top Model Exploration-------------------------------------------------------------------------------
# Build OSS unmarkedFrameOccu Object
UMF.oss.scaled <- unmarkedFrameOccu(
y = oss.dets,
obsCovs = list(weather = weather, soilmoist = scaled_soilmoist),
siteCovs = scaled_sitecovs)
# 2: psi(treatment) p(.)
m2 <- occu(~1 ~treatment, data=UMF.oss.scaled)
# 2: psi(treatment) p(.)
m2 <- occu(~1 ~trt, data=UMF.oss.scaled)
summary(m2)
## OSS Top Model Exploration-------------------------------------------------------------------------------
# Build OSS unmarkedFrameOccu Object
UMF.oss.scaled <- unmarkedFrameOccu(
y = oss.dets,
obsCovs = list(weather = weather, soilmoist = scaled_soilmoist),
siteCovs = scaled_sitecovs)
# 3: psi(.) p(x) , x = date, treatment, or soil moisture                *************************
m3 <- occu(~soil_moist ~1, data=UMF.oss.scaled)
# 3: psi(.) p(x) , x = date, treatment, or soil moisture                *************************
m3 <- occu(~soilmoist ~1, data=UMF.oss.scaled)
summary(m3)
# 4: psi(treatment) p(x) , x = date, treatment, or soil moisture
m4 <- occu(~1 ~temp, data=UMF.oss.scaled)
## OSS Top Model Exploration-------------------------------------------------------------------------------
# Build OSS unmarkedFrameOccu Object
UMF.oss.scaled <- unmarkedFrameOccu(
y = oss.dets,
obsCovs = list(weather = weather, soilmoist = scaled_soilmoist),
siteCovs = scaled_sitecovs)
# 4: psi(treatment) p(x) , x = date, treatment, or soil moisture
m4 <- occu(~1 ~temp, data=UMF.oss.scaled)
summary(m4)
# 4: psi(treatment) p(x) , x = date, treatment, or soil moisture
m4 <- occu(~1 ~temp + trt, data=UMF.oss.scaled)
summary(m4)
preds4 <- predict(m4, type="state")
sites_trt <- sitecovs[, c("site","trt")]
site_preds4 <- cbind(sites_trt, preds4)
# Barplot of predictions for each treatment
ggplot(site_preds4, aes(x = treatment, y = Predicted, ymin = lower, ymax = upper, fill = treatment)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
geom_errorbar(aes(ymax = upper, ymin = lower), width = 0.25, position = position_dodge(width = 0.7), linewidth = 1) +
labs(title = "OSS: Treatment vs. Predicted Occupancy",
x = "Treatment", y = "Predicted Value") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_brewer(palette = "Set1")
# Barplot of predictions for each treatment
ggplot(site_preds4, aes(x = trt, y = Predicted, ymin = lower, ymax = upper, fill = trt)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
geom_errorbar(aes(ymax = upper, ymin = lower), width = 0.25, position = position_dodge(width = 0.7), linewidth = 1) +
labs(title = "OSS: Treatment vs. Predicted Occupancy",
x = "Treatment", y = "Predicted Value") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_brewer(palette = "Set1")
# Boxplot of preds with confidence intervals
ggplot(site_preds4, aes(x = trt, y = Predicted, fill = trt)) +
geom_boxplot() +
geom_point(position = position_dodge(width = 0.75), size = 3) +
geom_errorbar(aes(ymax = upper, ymin = lower), width = 0.25, position = position_dodge(width = 0.75), size = 1) +
labs(title = "OSS: Treatment vs. Predicted Occupancy",
x = "Treatment", y = "Predicted Value") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_brewer(palette = "Set1")
