rpart.plot(oss.tree.sub)
plotcp(oss.tree.sub)
oss.tree.sub.prune <- prune(oss.tree.sub, 0.028)
rpart.plot(oss.tree.sub.prune)
oss.tree.sub.prune <- prune(oss.tree.sub, 0.035)
rpart.plot(oss.tree.sub.prune)
oss.tree.sub.prune2 <- prune(oss.tree.sub2, 0.035)
rpart.plot(oss.tree.sub.prune2)
## subsetted env data with dwd extra metrics
oss.tree.sub2 <- rpart(oss_PA ~ ., data=env_subset, minsplit=2, xval=5)
rpart.plot(oss.tree.sub2)
plotcp(oss.tree.sub2)
env_subset_dwd <- cbind(env_subset, dwdsub)
## subsetted env data with dwd extra metrics
oss.tree.sub2 <- rpart(oss_PA ~ ., data=env_subset_dwd, minsplit=2, xval=5)
View(env_subset_dwd)
View(env_subset)
#add extra downed wood metrics to env subset
dwd_extra <- read.csv("dwd.extra.metrics.csv")
dwdsub <- dwd_extra[,c("dwd_dens","log_dens","stump_dens","avg_volume")]
env_subset_dwd <- cbind(env_subset, dwdsub)
env_subset <- cbind(env_subset, dwdsub)
rm(list=ls())
setwd("~/Library/CloudStorage/OneDrive-Personal/Documents/Academic/OSU/Git/oss-occu/data")
library(ggplot2)
library(rpart)
library(rpart.plot)
# site-level data
dat <- readRDS("site_level_matrix.rds")
row.names(dat) <- dat[,1]
sals <- dat[26:27]
env <- dat[1:25]
drop <- c("lat","long","stand","tree_farm","landowner","site_id","year","weather")
env <- env[,!(colnames(env) %in% drop)]
env_cont <- env[,-1]
#took out elevation, jul date, temp (we already know theyre elevationally/temporally specific)
drop <- c("jul_date","elev","temp")
env_subset <- env_cont[,!(colnames(env_cont) %in% drop)]
#add extra downed wood metrics to env subset
dwd_extra <- read.csv("dwd.extra.metrics.csv")
dwdsub <- dwd_extra[,c("dwd_dens","log_dens","stump_dens","avg_volume")]
env_subset <- cbind(env_subset, dwdsub)
rm(list=ls())
setwd("~/Library/CloudStorage/OneDrive-Personal/Documents/Academic/OSU/Git/oss-occu/data")
library(ggplot2)
library(rpart)
library(rpart.plot)
# site-level data
dat <- readRDS("site_level_matrix.rds")
row.names(dat) <- dat[,1]
sals <- dat[26:27]
env <- dat[1:25]
drop <- c("lat","long","stand","tree_farm","landowner","site_id","year","weather")
env <- env[,!(colnames(env) %in% drop)]
env_cont <- env[,-1]
#took out elevation, jul date, temp (we already know theyre elevationally/temporally specific)
drop <- c("jul_date","elev","temp")
env_subset <- env_cont[,!(colnames(env_cont) %in% drop)]
#add extra downed wood metrics to env subset
dwd_extra <- read.csv("dwd.extra.metrics.csv")
dwdsub <- dwd_extra[,c("dwd_dens","log_dens","stump_dens","avg_volume")]
env_subset_dwd <- cbind(env_subset, dwdsub)
# sal presences absence
oss_PA <- ifelse(sals$oss > 0, "Present", "Absent")
enes_PA <- ifelse(sals$enes > 0, "Present", "Absent")
View(env_subset_dwd)
## subsetted env data with dwd extra metrics
oss.tree.sub2 <- rpart(oss_PA ~ ., data=env_subset_dwd, minsplit=2, xval=5)
rpart.plot(oss.tree.sub2)
plotcp(oss.tree.sub2)
oss.tree.sub.prune2 <- prune(oss.tree.sub2, 0.053)
rpart.plot(oss.tree.sub.prune2)
#save
png(filename = "~/Library/CloudStorage/OneDrive-Personal/Documents/Academic/OSU/Git/habitat-analysis/figures/classificationtree/oss_classtree_subdwd.png",
width = 1200, height = 1000, res = 150)
rpart.plot(oss.tree.sub.prune2)
dev.off()
## subsetted env data with dwd extra metrics
enes.tree.sub2 <- rpart(enes_PA ~ ., data=env_subset_dwd, minsplit=2, xval=5)
rpart.plot(enes.tree.sub2)
plotcp(enes.tree.sub2)
enes.tree.sub.prune2 <- prune(enes.tree.sub2, 0.019)
rpart.plot(enes.tree.sub.prune2)
#save
png(filename = "~/Library/CloudStorage/OneDrive-Personal/Documents/Academic/OSU/Git/habitat-analysis/figures/classificationtree/enes_classtree_subdwd.png",
width = 1200, height = 1000, res = 150)
rpart.plot(enes.tree.sub.prune2)
dev.off()
## using all continuous env variables
oss.tree <- rpart(oss_PA ~ ., data=env_cont, minsplit=2, xval=5)
rpart.plot(oss.tree)
plotcp(oss.tree)
## subsetted env data
oss.tree.sub <- rpart(oss_PA ~ ., data=env_subset, minsplit=2, xval=5)
rpart.plot(oss.tree.sub)
plotcp(oss.tree.sub)
## subsetted env data with dwd extra metrics
oss.tree.sub2 <- rpart(oss_PA ~ ., data=env_subset_dwd, minsplit=2, xval=5)
rpart.plot(oss.tree.sub2)
plotcp(oss.tree.sub2)
oss.tree.sub.prune2 <- prune(oss.tree.sub2, 0.035)
rpart.plot(oss.tree.sub.prune2)
## subsetted env data with dwd extra metrics
oss.tree.sub2 <- rpart(oss_PA ~ ., data=env_subset_dwd, minsplit=2, xval=5)
rpart.plot(oss.tree.sub2)
plotcp(oss.tree.sub2)
# set seed for plotcp function
set.seed(123)
## using all continuous env variables
oss.tree <- rpart(oss_PA ~ ., data=env_cont, minsplit=2, xval=5)
rpart.plot(oss.tree)
plotcp(oss.tree)
# set seed for plotcp function
set.seed(50)
## using all continuous env variables
oss.tree <- rpart(oss_PA ~ ., data=env_cont, minsplit=2, xval=5)
rpart.plot(oss.tree)
plotcp(oss.tree)
## using all continuous env variables
oss.tree <- rpart(oss_PA ~ ., data=env_cont, minsplit=2, xval=5)
rpart.plot(oss.tree)
plotcp(oss.tree)
## using all continuous env variables
oss.tree <- rpart(oss_PA ~ ., data=env_cont, minsplit=2, xval=5)
rpart.plot(oss.tree)
plotcp(oss.tree)
# set seed for plotcp function
set.seed(50)
## using all continuous env variables
oss.tree <- rpart(oss_PA ~ ., data=env_cont, minsplit=2, xval=5)
rpart.plot(oss.tree)
plotcp(oss.tree)
rm(list=ls())
setwd("~/Library/CloudStorage/OneDrive-Personal/Documents/Academic/OSU/Git/oss-occu/data")
library(ggplot2)
library(rpart)
library(rpart.plot)
## load data--------------------------------------------------------------------------------------------------
# site-level data
dat <- readRDS("site_level_matrix.rds")
row.names(dat) <- dat[,1]
sals <- dat[26:27]
env <- dat[1:25]
drop <- c("lat","long","stand","tree_farm","landowner","site_id","year","weather")
env <- env[,!(colnames(env) %in% drop)]
env_cont <- env[,-1]
#took out elevation, jul date, temp (we already know theyre elevationally/temporally specific)
drop <- c("jul_date","elev","temp")
env_subset <- env_cont[,!(colnames(env_cont) %in% drop)]
#add extra downed wood metrics to env subset
dwd_extra <- read.csv("dwd.extra.metrics.csv")
dwdsub <- dwd_extra[,c("dwd_dens","log_dens","stump_dens","avg_volume")]
env_subset_dwd <- cbind(env_subset, dwdsub)
# sal presences absence
oss_PA <- ifelse(sals$oss > 0, "Present", "Absent")
enes_PA <- ifelse(sals$enes > 0, "Present", "Absent")
## using all continuous env variables
oss.tree <- rpart(oss_PA ~ ., data=env_cont, minsplit=2, xval=5)
rpart.plot(oss.tree)
plotcp(oss.tree)
## using all continuous env variables
oss.tree <- rpart(oss_PA ~ ., data=env_cont, minsplit=2, xval=5)
rpart.plot(oss.tree)
plotcp(oss.tree)
## using all continuous env variables
oss.tree <- rpart(oss_PA ~ ., data=env_cont, minsplit=2, xval=5)
rpart.plot(oss.tree)
plotcp(oss.tree)
## using all continuous env variables
set.seed(50) # set seed for plotcp function
oss.tree <- rpart(oss_PA ~ ., data=env_cont, minsplit=2, xval=5)
rpart.plot(oss.tree)
plotcp(oss.tree)
## using all continuous env variables
set.seed(50) # set seed for plotcp function
oss.tree <- rpart(oss_PA ~ ., data=env_cont, minsplit=2, xval=5)
rpart.plot(oss.tree)
plotcp(oss.tree)
## using all continuous env variables
set.seed(123) # set seed for plotcp function
oss.tree <- rpart(oss_PA ~ ., data=env_cont, minsplit=2, xval=5)
rpart.plot(oss.tree)
plotcp(oss.tree)
## using all continuous env variables
set.seed(100) # set seed for plotcp function
oss.tree <- rpart(oss_PA ~ ., data=env_cont, minsplit=2, xval=5)
rpart.plot(oss.tree)
plotcp(oss.tree)
## using all continuous env variables
set.seed(1234) # set seed for plotcp function
oss.tree <- rpart(oss_PA ~ ., data=env_cont, minsplit=2, xval=5)
rpart.plot(oss.tree)
plotcp(oss.tree)
printcp(oss.tree)
# Get the best CP based on the 1-SE rule
min_xerror <- min(oss.tree$cptable[, "xerror"])
best_cp <- oss.tree$cptable[oss.tree$cptable[, "xerror"] <= min_xerror + oss.tree$cptable[, "xstd"], "CP"][1]
set.seed(50) # set seed for plotcp function
oss.tree <- rpart(oss_PA ~ ., data=env_cont, minsplit=2, xval=5)
rpart.plot(oss.tree)
plotcp(oss.tree)
printcp(oss.tree)
# Get the best CP based on the 1-SE rule
min_xerror <- min(oss.tree$cptable[, "xerror"])
best_cp <- oss.tree$cptable[oss.tree$cptable[, "xerror"] <= min_xerror + oss.tree$cptable[, "xstd"], "CP"][1]
best_cp
set.seed(100) # set seed for plotcp function
oss.tree <- rpart(oss_PA ~ ., data=env_cont, minsplit=2, xval=5)
rpart.plot(oss.tree)
plotcp(oss.tree)
printcp(oss.tree)
# Get the best CP based on the 1-SE rule
min_xerror <- min(oss.tree$cptable[, "xerror"])
best_cp <- oss.tree$cptable[oss.tree$cptable[, "xerror"] <= min_xerror + oss.tree$cptable[, "xstd"], "CP"][1]
best_cp
set.seed(50) # set seed for plotcp function
oss.tree <- rpart(oss_PA ~ ., data=env_cont, minsplit=2, xval=5)
rpart.plot(oss.tree)
plotcp(oss.tree)
printcp(oss.tree)
# Get the best CP based on the 1-SE rule
min_xerror <- min(oss.tree$cptable[, "xerror"])
best_cp <- oss.tree$cptable[oss.tree$cptable[, "xerror"] <= min_xerror + oss.tree$cptable[, "xstd"], "CP"][1]
best_cp
set.seed(10000) # set seed for plotcp function
oss.tree <- rpart(oss_PA ~ ., data=env_cont, minsplit=2, xval=5)
rpart.plot(oss.tree)
plotcp(oss.tree)
printcp(oss.tree)
# Get the best CP based on the 1-SE rule
min_xerror <- min(oss.tree$cptable[, "xerror"])
best_cp <- oss.tree$cptable[oss.tree$cptable[, "xerror"] <= min_xerror + oss.tree$cptable[, "xstd"], "CP"][1]
best_cp
#prune
oss.tree.prune <- prune(oss.tree, 0.12)
rpart.plot(oss.tree.prune, cex=1.3)
## using all continuous env variables
set.seed(123) # set seed for plotcp function
oss.tree <- rpart(oss_PA ~ ., data=env_cont, minsplit=2, xval=5)
rpart.plot(oss.tree)
plotcp(oss.tree)
printcp(oss.tree)
# Get the best CP based on the 1-SE rule
min_xerror <- min(oss.tree$cptable[, "xerror"])
best_cp <- oss.tree$cptable[oss.tree$cptable[, "xerror"] <= min_xerror + oss.tree$cptable[, "xstd"], "CP"][1]
best_cp
#prune
oss.tree.prune <- prune(oss.tree, 0.12)
rpart.plot(oss.tree.prune, cex=1.3)
## using all continuous env variables
set.seed(123) # set seed for plotcp function
oss.tree <- rpart(oss_PA ~ ., data=env_cont, minsplit=2, xval=10)
rpart.plot(oss.tree)
plotcp(oss.tree)
printcp(oss.tree)
# Get the best CP based on the 1-SE rule
min_xerror <- min(oss.tree$cptable[, "xerror"])
best_cp <- oss.tree$cptable[oss.tree$cptable[, "xerror"] <= min_xerror + oss.tree$cptable[, "xstd"], "CP"][1]
best_cp
## using all continuous env variables
set.seed(123) # set seed for plotcp function
oss.tree <- rpart(oss_PA ~ ., data=env_cont, minsplit=2, xval=20)
rpart.plot(oss.tree)
plotcp(oss.tree)
printcp(oss.tree)
# Get the best CP based on the 1-SE rule
min_xerror <- min(oss.tree$cptable[, "xerror"])
best_cp <- oss.tree$cptable[oss.tree$cptable[, "xerror"] <= min_xerror + oss.tree$cptable[, "xstd"], "CP"][1]
best_cp
#prune
oss.tree.prune <- prune(oss.tree, 0.12)
rpart.plot(oss.tree.prune, cex=1.3)
#prune
#chose the CP with the lowest xerror; the above method gave a CP that was too high and the tree was
#just the root node with no splits
oss.tree.prune <- prune(oss.tree, 0.05)
rpart.plot(oss.tree.prune, cex=1.3)
## subsetted env data
set.seed(123)
oss.tree.sub <- rpart(oss_PA ~ ., data=env_subset, minsplit=2, xval=5)
rpart.plot(oss.tree.sub)
plotcp(oss.tree.sub)
# Get the best CP based on the 1-SE rule
min_xerror <- min(oss.tree.sub$cptable[, "xerror"])
best_cp <- oss.tree.sub$cptable[oss.tree.sub$cptable[, "xerror"] <= min_xerror + oss.tree.sub$cptable[, "xstd"], "CP"][1]
oss.tree.sub.prune <- prune(oss.tree.sub, 0.08)
rpart.plot(oss.tree.sub.prune)
## subsetted env data with dwd extra metrics
set.seed(123)
oss.tree.sub2 <- rpart(oss_PA ~ ., data=env_subset_dwd, minsplit=2, xval=5)
rpart.plot(oss.tree.sub2)
plotcp(oss.tree.sub2)
printcp(oss.tree.sub2)
# Get the best CP based on the 1-SE rule
min_xerror <- min(oss.tree.sub2$cptable[, "xerror"])
best_cp <- oss.tree.sub2$cptable[oss.tree.sub2$cptable[, "xerror"] <= min_xerror + oss.tree.sub2$cptable[, "xstd"], "CP"][1]
#prune
#chose the CP with the lowest xerror; the above method gave a CP that was too high and the tree was
#just the root node with no splits; but it is overfitting to some extent
oss.tree.sub.prune2 <- prune(oss.tree.sub2, 0.08)
rpart.plot(oss.tree.sub.prune2)
set.seed(123)
oss.tree.sub2 <- rpart(oss_PA ~ ., data=env_subset_dwd, minsplit=2, xval=10)
rpart.plot(oss.tree.sub2)
plotcp(oss.tree.sub2)
printcp(oss.tree.sub2)
min_xerror <- min(oss.tree.sub2$cptable[, "xerror"])
best_cp <- oss.tree.sub2$cptable[oss.tree.sub2$cptable[, "xerror"] <= min_xerror + oss.tree.sub2$cptable[, "xstd"], "CP"][1]
set.seed(123)
oss.tree.sub2 <- rpart(oss_PA ~ ., data=env_subset_dwd, minsplit=2, xval=20)
rpart.plot(oss.tree.sub2)
plotcp(oss.tree.sub2)
printcp(oss.tree.sub2)
# Get the best CP based on the 1-SE rule
min_xerror <- min(oss.tree.sub2$cptable[, "xerror"])
best_cp <- oss.tree.sub2$cptable[oss.tree.sub2$cptable[, "xerror"] <= min_xerror + oss.tree.sub2$cptable[, "xstd"], "CP"][1]
set.seed(123)
oss.tree.sub2 <- rpart(oss_PA ~ ., data=env_subset_dwd, minsplit=2, xval=10)
rpart.plot(oss.tree.sub2)
plotcp(oss.tree.sub2)
printcp(oss.tree.sub2)
#prune
#chose the CP with the lowest xerror; the above method gave a CP that was too high and the tree was
#just the root node with no splits; but it is now overfitting to some extent
oss.tree.sub.prune2 <- prune(oss.tree.sub2, 0.03)
rpart.plot(oss.tree.sub.prune2)
library(caret)
pred <- predict(oss.tree.sub.prune2, type = "class")
confusionMatrix(pred, env_subset_dwd$oss_PA)
install.packages("caret")
library(caret)
confusionMatrix(pred, env_subset_dwd$oss_PA)
pred <- predict(oss.tree.sub.prune2, type = "class")
confusionMatrix(pred, env_subset_dwd$oss_PA)
library(caret)
pred <- predict(oss.tree.sub.prune2, type = "class")
confusionMatrix(pred, env_subset_dwd$oss_PA)
is.factor(env_subset_dwd$oss_PA)
env_subset_dwd$oss_PA <- as.factor(env_subset_dwd$oss_PA)
env_subset_dwd$oss_PA <- as.factor(env_subset_dwd$oss_PA)
levels(pred)
levels(env_subset_dwd$oss_PA)
printcp(oss.tree.sub2)
printcp(oss.tree.sub.prune2)
## subsetted env data with dwd extra metrics
set.seed(123)
enes.tree.sub2 <- rpart(enes_PA ~ ., data=env_subset_dwd, minsplit=2, xval=5)
rpart.plot(enes.tree.sub2)
plotcp(enes.tree.sub2)
printcp(oss.tree.sub2)
printcp(enes.tree.sub2)
# Get the best CP based on the 1-SE rule
min_xerror <- min(enes.tree.sub2$cptable[, "xerror"])
best_cp <- enes.tree.sub2$cptable[enes.tree.sub2$cptable[, "xerror"] <= min_xerror + enes.tree.sub2$cptable[, "xstd"], "CP"][1]
enes.tree.sub.prune2 <- prune(enes.tree.sub2, 0.0714)
rpart.plot(enes.tree.sub.prune2)
rpart.plot(enes.tree.sub2)
plotcp(enes.tree.sub2)
## subsetted env data with dwd extra metrics
set.seed(123)
enes.tree.sub2 <- rpart(enes_PA ~ ., data=env_subset_dwd, minsplit=2, xval=10)
rpart.plot(enes.tree.sub2)
plotcp(enes.tree.sub2)
printcp(enes.tree.sub2)
# Get the best CP based on the 1-SE rule
min_xerror <- min(enes.tree.sub2$cptable[, "xerror"])
best_cp <- enes.tree.sub2$cptable[enes.tree.sub2$cptable[, "xerror"] <= min_xerror + enes.tree.sub2$cptable[, "xstd"], "CP"][1]
## subsetted env data with dwd extra metrics
set.seed(123)
enes.tree.sub2 <- rpart(enes_PA ~ ., data=env_subset_dwd, minsplit=2, xval=20)
rpart.plot(enes.tree.sub2)
plotcp(enes.tree.sub2)
printcp(enes.tree.sub2)
# Get the best CP based on the 1-SE rule
min_xerror <- min(enes.tree.sub2$cptable[, "xerror"])
best_cp <- enes.tree.sub2$cptable[enes.tree.sub2$cptable[, "xerror"] <= min_xerror + enes.tree.sub2$cptable[, "xstd"], "CP"][1]
rm(list=ls())
setwd("~/Library/CloudStorage/OneDrive-Personal/Documents/Academic/OSU/Git/oss-occu/data")
library(randomForest)
library(ggplot2)
# site-level data
dat <- readRDS("site_level_matrix.rds")
row.names(dat) <- dat[,1]
sals <- dat[26:27]
env <- dat[1:25]
drop <- c("lat","long","stand","tree_farm","landowner","site_id","year","weather")
env <- env[,!(colnames(env) %in% drop)]
env_cont <- env[,-1]
#took out elevation, jul date (we already know theyre elevationally/temporally specific)
drop <- c("jul_date","elev")
env_subset <- env_cont[,!(colnames(env_cont) %in% drop)]
#add extra downed wood metrics to env subset
dwd_extra <- read.csv("dwd.extra.metrics.csv")
dwdsub <- dwd_extra[,c("dwd_dens","log_dens","stump_dens","avg_volume")]
env_subset_dwd <- cbind(env_subset, dwdsub)
# sal presences absence
oss_PA <- ifelse(sals$oss > 0, "Present", "Absent")
enes_PA <- ifelse(sals$enes > 0, "Present", "Absent")
#subset with extra dwd metrics
oss.forest.subdwd <- randomForest(as.factor(oss_PA) ~ ., data=env_subset_dwd, ntree = 5000, mtry = 5,
importance=TRUE, keep.forest=FALSE, na.action=na.omit)
ossForestData.subdwd <- as.data.frame(importance(oss.forest.subdwd))
ossForestData.subdwd <- ossForestData.sub[order(ossForestData.subdwd[,1]),]
ossForestData.subdwd <- as.data.frame(importance(oss.forest.subdwd))
ossForestData.subdwd <- ossForestData.subdwd[order(ossForestData.subdwd[,1]),]
ossForestData.subdwd$Var.Names <- row.names(ossForestData.subdwd)
colnames(ossForestData.subdwd) <- c("Absent","Present","MeanDec","IncNodePurity","Var.Names")
#ggplot
p5 <- ggplot(ossForestData.subdwd, aes(x = Var.Names, y = MeanDec)) +
geom_segment(aes(x = Var.Names, xend = Var.Names, y = 0, yend = MeanDec,
color = ifelse(MeanDec > 15, ">15",
ifelse(MeanDec >= 10, "10-15", "<10"))),
show.legend = FALSE) +
geom_point(aes(size = IncNodePurity,
color = ifelse(MeanDec > 15, ">15",
ifelse(MeanDec >= 10, "10-15", "<10"))),
alpha = 0.6) +
theme_light() +
coord_flip() +
scale_color_manual(values = c(">15" = "blue", "10-15" = "#66C2A5", "<10" = "#FFD700")) +
labs(color = "Range", size = "Node Purity") +
theme(
text = element_text(size = 20)
) +
labs(
title = "Variable Importance from Random Forest Model - OSS",
x = "Environmental Variables",
y = "Mean Decrease in Accuracy",
size = "Node Purity"
)
p5
ggsave(filename = "oss_varimp_subset_dwd.png", plot = p5, device = "png",
path = "~/Library/CloudStorage/OneDrive-Personal/Documents/Academic/OSU/Git/habitat-analysis/figures/randomforest")
#subset with extra dwd metrics
enes.forest.subdwd <- randomForest(as.factor(enes_PA) ~ ., data=env_subset_dwd, ntree = 5000, mtry = 5,
importance=TRUE, keep.forest=FALSE, na.action=na.omit)
enesForestData.subdwd <- as.data.frame(importance(enes.forest.subdwd))
enesForestData.subdwd <- enesForestData.subdwd[order(enesForestData.subdwd[,1]),]
enesForestData.subdwd$Var.Names <- row.names(enesForestData.subdwd)
colnames(enesForestData.subdwd) <- c("Absent","Present","MeanDec","IncNodePurity","Var.Names")
#ggplot
p6 <- ggplot(enesForestData.subdwd, aes(x = Var.Names, y = MeanDec)) +
geom_segment(aes(x = Var.Names, xend = Var.Names, y = 0, yend = MeanDec,
color = ifelse(MeanDec > 15, ">15",
ifelse(MeanDec >= 10, "10-15", "<10"))),
show.legend = FALSE) +
geom_point(aes(size = IncNodePurity,
color = ifelse(MeanDec > 15, ">15",
ifelse(MeanDec >= 10, "10-15", "<10"))),
alpha = 0.6) +
theme_light() +
coord_flip() +
scale_color_manual(values = c(">15" = "blue", "10-15" = "#66C2A5", "<10" = "#FFD700")) +
labs(color = "Range", size = "Node Purity") +
theme(
text = element_text(size = 20)
) +
labs(
title = "Variable Importance from Random Forest Model - enes",
x = "Environmental Variables",
y = "Mean Decrease in Accuracy",
size = "Node Purity"
)
p6
ggsave(filename = "enes_varimp_subset_dwd.png", plot = p5, device = "png",
path = "~/Library/CloudStorage/OneDrive-Personal/Documents/Academic/OSU/Git/habitat-analysis/figures/randomforest")
ggsave(filename = "enes_varimp_subset_dwd.png", plot = p6, device = "png",
path = "~/Library/CloudStorage/OneDrive-Personal/Documents/Academic/OSU/Git/habitat-analysis/figures/randomforest")
oss.tree.sub <- rpart(oss_PA ~ ., data=env_subset, minsplit=2, xval=5)
rpart.plot(oss.tree.sub)
plotcp(oss.tree.sub)
oss.tree.sub.prune <- prune(oss.tree.sub, 0.053)
rpart.plot(oss.tree.sub.prune)
set.seed(123)
oss.tree.sub2 <- rpart(oss_PA ~ ., data=env_subset_dwd, minsplit=2, xval=10)
rpart.plot(oss.tree.sub2)
plotcp(oss.tree.sub2)
printcp(oss.tree.sub2)
# Get the best CP based on the 1-SE rule
# min_xerror <- min(oss.tree.sub2$cptable[, "xerror"])
# best_cp <- oss.tree.sub2$cptable[oss.tree.sub2$cptable[, "xerror"] <= min_xerror + oss.tree.sub2$cptable[, "xstd"], "CP"][1]
#prune
#the above method gave a CP that was too high and the tree was
#just the root node with no splits; i chose the CP with the lowest xerror,
#but it is now overfitting to some extent
oss.tree.sub.prune2 <- prune(oss.tree.sub2, 0.03)
rpart.plot(oss.tree.sub.prune2)
printcp(oss.tree.sub.prune2)
plotcp(oss.tree.sub2)
rpart.plot(oss.tree.sub2)
rpart.plot(oss.tree.sub)
rpart.plot(oss.tree.sub.prune)
rpart.plot(oss.tree.sub.prune2)
png(filename = "~/Library/CloudStorage/OneDrive-Personal/Documents/Academic/OSU/Git/habitat-analysis/figures/classificationtree/oss_classtree_subdwd.png",
width = 1200, height = 1000, res = 150)
rpart.plot(oss.tree.sub.prune2)
dev.off()
set.seed(123)
enes.tree.sub2 <- rpart(enes_PA ~ ., data=env_subset_dwd, minsplit=2, xval=10)
rpart.plot(enes.tree.sub2)
plotcp(enes.tree.sub2)
printcp(enes.tree.sub2)
# Get the best CP based on the 1-SE rule
min_xerror <- min(enes.tree.sub2$cptable[, "xerror"])
best_cp <- enes.tree.sub2$cptable[enes.tree.sub2$cptable[, "xerror"] <= min_xerror + enes.tree.sub2$cptable[, "xstd"], "CP"][1]
enes.tree.sub.prune2 <- prune(enes.tree.sub2, 0.0714)
rpart.plot(enes.tree.sub.prune2)
rpart.plot(enes.tree.sub.prune2)
png(filename = "~/Library/CloudStorage/OneDrive-Personal/Documents/Academic/OSU/Git/habitat-analysis/figures/classificationtree/enes_classtree_subdwd.png",
width = 1200, height = 1000, res = 150)
rpart.plot(enes.tree.sub.prune2)
dev.off()
