print(results_table)
# organize K-W results
# Create a data frame with the test statistics
results_table <- data.frame(
Variable = names(kruskal_results),
Chi_Squared = sapply(kruskal_results, function(x) x$statistic),
p_value = sapply(kruskal_results, function(x) x$p.value),
Effect_Size = sapply(kruskal_results, function(x)
format(x$statistic / (sum(!is.na(dat[[names(kruskal_results)[1]]]) &
!is.na(dat2$trt)) * (length(unique(dat2$trt)) - 1)), digits = 3))
)
# Format p-values nicely
results_table$p_value <- ifelse(
results_table$p_value < 0.001,
"< 0.001",
format(results_table$p_value, scientific = TRUE)
)
# Sort by chi-squared value (strongest to weakest effect)
results_table <- results_table[order(-results_table$Chi_Squared), ]
#  Variable     Chi_Squared    df      p_value     Effect_Size
#  canopy_cov   119.8949828    4      < 0.001         0.236
#  char_cl      103.8020187    4      < 0.001         0.204
#  fwd_cov      55.5070828     4      < 0.001         0.109
#  veg_cov      23.7868232     4      < 0.001        0.0468
#  avg_volume   19.2191300     4      < 0.001        0.0378
#  dwd_cov      15.6389435     4    3.543963e-03     0.0308
#  size_cl      0.7071337      4    9.504463e-01    0.00139
# organize Dunn's results
# Create a function to get Dunn's test comparisons
get_dunn_comparisons <- function(var_name) {
# Remove the ".Kruskal-Wallis chi-squared" suffix from the variable name
clean_var_name <- gsub("\\.Kruskal-Wallis chi-squared", "", var_name)
if (!is.null(dunn_results[[clean_var_name]])) {
# Get the data frame from the dunnTest object
df <- dunn_results[[clean_var_name]]$res
# Create comparison strings
comparisons <- paste(df$Comparison, "p =", format(df$P.adj, scientific = TRUE))
# Return all significant comparisons
return(paste(comparisons, collapse = "\n"))
}
return("Not significant")
}
# Add Dunn's test results to the table
results_table$Dunn_Comparisons <- sapply(
rownames(results_table),
function(x) get_dunn_comparisons(x)
)
#
#     # Create a function to format the comparisons nicely
#     format_comparisons <- function(comparisons) {
#       comp_lines <- strsplit(comparisons, "\n")[[1]]       # Split the comparisons string into individual lines
#       comparisons_only <- gsub(" p = .*", "", comp_lines)       # Extract just the comparison names (e.g., "BS - BU")
#       return(paste("Comparisons:", paste(comparisons_only, collapse = "\n")))      # Return formatted comparisons
#
#     }
#
#     # Create a new table with formatted comparisons
#     results_table$Dunn_Comparisons <- sapply(
#       results_table$Dunn_Comparisons,
#       function(x) format_comparisons(x)
#     )
# Create a function to format the comparisons nicely
format_comparisons <- function(comparisons) {
# Split the comparisons string into individual lines
comp_lines <- strsplit(comparisons, "\n")[[1]]
# Extract just the comparison names and p-values
comparisons_only <- gsub(" p = .*", "", comp_lines)
p_values <- as.numeric(gsub(".*p = ", "", comp_lines))
# Filter for significant comparisons (p < 0.05)
significant_comps <- comparisons_only[p_values < 0.05]
# If no significant comparisons, return a message
if (length(significant_comps) == 0) {
return("Comparisons: No significant pairwise comparisons")
}
# Return formatted significant comparisons
return(paste("Comparisons:", paste(significant_comps, collapse = "\n")))
}
# Create a new table with formatted comparisons
results_table$Dunn_Comparisons <- sapply(
results_table$Dunn_Comparisons,
function(x) format_comparisons(x)
)
# Display the full table
print(results_table)
anova_results <- lapply(c("temp_sq", "soil_moist", "dwd_count", "decay_cl"), function(var) {
model <- aov(dat[[var]] ~ dat2$trt)
summary(model)
})
dat <- read.csv("covariate matrices/env_subset_corr.csv", row.names = 1)
dat2 <- readRDS("covariate matrices/site_level_matrix.rds") #need this for the treatments
row.names(dat2) <- dat2[,1]
dat2$trt <- as.factor(dat2$trt)
# subset
# removing detection covariates from the matrix so that we are only assessing
# habitat variables that are impacted by the treatment
# took out aspect, precip, days since rain
dat <- dat[,-c(11:13)]
# standardize
dat_std <- decostand(dat, "standardize") #z-scores
anova_results <- lapply(c("temp_sq", "soil_moist", "dwd_count", "decay_cl"), function(var) {
model <- aov(dat[[var]] ~ dat2$trt)
summary(model)
})
rm(list=ls())
setwd("~/Library/CloudStorage/OneDrive-Personal/Documents/Academic/OSU/Git/oss-occu/data")
library(vegan)
library(car)
library(FSA)
dat <- read.csv("covariate matrices/env_subset_corr.csv", row.names = 1)
dat2 <- readRDS("covariate matrices/site_level_matrix.rds") #need this for the treatments
row.names(dat2) <- dat2[,1]
dat2$trt <- as.factor(dat2$trt)
# subset
# removing detection covariates from the matrix so that we are only assessing
# habitat variables that are impacted by the treatment
# took out aspect, precip, days since rain
dat <- dat[,-c(11:13)]
# standardize
dat_std <- decostand(dat, "standardize") #z-scores
anova_results <- lapply(c("temp_sq", "soil_moist", "dwd_count", "decay_cl"), function(var) {
model <- aov(dat[[var]] ~ dat2$trt)
summary(model)
})
par(mfrow = c(3, 4))  # Arrange plots in a grid (3 rows, 4 columns)
for (var in names(dat)) {
qqnorm(dat[[var]], main = paste("Q-Q Plot:", var))
qqline(dat[[var]], col = "red")
}
par(mfrow = c(1,1))  # Reset plot layout
shapiro_results <- sapply(dat, function(x) shapiro.test(x)$p.value)
shapiro_results
dat$temp_log <- log(dat$temp)
dat$temp_sq <- sqrt(dat$temp)
dat$avg_volume_log <- log(dat$avg_volume)
dat$avg_volume_sq <- sqrt(dat$avg_volume)
shapiro.test(dat$temp_log)
shapiro.test(dat$temp_sq)
qqnorm(dat$temp_sq)
qqline(dat$temp_sq, col = "red")
shapiro.test(dat$avg_volume_log)
shapiro.test(dat$avg_volume_sq)
qqnorm(dat$avg_volume_sq)
qqline(dat$avg_volume_sq, col = "red")
anova_results <- lapply(c("temp_sq", "soil_moist", "dwd_count", "decay_cl"), function(var) {
model <- aov(dat[[var]] ~ dat2$trt)
summary(model)
})
names(anova_results) <- c("temp_sq", "soil_moist", "dwd_count", "decay_cl")
anova_results
rm(list=ls())
setwd("~/Library/CloudStorage/OneDrive-Personal/Documents/Academic/OSU/Git/oss-occu/data")
library(vegan)
library(car)
library(FSA)
## load data ----------------------------------------------------------------------------------------------
dat <- read.csv("covariate matrices/env_subset_corr.csv", row.names = 1)
dat2 <- readRDS("covariate matrices/site_level_matrix.rds") #need this for the treatments
row.names(dat2) <- dat2[,1]
dat2$trt <- as.factor(dat2$trt)
# subset
# removing detection covariates from the matrix so that we are only assessing
# habitat variables that are impacted by the treatment
# took out aspect, precip, days since rain
dat <- dat[,-c(11:13)]
# standardize
dat_std <- decostand(dat, "standardize") #z-scores
dat$temp_sq <- sqrt(dat$temp)
anova_results <- lapply(c("temp_sq", "soil_moist", "dwd_count", "decay_cl"), function(var) {
model <- aov(dat[[var]] ~ dat2$trt)
summary(model)
})
names(anova_results) <- c("temp_sq", "soil_moist", "dwd_count", "decay_cl")
anova_results
# Run Tukey HSD on each aov object
tukey_results <- lapply(c("temp_sq", "soil_moist", "dwd_count", "decay_cl"), function(var) {
model <- aov(dat[[var]] ~ dat2$trt)  # Run ANOVA again
return(TukeyHSD(model))  # Apply Tukey HSD
})
# View Tukey HSD results
names(tukey_results) <- c("temp_sq", "soil_moist", "dwd_count", "decay_cl")
tukey_results
# Function to extract key statistics from TukeyHSD results
extract_tukey_stats <- function(tukey_obj) {
# Extract the group component (contains pairwise comparisons)
group_comp <- tukey_obj$group
# Create a data frame with the results
results_df <- data.frame(
Comparison = rownames(group_comp),
Mean_Difference = round(group_comp$diff, 4),
Lower_CI = round(group_comp$lwr, 4),
Upper_CI = round(group_comp$upr, 4),
P_Adjusted = round(group_comp$p.adj, 4)
)
return(results_df)
}
# Create summary tables for each variable
summary_tables <- lapply(tukey_results, extract_tukey_stats)
anova_results <- lapply(c("temp_sq", "soil_moist", "dwd_count", "decay_cl"), function(var) {
model <- aov(dat[[var]] ~ dat2$trt)
summary(model)
})
names(anova_results) <- c("temp_sq", "soil_moist", "dwd_count", "decay_cl")
anova_results
# Run Tukey HSD on each aov object
tukey_results <- lapply(c("temp_sq", "soil_moist", "dwd_count", "decay_cl"), function(var) {
model <- aov(dat[[var]] ~ dat2$trt)  # Run ANOVA again
return(TukeyHSD(model))  # Apply Tukey HSD
})
# View Tukey HSD results
names(tukey_results) <- c("temp_sq", "soil_moist", "dwd_count", "decay_cl")
tukey_results
# Create a function to format Tukey HSD results
format_tukey <- function(tukey_result) {
# Get the treatment comparisons
comparisons <- tukey_result[[1]]
# Filter for significant comparisons (p < 0.05)
significant_comps <- comparisons[comparisons$p.adj < 0.05, ]
# If no significant comparisons, return a message
if (nrow(significant_comps) == 0) {
return("No significant pairwise comparisons")
}
# Format the significant comparisons
formatted_comps <- paste(
paste(significant_comps$comparison, "diff =",
format(significant_comps$diff, digits = 3)),
collapse = "\n"
)
return(formatted_comps)
}
# Create the main table
anova_table <- data.frame(
Variable = names(anova_results),
F_value = sapply(anova_results, function(x) x[[1]]$`F value`[1]),
p_value = sapply(anova_results, function(x) x[[1]]$`Pr(>F)`[1]),
Tukey_Comparisons = sapply(tukey_results, format_tukey)
)
# Create a function to format Tukey HSD results
format_tukey <- function(tukey_result) {
# Get the treatment comparisons
comparisons <- tukey_result[[1]]
# Filter for significant comparisons (p < 0.05)
significant_comps <- comparisons[comparisons$p.adj < 0.05, ]
# If no significant comparisons, return a message
if (nrow(significant_comps) == 0) {
return("No significant pairwise comparisons")
}
# Format the significant comparisons
formatted_comps <- paste(
paste(significant_comps$comparison, "diff =",
format(significant_comps$diff, digits = 3)),
collapse = "\n"
)
return(formatted_comps)
}
# Create the main table
anova_table <- data.frame(
Variable = names(anova_results),
F_value = sapply(anova_results, function(x) x[[1]]$`F value`[1]),
p_value = sapply(anova_results, function(x) x[[1]]$`Pr(>F)`[1]),
Tukey_Comparisons = sapply(tukey_results, format_tukey)
)
# Create a function to format Tukey HSD results
format_tukey <- function(tukey_result) {
# Get the treatment comparisons
comparisons <- tukey_result[[1]]
# If comparisons is a vector, convert it to a data frame
if (is.atomic(comparisons)) {
comparisons <- as.data.frame(comparisons)
}
# Filter for significant comparisons (p < 0.05)
significant_comps <- comparisons[comparisons$p.adj < 0.05, ]
# If no significant comparisons, return a message
if (nrow(significant_comps) == 0) {
return("No significant pairwise comparisons")
}
# Format the significant comparisons
formatted_comps <- paste(
paste(significant_comps$comparison, "diff =",
format(significant_comps$diff, digits = 3)),
collapse = "\n"
)
return(formatted_comps)
}
# Create the main table
anova_table <- data.frame(
Variable = names(anova_results),
F_value = sapply(anova_results, function(x) x[[1]]$`F value`[1]),
p_value = sapply(anova_results, function(x) x[[1]]$`Pr(>F)`[1]),
Tukey_Comparisons = sapply(tukey_results, format_tukey)
)
# Format p-values nicely
anova_table$p_value <- ifelse(
anova_table$p_value < 0.001,
"< 0.001",
format(anova_table$p_value, scientific = TRUE)
)
# Display the table
print(anova_table)
# Create a function to format Tukey HSD results
format_tukey <- function(tukey_result) {
# Get the treatment comparisons
comparisons <- tukey_result[[1]]
# Filter for significant comparisons (p < 0.05)
significant_comps <- comparisons[which(comparisons$p.adj < 0.05)]
# If no significant comparisons, return a message
if (length(significant_comps) == 0) {
return("No significant pairwise comparisons")
}
# Format the significant comparisons
formatted_comps <- paste(
paste(
names(significant_comps),
"diff =",
format(comparisons[which(comparisons$p.adj < 0.05), "diff"], digits = 3),
"p =",
format(comparisons[which(comparisons$p.adj < 0.05), "p.adj"], scientific = TRUE)
),
collapse = "\n"
)
return(formatted_comps)
}
# Create the main table
anova_table <- data.frame(
Variable = names(anova_results),
F_value = sapply(anova_results, function(x) x[[1]]$`F value`[1]),
p_value = sapply(anova_results, function(x) x[[1]]$`Pr(>F)`[1]),
Tukey_Comparisons = sapply(tukey_results, format_tukey)
)
# Create a function to format Tukey HSD results
format_tukey <- function(tukey_result) {
# Get the treatment comparisons
comparisons <- tukey_result[[1]]
# If comparisons is a vector, convert it to a data frame
if (is.atomic(comparisons)) {
comparisons <- as.data.frame(comparisons)
}
# Get the comparison names and p-values
names_list <- names(comparisons)
p_values <- unlist(comparisons)
# Filter for significant comparisons (p < 0.05)
significant_indices <- which(p_values < 0.05)
# If no significant comparisons, return a message
if (length(significant_indices) == 0) {
return("No significant pairwise comparisons")
}
# Format the significant comparisons
formatted_comps <- paste(
paste(
names_list[significant_indices],
"p =",
format(p_values[significant_indices], scientific = TRUE)
),
collapse = "\n"
)
return(formatted_comps)
}
# Create the main table
anova_table <- data.frame(
Variable = names(anova_results),
F_value = sapply(anova_results, function(x) x[[1]]$`F value`[1]),
p_value = sapply(anova_results, function(x) x[[1]]$`Pr(>F)`[1]),
Tukey_Comparisons = sapply(tukey_results, format_tukey)
)
# Format p-values nicely
anova_table$p_value <- ifelse(
anova_table$p_value < 0.001,
"< 0.001",
format(anova_table$p_value, scientific = TRUE)
)
# Display the table
print(anova_table)
# Create a function to format Tukey HSD results
format_tukey <- function(tukey_result) {
# Get the treatment comparisons
comparisons <- tukey_result[[1]]
# Get the comparison names and p-values
names_list <- names(comparisons)
p_values <- unlist(comparisons)
# Filter for significant comparisons (p < 0.05)
significant_indices <- which(p_values < 0.05)
# If no significant comparisons, return a message
if (length(significant_indices) == 0) {
return("No significant pairwise comparisons")
}
# Format just the significant comparisons
formatted_comps <- paste(names_list[significant_indices], collapse = "\n")
return(formatted_comps)
}
# Create the main table
anova_table <- data.frame(
Variable = names(anova_results),
F_value = sapply(anova_results, function(x) x[[1]]$`F value`[1]),
p_value = sapply(anova_results, function(x) x[[1]]$`Pr(>F)`[1]),
Tukey_Comparisons = sapply(tukey_results, format_tukey)
)
# Format p-values nicely
anova_table$p_value <- ifelse(
anova_table$p_value < 0.001,
"< 0.001",
format(anova_table$p_value, scientific = TRUE)
)
# Display the table
print(anova_table)
# Create a function to format Tukey HSD results
format_tukey <- function(tukey_result) {
# Get the treatment comparisons
comparisons <- tukey_result[[1]]
# Get the comparison names and p-values
names_list <- names(comparisons)
p_values <- unlist(comparisons)
# Filter for significant comparisons (p < 0.05)
significant_indices <- which(p_values < 0.05)
# If no significant comparisons, return a message
if (length(significant_indices) == 0) {
return("No significant pairwise comparisons")
}
# Format just the significant comparisons
formatted_comps <- paste(names_list[significant_indices], collapse = "\n")
return(formatted_comps)
}
# Create the main table
anova_table <- data.frame(
Variable = names(anova_results),
F_value = sapply(anova_results, function(x) x[[1]]$`F value`[1]),
p_value = sapply(anova_results, function(x) x[[1]]$`Pr(>F)`[1]),
Tukey_Comparisons = sapply(tukey_results, format_tukey)
)
# Format p-values nicely
anova_table$p_value <- ifelse(
anova_table$p_value < 0.001,
"< 0.001",
format(anova_table$p_value, scientific = TRUE)
)
# Display the table
print(anova_table)
# Create a function to format Tukey HSD results
format_tukey <- function(tukey_result) {
# Get the treatment comparisons
comparisons <- as.data.frame(tukey_result[[1]])
# Get the comparison names and p-values
names_list <- rownames(comparisons)
p_values <- comparisons$p.adj
# Filter for significant comparisons (p < 0.05)
significant_indices <- which(p_values < 0.05)
# If no significant comparisons, return a message
if (length(significant_indices) == 0) {
return("No significant pairwise comparisons")
}
# Format just the significant comparisons
formatted_comps <- paste(names_list[significant_indices], collapse = "\n")
return(formatted_comps)
}
# Create the main table
anova_table <- data.frame(
Variable = names(anova_results),
F_value = sapply(anova_results, function(x) x[[1]]$`F value`[1]),
p_value = sapply(anova_results, function(x) x[[1]]$`Pr(>F)`[1]),
Tukey_Comparisons = sapply(tukey_results, format_tukey)
)
# Format p-values nicely
anova_table$p_value <- ifelse(
anova_table$p_value < 0.001,
"< 0.001",
format(anova_table$p_value, scientific = TRUE)
)
# Display the table
print(anova_table)
# Extract significant comparisons for dwd_count
significant_dwd <- tukey_results$dwd_count[tukey_results$dwd_count$p.adj < 0.05, ]
# Check the actual structure of your data
str(tukey_results$dwd_count)
# Then use one of these approaches based on the structure:
# Approach 1: If it's a named list
significant_dwd <- tukey_results$dwd_count[[1]][tukey_results$dwd_count[[1]]$p.adj < 0.05, ]
# Display the table
print(anova_table)
# Create a function to format Tukey HSD results
format_tukey <- function(tukey_result) {
# Get the treatment comparisons
comparisons <- tukey_result[[1]]
# If comparisons is a vector, convert it to a data frame
if (is.atomic(comparisons)) {
comparisons <- as.data.frame(comparisons)
}
# Filter for significant comparisons (p < 0.05)
significant_comps <- comparisons[comparisons$p.adj < 0.05, ]
# If no significant comparisons, return a message
if (nrow(significant_comps) == 0) {
return("No significant pairwise comparisons")
}
# Format the significant comparisons
formatted_comps <- paste(
paste(significant_comps$comparison, "diff =",
format(significant_comps$diff, digits = 3)),
collapse = "\n"
)
return(formatted_comps)
}
# Create the main table
anova_table <- data.frame(
Variable = names(anova_results),
F_value = sapply(anova_results, function(x) x[[1]]$`F value`[1]),
p_value = sapply(anova_results, function(x) x[[1]]$`Pr(>F)`[1])
)
# Format p-values nicely
anova_table$p_value <- ifelse(
anova_table$p_value < 0.001,
"< 0.001",
format(anova_table$p_value, scientific = TRUE)
)
# Display the table
print(anova_table)
