labs(
title = paste("Salamander Count vs.", covariate),
x = covariate,
y = "Salamander Count"
) +
theme_minimal()
}
covariate_names <- colnames(env_subset_corr)  # Ensure it's a character vector
# Generate the plots for all covariates
plots <- lapply(env_subset_corr, generate_plot)
# Arrange all plots into a grid (e.g., 2 rows and 2 columns)
grid.arrange(grobs = plots, ncol = 3)
# Function to generate scatter plots for each covariate
generate_plot <- function(covariate) {
ggplot(subplot_merge, aes(x = covariate, y = "oss.counts")) +
geom_point(color = "blue", size = 2) +  # Scatterplot points
geom_smooth(method = "lm", color = "red", se = TRUE) +  # Linear regression line
labs(
title = paste("Salamander Count vs.", covariate),
x = covariate,
y = "Salamander Count"
) +
theme_minimal()
}
covariate_names <- colnames(env_subset_corr)  # Ensure it's a character vector
# Generate the plots for all covariates
plots <- lapply(env_subset_corr, generate_plot)
# Arrange all plots into a grid (e.g., 2 rows and 2 columns)
grid.arrange(grobs = plots, ncol = 3)
# Function to generate scatter plots for each covariate
generate_plot <- function(covariate) {
ggplot(subplot_merge, aes(x = .data[[covariate]], y = "oss.counts")) +
geom_point(color = "blue", size = 2) +  # Scatterplot points
geom_smooth(method = "lm", color = "red", se = TRUE) +  # Linear regression line
labs(
title = paste("Salamander Count vs.", covariate),
x = covariate,
y = "Salamander Count"
) +
theme_minimal()
}
covariate_names <- colnames(subplot_merge)  # Ensure it's a character vector
# Generate the plots for all covariates
plots <- lapply(env_subset_corr, generate_plot)
# Arrange all plots into a grid (e.g., 2 rows and 2 columns)
grid.arrange(grobs = plots, ncol = 3)
generate_plot <- function(covariate) {
ggplot(subplot_merge, aes(x = .data[[covariate]], y = "oss.counts")) +
geom_point(color = "blue", size = 2) +  # Scatterplot points
geom_smooth(method = "lm", color = "red", se = TRUE) +  # Linear regression line
labs(
title = paste("Salamander Count vs.", covariate),
x = covariate,
y = "Salamander Count"
) +
theme_minimal()
}
covariate_names <- colnames(subplot_merge)  # Ensure it's a character vector
# Generate the plots for all covariates
plots <- lapply(covariate_names, generate_plot)
# Arrange all plots into a grid (e.g., 2 rows and 2 columns)
grid.arrange(grobs = plots, ncol = 3)
View(subplot_merge)
View(site_merge)
rownames(site_merge) <- site_merge[,1]
rownames(subplot_merge) <- subplot_merge[,1]
# Function to generate scatter plots for each covariate
generate_plot <- function(covariate) {
ggplot(subplot_merge, aes(x = covariate, y = "oss.counts")) +
geom_point(color = "blue", size = 2) +  # Scatterplot points
geom_smooth(method = "lm", color = "red", se = TRUE) +  # Linear regression line
labs(
title = paste("Salamander Count vs.", covariate),
x = covariate,
y = "Salamander Count"
) +
theme_minimal()
}
# Generate the plots for all covariates
plots <- lapply(covariate_names, generate_plot)
# Arrange all plots into a grid (e.g., 2 rows and 2 columns)
grid.arrange(grobs = plots, ncol = 3)
# Function to generate scatter plots for each covariate
generate_plot <- function(covariate) {
ggplot(merged, aes_string(x = covariate, y = "oss")) +
geom_point(color = "blue", size = 2) +  # Scatterplot points
geom_smooth(method = "lm", color = "red", se = TRUE) +  # Linear regression line
labs(
title = paste("Salamander Count vs.", covariate),
x = covariate,
y = "Salamander Count"
) +
theme_minimal()
}
# Generate the plots for all covariates
plots <- lapply(env_subset_corr, generate_plot)
# Arrange all plots into a grid (e.g., 2 rows and 2 columns)
grid.arrange(grobs = plots, ncol = 3)
# Function to generate scatter plots for each covariate
generate_plot <- function(covariate) {
ggplot(merged, aes_string(x = covariate, y = "oss")) +
geom_point(color = "blue", size = 2) +  # Scatterplot points
geom_smooth(method = "lm", color = "red", se = TRUE) +  # Linear regression line
labs(
title = paste("Salamander Count vs.", covariate),
x = covariate,
y = "Salamander Count"
) +
theme_minimal()
}
# Generate the plots for all covariates
plots <- lapply(env_subset_corr, generate_plot)
View(merged)
generate_plot <- function(covariate) {
ggplot(merged, aes_string(x = covariate, y = "oss")) +
geom_point(color = "blue", size = 2) +  # Scatterplot points
geom_smooth(method = "lm", color = "red", se = TRUE) +  # Linear regression line
labs(
title = paste("Salamander Count vs.", covariate),
x = covariate,
y = "Salamander Count"
) +
theme_minimal()
}
# Generate the plots for all covariates
plots <- lapply(env_subset_corr, generate_plot)
View(env_subset_corr)
# Function to generate scatter plots for each covariate
generate_plot <- function(covariate) {
ggplot(subplot_merge, aes(x = covariate, y = "oss.counts")) +
geom_point(color = "blue", size = 2) +  # Scatterplot points
geom_smooth(method = "lm", color = "red", se = TRUE) +  # Linear regression line
labs(
title = paste("Salamander Count vs.", covariate),
x = covariate,
y = "Salamander Count"
) +
theme_minimal()
}
# Generate the plots for all covariates
plots <- lapply(covariate_names, generate_plot)
# Arrange all plots into a grid (e.g., 2 rows and 2 columns)
grid.arrange(grobs = plots, ncol = 3)
# Function to generate scatter plots for each covariate
generate_plot <- function(covariate) {
ggplot(subplot_merge, aes(x = .data[[covariate]], y = .data[["oss.counts"]])) +
geom_point(color = "blue", size = 2) +  # Scatterplot points
geom_smooth(method = "lm", color = "red", se = TRUE) +  # Linear regression line
labs(
title = paste("Salamander Count vs.", covariate),
x = covariate,
y = "Salamander Count"
) +
theme_minimal()
}
# Generate the plots for all covariates
plots <- lapply(covariate_names, generate_plot)
# Arrange all plots into a grid (e.g., 2 rows and 2 columns)
grid.arrange(grobs = plots, ncol = 3)
View(site_merge)
plot(site_merge$aspect, sals$oss)
plot(site_merge$days_since_rain, sals$oss)
ggplot(site_merge, aes(x = days_since_rain, y = oss)) +
geom_point(color = "blue", size = 2) +
geom_smooth(method = "lm", color = "red", se = TRUE)
ggplot(site_merge, aes(x = avg_volume, y = oss)) +
geom_point(color = "blue", size = 2) +
geom_smooth(method = "lm", color = "red", se = TRUE)
ggplot(site_merge, aes_string(x = covariate, y = "oss")) +
geom_point(color = "blue", size = 2) +  # Scatterplot points
geom_smooth(method = "lm", color = "red", se = TRUE) +  # Linear regression line
labs(
title = paste("Salamander Count vs.", covariate),
x = covariate,
y = "Salamander Count"
) +
theme_minimal()
View(sal.site.count)
sal.site.count <- dat[26:27]
correlation_matrix <- cor(cbind(sal.site.count, env_subset_corr), use = "pairwise.complete.obs")
correlation_matrix <- cor(site_merge, use = "pairwise.complete.obs")
View(site_merge)
correlation_matrix <- cor(cbind(sal.site.count, env_subset_corr), use = "pairwise.complete.obs")
class(sal.site.count)
sapply(sal.site.count, class)
sapply(env_subset_corr, class)
# add df with precip data
env_subset_corr <- read.csv("env_subset_corr.csv", row.names = 1)
correlation_matrix <- cor(cbind(sal.site.count, env_subset_corr), use = "pairwise.complete.obs")
correlation_matrix[,1]
summary(lm(sal.site.count$oss,env_subset_corr$veg_cov))
summary(lm(sal.site.count$oss~env_subset_corr$veg_cov))
rm(list=ls())
setwd("~/Library/CloudStorage/OneDrive-Personal/Documents/Academic/OSU/Git/oss-occu/data")
library(dplyr)
library(tidyr)
library(vegan)
library(pastecs)
library(corrplot)
library(ggplot2)
library(gridExtra)
source("~/Library/CloudStorage/OneDrive-Personal/Documents/Academic/OSU/Git/multivariate-analysis/biostats.R")
dat <- read.csv("site_aspect_precip_all_vars.csv") #switched to this df on 02/04 when i added aspect and precipitation vars
dat <- subset(dat, select = -X)
row.names(dat) <- dat[,1]
sals <- dat[26:27]
env <- dat[c(1:25,28:31)]
#extra dwd metrics
dwd <- read.csv("dwd.extra.metrics.csv")
#env cont
drop <- c("lat","long","stand","tree_farm","landowner","year","weather","trt","jul_date","elev","site_id","date_mdy")
env_sub <- env[,!(colnames(env) %in% drop)]
#add dwd dens and avg volume from dwd to env df
env_merge <- cbind(env_sub, dwd[,c("dwd_dens","avg_volume")])
#### standardize environmental data -----------------------------------------------------------------
env.zscore <- decostand(env_merge, "standardize") #Z-scores the data in each column
# Function to generate scatter plots for each covariate
generate_plot <- function(covariate) {
ggplot(merged, aes_string(x = covariate, y = "oss")) +
geom_point(color = "blue", size = 2) +  # Scatterplot points
geom_smooth(method = "lm", color = "red", se = TRUE) +  # Linear regression line
labs(
title = paste("Salamander Count vs.", covariate),
x = covariate,
y = "Salamander Count"
) +
theme_minimal()
}
# Generate the plots for all covariates
plots <- lapply(env_subset_corr, generate_plot)
# Arrange all plots into a grid (e.g., 2 rows and 2 columns)
grid.arrange(grobs = plots, ncol = 3)
# Function to generate scatter plots for each covariate
generate_plot <- function(covariate) {
ggplot(merged, aes_string(x = covariate, y = "oss")) +
geom_point(color = "blue", size = 2) +  # Scatterplot points
geom_smooth(method = "lm", color = "red", se = TRUE) +  # Linear regression line
labs(
title = paste("Salamander Count vs.", covariate),
x = covariate,
y = "Salamander Count"
) +
theme_minimal()
}
# Generate the plots for all covariates
plots <- lapply(merged, generate_plot)
# Arrange all plots into a grid (e.g., 2 rows and 2 columns)
grid.arrange(grobs = plots, ncol = 3)
env_subset_corr <- read.csv("env_subset_corr.csv")
# Function to generate scatter plots for each covariate
generate_plot <- function(covariate) {
ggplot(merged, aes_string(x = covariate, y = "oss")) +
geom_point(color = "blue", size = 2) +  # Scatterplot points
geom_smooth(method = "lm", color = "red", se = TRUE) +  # Linear regression line
labs(
title = paste("Salamander Count vs.", covariate),
x = covariate,
y = "Salamander Count"
) +
theme_minimal()
}
# Generate the plots for all covariates
plots <- lapply(env_subset_corr, generate_plot)
ggplot(env_subset_corr, aes_string(x = covariate, y = "oss")) +
geom_point(color = "blue", size = 2) +  # Scatterplot points
geom_smooth(method = "lm", color = "red", se = TRUE) +  # Linear regression line
labs(
title = paste("Salamander Count vs.", covariate),
x = covariate,
y = "Salamander Count"
) +
theme_minimal()
rm(list=ls())
setwd("~/Library/CloudStorage/OneDrive-Personal/Documents/Academic/OSU/Git/oss-occu/data")
library(dplyr)
library(tidyr)
library(vegan)
library(pastecs)
library(corrplot)
library(ggplot2)
library(gridExtra)
source("~/Library/CloudStorage/OneDrive-Personal/Documents/Academic/OSU/Git/multivariate-analysis/biostats.R")
#### load and subset data ---------------------------------------------------------------------------------------
#site-level data
#dat <- readRDS("site_level_matrix.rds") used this df originally
dat <- read.csv("site_aspect_precip_all_vars.csv") #switched to this df on 02/04 when i added aspect and precipitation vars
dat <- subset(dat, select = -X)
row.names(dat) <- dat[,1]
sals <- dat[26:27]
env <- dat[c(1:25,28:31)]
#extra dwd metrics
dwd <- read.csv("dwd.extra.metrics.csv")
#env cont
drop <- c("lat","long","stand","tree_farm","landowner","year","weather","trt","jul_date","elev","site_id","date_mdy")
env_sub <- env[,!(colnames(env) %in% drop)]
#add dwd dens and avg volume from dwd to env df
env_merge <- cbind(env_sub, dwd[,c("dwd_dens","avg_volume")])
#### standardize environmental data -----------------------------------------------------------------
env.zscore <- decostand(env_merge, "standardize") #Z-scores the data in each column
#### checking for correllations between covariates -----------------------------------------------------------------
#cor command looks for correlation, pearson is the default, order does not make a difference
#cor (var, var, method = "spearman" or "kendall for those")
#cor.test tests hypothesis that they're not correlated
#cov gives covariance
#pairs gives all possible pairwise plots
#pairs with [,1:3] tests only columns 1:3
#with plots, looking for linear pattern
P.corr <- cor(env_merge, method = "pearson", use = "complete.obs")
corrplot(P.corr,
type = "upper",
order = "hclust",
tl.col = "black",
tl.srt = 45)
corrplot(P.corr, method="pie")
cor.test(env_merge$temp,env_merge$hum,method="pearson") #statistically significant correllation
cor.test(env_merge$length_cl,env_merge$stumps,method="pearson") #statistically significant correllation
pairs(env_merge[,c(9,14)])
# figure out which ones are above 0.7
# Set a threshold
threshold <- 0.7
# Get pairs with correlation above the threshold
cor_pairs <- which(abs(P.corr) > threshold, arr.ind = TRUE)
# Filter to keep only unique pairs (avoid duplicates and self-correlations)
cor_pairs <- cor_pairs[cor_pairs[, 1] < cor_pairs[, 2], ]
# Display the variable pairs and their correlation values
result <- data.frame(
Var1 = rownames(P.corr)[cor_pairs[, 1]],
Var2 = colnames(P.corr)[cor_pairs[, 2]],
Correlation = P.corr[cor_pairs]
)
result
# > result
# Var1       Var2 Correlation
# 1      temp        hum  -0.7599229   remove hum
# 2 dwd_count     stumps   0.7717364   remove stumps
# 3    stumps  length_cl  -0.7859440
# 4 dwd_count   dwd_dens   0.9931322   remove dwd_dens
# 5    stumps   dwd_dens   0.7636342
# 6      logs avg_volume   0.8001072   remove logs
#### reorganize env subset df and try corr again -------------------------------------
drop <- c("hum","stumps","dwd_dens","logs")
env_subset_corr <- env_merge[,!(colnames(env_merge) %in% drop)]
env_corr <- cor(env_subset_corr, method = "pearson", use = "complete.obs")
corrplot(env_corr,
type = "upper",
order = "hclust",
tl.col = "black",
tl.srt = 45)
# Set a threshold
threshold <- 0.6
# Get pairs with correlation above the threshold
cor_pairs <- which(abs(env_corr) > threshold, arr.ind = TRUE)
# Filter to keep only unique pairs (avoid duplicates and self-correlations)
cor_pairs <- cor_pairs[cor_pairs[, 1] < cor_pairs[, 2], ]
# Display the variable pairs and their correlation values
result <- data.frame(
Var1 = rownames(env_corr)[cor_pairs[, 1]],
Var2 = colnames(env_corr)[cor_pairs[, 2]],
Correlation = env_corr[cor_pairs]
)
result
# Var1       Var2 Correlation
# 1 canopy_cov  length_cl   0.6621768
# 2  length_cl avg_volume   0.6592068
cor.test(env_subset_corr$length_cl,env_subset_corr$canopy_cov,method="pearson") #statistically significant correllation
cor.test(env_subset_corr$length_cl,env_subset_corr$avg_volume,method="pearson")
pairs(env_subset_corr[,c(2,11)])
pairs(env_subset_corr[,c(12,11)])
plot(env_subset_corr$length_cl, sals$oss)
plot(env_subset_corr$length_cl, sals$enes)
merged <- cbind(env_subset_corr,sals)
ggplot(merged, aes(x = length_cl, y = oss)) +
geom_point(color = "blue", size = 2) +
geom_smooth(method = "lm", color = "red", se = TRUE)
ggplot(merged, aes(x = avg_volume, y = oss)) +
geom_point(color = "blue", size = 2) +
geom_smooth(method = "lm", color = "red", se = TRUE)
# Function to generate scatter plots for each covariate
generate_plot <- function(covariate) {
ggplot(merged, aes_string(x = covariate, y = "oss")) +
geom_point(color = "blue", size = 2) +  # Scatterplot points
geom_smooth(method = "lm", color = "red", se = TRUE) +  # Linear regression line
labs(
title = paste("Salamander Count vs.", covariate),
x = covariate,
y = "Salamander Count"
) +
theme_minimal()
}
# Generate the plots for all covariates
plots <- lapply(env_subset_corr, generate_plot)
# Arrange all plots into a grid (e.g., 2 rows and 2 columns)
grid.arrange(grobs = plots, ncol = 3)
# Function to generate scatter plots for each covariate
generate_plot <- function(covariate) {
ggplot(merged, aes(x = covariate, y = "oss")) +
geom_point(color = "blue", size = 2) +  # Scatterplot points
geom_smooth(method = "lm", color = "red", se = TRUE) +  # Linear regression line
labs(
title = paste("Salamander Count vs.", covariate),
x = covariate,
y = "Salamander Count"
) +
theme_minimal()
}
# Generate the plots for all covariates
plots <- lapply(env_subset_corr, generate_plot)
# Arrange all plots into a grid (e.g., 2 rows and 2 columns)
grid.arrange(grobs = plots, ncol = 3)
# Function to generate scatter plots for each covariate
generate_plot <- function(covariate) {
ggplot(merged, aes_string(x = covariate, y = "oss")) +
geom_point(color = "blue", size = 2) +  # Scatterplot points
geom_smooth(method = "lm", color = "red", se = TRUE) +  # Linear regression line
labs(
title = paste("Salamander Count vs.", covariate),
x = covariate,
y = "Salamander Count"
) +
theme_minimal()
}
# Generate the plots for all covariates
plots <- lapply(env_subset_corr, generate_plot)
# Arrange all plots into a grid (e.g., 2 rows and 2 columns)
grid.arrange(grobs = plots, ncol = 3)
# Function to generate scatter plots for each covariate
generate_plot <- function(covariate) {
ggplot(merged, aes_string(x = covariate, y = "oss")) +
geom_point(color = "blue", size = 2) +  # Scatterplot points
geom_smooth(method = "lm", color = "red", se = TRUE) +  # Linear regression line
labs(
title = paste("Salamander Count vs.", covariate),
x = covariate,
y = "Salamander Count"
) +
theme_minimal()
}
# Create plots for each covariate (only for numeric columns)
covariates <- names(merged)[sapply(merged, is.numeric)]  # Filter only numeric columns
# Generate the plots
plots <- lapply(covariates, generate_plot)
# Arrange all plots into a grid
grid.arrange(grobs = plots, ncol = 3)
# Function to generate scatter plots for each covariate
generate_plot <- function(covariate) {
ggplot(env_subset_corr, aes_string(x = covariate, y = "oss")) +
geom_point(color = "blue", size = 2) +  # Scatterplot points
geom_smooth(method = "lm", color = "red", se = TRUE) +  # Linear regression line
labs(
title = paste("Salamander Count vs.", covariate),
x = covariate,
y = "Salamander Count"
) +
theme_minimal()
}
# Create plots for each covariate (only for numeric columns)
covariates <- names(env_subset_corr)[sapply(env_subset_corr, is.numeric)]  # Filter only numeric columns
# Generate the plots
plots <- lapply(covariates, generate_plot)
# Arrange all plots into a grid
grid.arrange(grobs = plots, ncol = 3)
View(env_subset_corr)
View(merged)
View(env_subset_corr)
# add df with precip data
env_subset_corr <- read.csv("env_subset_corr.csv", row.names = 1)
View(env_subset_corr)
merged <- cbind(env_subset_corr,sals)
# Function to generate scatter plots for each covariate
generate_plot <- function(covariate) {
ggplot(merged, aes_string(x = covariate, y = "oss")) +
geom_point(color = "blue", size = 2) +  # Scatterplot points
geom_smooth(method = "lm", color = "red", se = TRUE) +  # Linear regression line
labs(
title = paste("Salamander Count vs.", covariate),
x = covariate,
y = "Salamander Count"
) +
theme_minimal()
}
# Create plots for each covariate (only for numeric columns)
covariates <- names(merged)[sapply(merged, is.numeric)]  # Filter only numeric columns
# Generate the plots
plots <- lapply(covariates, generate_plot)
# Arrange all plots into a grid
grid.arrange(grobs = plots, ncol = 3)
corr.sal <- cor(merged, method = "pearson", use = "complete.obs")
corrplot(corr.sal,
type = "upper",
order = "hclust",
tl.col = "black",
tl.srt = 45)
# Set a threshold
threshold <- 0.5
# Get pairs with correlation above the threshold
cor_pairs <- which(abs(corr.sal) > threshold, arr.ind = TRUE)
# Filter to keep only unique pairs (avoid duplicates and self-correlations)
cor_pairs <- cor_pairs[cor_pairs[, 1] < cor_pairs[, 2], ]
# Display the variable pairs and their correlation values
result <- data.frame(
Var1 = rownames(corr3)[cor_pairs[, 1]],
Var2 = colnames(corr3)[cor_pairs[, 2]],
Correlation = corr3[cor_pairs]
)
result
# Display the variable pairs and their correlation values
result <- data.frame(
Var1 = rownames(corr.sal)[cor_pairs[, 1]],
Var2 = colnames(corr.sal)[cor_pairs[, 2]],
Correlation = corr.sal[cor_pairs]
)
result
