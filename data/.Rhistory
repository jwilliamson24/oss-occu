sitecovs <- subset(site[,c('site_id','trt','date_mdy','elev','temp','hum')])
sitecovs$trt <- factor(sitecovs$trt,
levels = c("UU", "BU", "HB", "HU", "BS"))
# Scale Occupancy Covariates
sitecovs$site <- as.character(sitecovs$site)
# Identify numeric sitecovs
numeric_sitecovs <- sitecovs[sapply(sitecovs, is.numeric)]
# Scale the numeric sitecovs
scaled_numeric_sitecovs <- as.data.frame(scale(numeric_sitecovs))
# Combine the scaled numeric sitecovs with non-numeric sitecovs
scaled_sitecovs <- cbind(scaled_numeric_sitecovs, sitecovs[setdiff(names(sitecovs), names(numeric_sitecovs))])
View(scaled_sitecovs)
sitecovs <- subset(site[,c('site_id','trt','date_mdy','elev','temp','hum')])
sitecovs$trt <- factor(sitecovs$trt,
levels = c("UU", "BU", "HB", "HU", "BS"))
# Scale Occupancy Covariates
sitecovs$site_id <- as.character(sitecovs$site)
# Identify numeric sitecovs
numeric_sitecovs <- sitecovs[sapply(sitecovs, is.numeric)]
# Scale the numeric sitecovs
scaled_numeric_sitecovs <- as.data.frame(scale(numeric_sitecovs))
# Combine the scaled numeric sitecovs with non-numeric sitecovs
scaled_sitecovs <- cbind(scaled_numeric_sitecovs, sitecovs[setdiff(names(sitecovs), names(numeric_sitecovs))])
View(data2)
View(data)
View(site)
data_2 <- subset(site[,c(1,5)])
View(data_2)
data_2$site <- as.numeric(data_2$site)
View(data_2)
#data_2$site <- as.numeric(data_2$site)
data_2$trt <- as.numeric(factor(data_2$trt))
table(data_2$trt)
View(data_2)
View(data)
View(data2)
View(data)
View(subplot)
View(data)
subplot_subset <- subset(subplot[,c(8,1,18,)])
subplot_subset <- subset(subplot[,c(8,1,18)])
site_subset <- subset(site[,c(1,5)])
site_subset$trt <- as.numeric(factor(site_subset$trt))
table(site_subset$trt)
View(data)
colnames(data)
colnames(data2)
View(subplot_subset)
# subplot-level matrix:
# "date" "site" "temp" "humidity" "soil.moist" "all.obs" "oss.obs" "enes.obs"
subplot_subset <- subset(subplot[,c(8,1,9,18)])
View(site)
df1 <- subset(site[,c(1,10,11)])
View(df1)
dfmerge <- full_join(subplot_subset,df1,by="site_id")
View(dfmerge)
View(sals)
sals_subset <- subset(sals[,c(1,14)])
View(sals_subset)
View(df1)
View(dfmerge)
salsmerge <- full_join(dfmerge,sals_subset,by="site_id")
View(salsmerge)
#subset of sals with site, subplot, spp
sals.new <- sals[,c(1,12,14)]
View(sals.new)
#creating occupancy df with non-detections
df.new <- subplot[,c(1,9)] #new df with all subplots to merge sals df with
df.new$subplot <- as.factor(df.new$subplot)
View(df.new)
#oss detection df
sals.oss <- subset(sals.new, spp=="OSS")
View(sals.oss)
sals.oss <- sals.oss[,-3]
sals.oss <- sals.oss %>%
distinct(site_id, subplot) #only keeping single detection per subplot
sals.oss$detect <- 1
#oss occupancy df
#add in sites where it was not detected
df.merge.oss <- full_join(df.new,sals.oss,by=c("site_id","subplot")) #merge by site and subplot
df.merge.oss$detect <- ifelse(is.na(df.merge.oss$detect), 0, df.merge.oss$detect) #make NA's = 0
View(df.merge.oss)
#save
write.csv(df.wide.oss, "C:/Users/jasmi/OneDrive/Documents/Academic/OSU/Git/oss-occu/data/oss.occu.long.csv",
row.names = FALSE)
#save
write.csv(df.merge.oss, "C:/Users/jasmi/OneDrive/Documents/Academic/OSU/Git/oss-occu/data/oss.occu.long.csv",
row.names = FALSE)
df.wide.oss <- df.merge.oss %>%
pivot_wider(names_from = subplot, values_from = detect)
df.wide.oss <- as.data.frame(df.wide.oss)
rownames(df.wide.oss) <- df.wide.oss[,1]
df.wide.oss <- df.wide.oss[,-1]
#save
write.csv(df.wide.oss, "C:/Users/jasmi/OneDrive/Documents/Academic/OSU/Git/oss-occu/data/oss.occu.wide.csv",
row.names = FALSE)
sals.enes <- subset(sals.new, spp=="ENES")
sals.enes <- sals.enes[,-3]
sals.enes <- sals.enes %>%
distinct(site_id, subplot)
sals.enes$detect <- 1
#enes occupancy df
df.merge.enes <- full_join(df.new,sals.enes,by=c("site_id","subplot")) #merge by site and subplot
df.merge.enes$detect <- ifelse(is.na(df.merge.enes$detect), 0, df.merge.enes$detect) #make NA's = 0
#save
write.csv(df.wide.enes, "C:/Users/jasmi/OneDrive/Documents/Academic/OSU/Git/oss-occu/data/enes.occu.long.csv",
row.names = FALSE)
#save
write.csv(df.merge.enes, "C:/Users/jasmi/OneDrive/Documents/Academic/OSU/Git/oss-occu/data/enes.occu.long.csv",
row.names = FALSE)
df.wide.enes <- df.merge.enes %>%
pivot_wider(names_from = subplot, values_from = detect)
df.wide.enes <- as.data.frame(df.wide.enes)
rownames(df.wide.enes) <- df.wide.enes[,1]
df.wide.enes <- df.wide.enes[,-1]
#save
write.csv(df.wide.enes, "C:/Users/jasmi/OneDrive/Documents/Academic/OSU/Git/oss-occu/data/enes.occu.wide.csv",
row.names = FALSE)
oss.long <- read.csv("oss.occu.long.csv")
enes.long <- read.csv("enes.occu.long.csv")
View(oss.long)
View(enes.long)
View(dfmerge)
View(dfmerge)
View(data)
View(sals_subset)
oss.long$detect <- colnames(oss.long$detect=="oss.obs")
oss.long <- read.csv("oss.occu.long.csv")
colnames(oss.long$detect=="oss.obs")
colnames(oss.long)[3] <- "oss.obs"
colnames(enes.long)[3] <- "enes.obs"
View(sals.new)
View(sals.oss)
sals.all <- sals.new[,-3]
sals.all <- sals.all %>%
distinct(site_id, subplot)
sals.all$detect <- 1
View(sals.all)
#add in sites with no detections by merging with df that has all site/subplot combos listed
df.merge.all <- full_join(df.new,sals.all,by=c("site_id","subplot"))
df.merge.all <- ifelse(is.na(df.merge.all$detect), 0, df.merge.all$detect)
df.merge.all
View(sals.all)
#add in sites with no detections by merging with df that has all site/subplot combos listed
df.merge.all <- full_join(df.new,sals.all,by=c("site_id","subplot"))
df.merge.all$detect <- ifelse(is.na(df.merge.all$detect), 0, df.merge.all$detect) #make NA's = 0
View(df.merge.all)
View(sals.all)
#save
write.csv(df.merge.all, "C:/Users/jasmi/OneDrive/Documents/Academic/OSU/Git/oss-occu/data/all.occu.long.csv",
row.names = FALSE)
all.long <- read.csv("all.occu.long.csv")
colnames(all.long)[3] <- "all.obs"
View(enes.long)
View(oss.long)
View(all.long)
complete_merge <- merge(dfmerge, all.long, oss.long, enes.long, by=c("site_id"+"subplot"))
complete_merge <- merge(dfmerge, all.long, oss.long, enes.long, by=c("site_id","subplot"))
complete_merge <- full_join(dfmerge, all.long, oss.long, enes.long, by=c("site_id","subplot"))
complete_merge <- cbind(dfmerge, all.long, oss.long, enes.long, by=c("site_id","subplot"))
complete_merge <- merge(dfmerge, all.long, oss.long, enes.long, by=c("site_id","subplot"))
merge1 <- merge(dfmerge, all.long, by=c("site_id","subplot"))
View(merge1)
merge1 <- merge(merge1, oss.long, by=c("site_id","subplot"))
complete.merge <- merge(merge1,enes.long,by=c("site_id","subplot"))
View(complete.merge)
View(data)
View(data)
colnames(complete.merge) <- c("site","subplot","date","soil.moist","temp","humidity")
View(complete.merge)
colnames(complete.merge) <- c("site","subplot","date","soil.moist","temp",
"humidity","all.obs","oss.obs","enes.obs")
## name data for model
data <- complete.merge
data$site <- as.numeric(data$site)
## name data for model
data <- complete.merge
#data$site <- as.numeric(data$site)
data$all.obs <- as.numeric(data$all.obs)
data$oss.obs <- as.numeric(data$oss.obs)
data$enes.obs <- as.numeric(data$enes.obs)
data2 <- site_subset
#data2$site <- as.numeric(data2$site)
data2$treatment <- as.numeric(factor(data2$treatment))
View(site_subset)
colnames(site_subset)[2] <- "treatment"
#data2$site <- as.numeric(data2$site)
data2$treatment <- as.numeric(factor(data2$treatment))
View(data2)
View(site_subset)
scaled_temp <- c(scale(data$temp))
all.spp.model.2 <- nimbleCode ({
# Priors
# uninformative, vague priors
for(t in 1:n.treatments){
TreatmentIntercept[t] ~ dunif(-10,10)
}#t
DetectionIntercept ~ dunif(-5,5)
betaTemp ~ dunif(-5, 5)
betaTemp2 ~ dunif(-5, 0)
# Likelihood
# Process/Biological model = Occupancy
# need two pieces: one defining psi(occu prob coeff) and covariates, and one defining z dist
for(i in 1:n.sites) {
logit(psi[i]) <- TreatmentIntercept[treatment[i]]  #psi=occupancy probability
z[i] ~ dbern(psi[i])  # z=1 if occupied, z=latent true occupancy
}#i
# Observation model = Detection
# need two pieces: one for p(det prob coeff) and one defining Y distribution
for(j in 1:n.obs) {
logit(p[j]) <- DetectionIntercept + betaTemp*temp[j] + betaTemp2*temp[j]^2
#using temp as covariate with a quadratic relationship
#p=detection probability for site i and survey j
Y[j] ~ dbern(p[j] * z[site[j]]) #Y=my actual data observations
#z=1 or 0, turns this on or off
}#j
})
# Parameters monitored
parameters <- c("z","p","TreatmentIntercept","DetectionIntercept","betaTemp", "betaTemp2")
# MCMC Settings
ni <- 40000
nt <- 40
nb <- 20000
nc <- 3
# Data
nimble.data = list(Y=data$all.obs,
temp=scaled_temp)
nimble.constants = list(n.sites = length(unique(data$site)),
n.treatments = length(unique(data2$treatment)),
treatment=data2$treatment,
site=as.numeric(as.factor(data$site)),
n.obs = length(data$all.obs))
mcmc.output.2 <- nimbleMCMC(code = all.spp.model.2,
data = nimble.data,
constants=nimble.constants,
monitors = parameters,
niter = ni,
nburnin = nb,
nchains = nc,
thin=nt,
summary=TRUE,
samplesAsCodaMCMC = TRUE)
View(data)
View(data2)
View(site_subset)
data2 <- site_subset
View(data2)
all.spp.model.2 <- nimbleCode ({
# Priors
# uninformative, vague priors
for(t in 1:n.treatments){
TreatmentIntercept[t] ~ dunif(-10,10)
}#t
DetectionIntercept ~ dunif(-5,5)
betaTemp ~ dunif(-5, 5)
betaTemp2 ~ dunif(-5, 0)
# Likelihood
# Process/Biological model = Occupancy
# need two pieces: one defining psi(occu prob coeff) and covariates, and one defining z dist
for(i in 1:n.sites) {
logit(psi[i]) <- TreatmentIntercept[treatment[i]]  #psi=occupancy probability
z[i] ~ dbern(psi[i])  # z=1 if occupied, z=latent true occupancy
}#i
# Observation model = Detection
# need two pieces: one for p(det prob coeff) and one defining Y distribution
for(j in 1:n.obs) {
logit(p[j]) <- DetectionIntercept + betaTemp*temp[j] + betaTemp2*temp[j]^2
#using temp as covariate with a quadratic relationship
#p=detection probability for site i and survey j
Y[j] ~ dbern(p[j] * z[site[j]]) #Y=my actual data observations
#z=1 or 0, turns this on or off
}#j
})
# Parameters monitored
parameters <- c("z","p","TreatmentIntercept","DetectionIntercept","betaTemp", "betaTemp2")
# MCMC Settings
ni <- 40000
nt <- 40
nb <- 20000
nc <- 3
# Data
nimble.data = list(Y=data$all.obs,
temp=scaled_temp)
nimble.constants = list(n.sites = length(unique(data$site)),
n.treatments = length(unique(data2$treatment)),
treatment=data2$treatment,
site=as.numeric(as.factor(data$site)),
n.obs = length(data$all.obs))
mcmc.output.2 <- nimbleMCMC(code = all.spp.model.2,
data = nimble.data,
constants=nimble.constants,
monitors = parameters,
niter = ni,
nburnin = nb,
nchains = nc,
thin=nt,
summary=TRUE,
samplesAsCodaMCMC = TRUE)
attach.nimble(mcmc.output.2$samples)
save(mcmc.output.2, file="./all.spp_model_2.RData")
load("./all.spp_model.RData")
load("./all.spp_model_2.RData")
summary(mcmc.output.2)
# Gelman-Rubin diagnostic (AKA RHat or PSRF)
z <- mcmc.output.2$samples
g <- matrix(NA, nrow=nvar(z), ncol=2)
for (v in 1:nvar(z)) { g[v,] <- gelman.diag(z[,v])$psrf }
PSRF <- bind_cols(colnames(z$chain1),g) %>% rename(Parameter = ...1 ,PSRF = ...2 ,PSRFUpperCI = ...3)
PSRF # Values are below 1.05, so that's good
z
# Inverse logit the detection intercept to get detection probabilities
det.probs.inv <- inv.logit(DetectionIntercept)
hist(det.probs.inv)
# Looking at trace plots and parameter estimates
MCMCtrace(object = mcmc.output.1$samples,
pdf = FALSE, # no export to PDF
ind = TRUE, # separate density lines per chain
params = c("DetectionIntercept", "betaTemp", "TreatmentIntercept"))
mean(det.probs.inv) # = 0.3207378
mean(det.probs.inv>0)  # = 1
median(det.probs.inv)  # = 0.3198026
boxplot(det.probs.inv)
# Inv logit TreatmentIntercept to get Occupancy Estimates
trt.int.inv <- inv.logit(TreatmentIntercept)
median(trt.int.inv[,1]) # 0.513384    BS
median(trt.int.inv[,2]) # 0.9684722    BU
median(trt.int.inv[,3]) # 0.7607153    HB
median(trt.int.inv[,4]) # 0.4214717    HU
median(trt.int.inv[,5]) # 0.9977257    UU
levels(site(trt))
levels(site$trt)
class(site$trt)
#### site-level matrix:
# "site" and "treatment
site_subset <- subset(site[,c(1,5)])
class(site_subset$trt)
site_subset$trt <- as.numeric(factor(site_subset$trt))
class(site_subset$trt)
#### site-level matrix:
# "site" and "treatment
site_subset <- subset(site[,c(1,5)])
site_subset$trt <- as.factor(site_subset$trt)
levels(site_subset$trt)
site_subset$trt <- as.numeric(site_subset$trt)
table(site_subset$trt)
# Assuming 'df' is your dataframe and 'your_factor' is the factor column
factor_levels <- levels(site_subset$trt)
numeric_to_category <- setNames(factor_levels, seq_along(factor_levels))
# Assuming 'df' is your dataframe and 'your_factor' is the factor column
factor_levels <- levels(site_subset$trt)
numeric_to_category <- setNames(factor_levels, seq_along(factor_levels))
is.factor(site_subset$trt)
# Renaming and reordering the treatment intercepts for the boxplot
# treatment_matrix <- TreatmentIntercept
treatment_matrix <- trt.int.inv # Using the inv logit treatment estimates
new.names <- c("Salvage Logged", "Wildfire", "Harvest, Wildfire", "Harvest", "Control")
colnames(treatment_matrix) <- new.names
desired.order <- c("Control", "Wildfire", "Harvest, Wildfire", "Harvest", "Salvage Logged")
box.colors <- c('lightgreen','steelblue', 'coral2', '#f9d62e', '#b967ff' )
# Boxplot of Treatment Estimates - occu orob for each treatment
#png("C:/Users/jasmi/OneDrive/Documents/Academic/OSU/Git/Occupancy-2023/figures/Trt_occu_prob_nimble/Boxplot_trt_occu_prob_nimble.png")
boxplot(treatment_matrix[, match(desired.order, colnames(treatment_matrix))],
main = "Treatment Intercepts for All Species",
xlab = "Treatment", ylab = "Occupancy Probability",
col = box.colors)
# Boxplot of Treatment Estimates - occu orob for each treatment
png("C:/Users/jasmi/OneDrive/Documents/Academic/OSU/Git/oss-occu/figures/Trt_occu_prob_nimble/Boxplot_trt_occu_prob_nimble.png")
# Boxplot of Treatment Estimates - occu orob for each treatment
#png("C:/Users/jasmi/OneDrive/Documents/Academic/OSU/Git/oss-occu/figures/06-rework-nimble-model/boxplot_trt_occu_prob_nimble.png")
boxplot(treatment_matrix[, match(desired.order, colnames(treatment_matrix))],
main = "Treatment Intercepts for All Species",
xlab = "Treatment", ylab = "Occupancy Probability",
col = box.colors)
treatment_matrix <- trt.int.inv # Using the inv logit treatment estimates
desired.order <- c("Control", "Wildfire", "Harvest, Wildfire", "Harvest", "Salvage Logged")
#new.names <- c("Salvage Logged", "Wildfire", "Harvest, Wildfire", "Harvest", "Control")
#colnames(treatment_matrix) <- new.names
# Assuming treatment_matrix is your dataframe and desired.order is a vector of column names in the desired order
column_order <- match(desired.order, colnames(treatment_matrix))
reordered_treatment_matrix <- treatment_matrix[, column_order]
View(reordered_treatment_matrix)
View(trt.int.inv)
treatment_matrix <- trt.int.inv # Using the inv logit treatment estimates
View(treatment_matrix)
new.names <- c("Salvage Logged", "Wildfire", "Harvest, Wildfire", "Harvest", "Control")
colnames(treatment_matrix) <- new.names
desired.order <- c("Control", "Wildfire", "Harvest, Wildfire", "Harvest", "Salvage Logged")
treatment_matrix <- trt.int.inv # Using the inv logit treatment estimates
new.names <- c("Salvage Logged", "Wildfire", "Harvest, Wildfire", "Harvest", "Control")
colnames(treatment_matrix) <- new.names
desired.order <- c("Control", "Wildfire", "Harvest, Wildfire", "Harvest", "Salvage Logged")
View(reordered_treatment_matrix)
View(treatment_matrix)
class(treatment_matrix)
# Reshape data to long format
long_format <- gather(treatment_matrix, key = "Treatment", value = "Occupancy_Probability")
library(tidyverse)
treatment_matrix <- as.data.frame(treatment_matrix)
# Reshape data to long format
long_format <- gather(treatment_matrix, key = "Treatment", value = "Occupancy_Probability")
View(long_format)
box.colors <- c('lightgreen','steelblue', 'coral2', '#f9d62e', '#b967ff' )
ggplot(treatment_matrix, aes(x = Treatment, y = Occupancy_Probability, fill = Treatment)) +
geom_boxplot(col = box.colors) +
labs(title = "Treatment Intercepts for All Species", x = "Treatment", y = "Occupancy Probability") +
theme_minimal()
ggplot(long_format, aes(x = Treatment, y = Occupancy_Probability, fill = Treatment)) +
geom_boxplot(col = box.colors) +
labs(title = "Treatment Intercepts for All Species", x = "Treatment", y = "Occupancy Probability") +
theme_minimal()
#reorder treatment names
treatment_matrix <- trt.int.inv # Using the inv logit treatment estimates
#reorder treatment names
treatment_matrix <- trt.int.inv # Using the inv logit treatment estimates
new.names <- c("Salvage Logged", "Wildfire", "Harvest, Wildfire", "Harvest", "Control")
colnames(treatment_matrix) <- new.names
desired.order <- c("Control", "Wildfire", "Harvest, Wildfire", "Harvest", "Salvage Logged")
# Find the positions of the treatments in the desired order
column_order <- match(desired.order, colnames(treatment_matrix))
# Reorder the columns
reordered_treatment_matrix <- treatment_matrix[, column_order]
#from matrix to data frame
treatment_matrix <- as.data.frame(treatment_matrix)
# Reshape data to long format bc ggplot required
long_format <- gather(treatment_matrix, key = "Treatment", value = "Occupancy_Probability")
box.colors <- c('lightgreen','steelblue', 'coral2', '#f9d62e', '#b967ff' )
ggplot(long_format, aes(x = Treatment, y = Occupancy_Probability, fill = Treatment)) +
geom_boxplot(col = box.colors) +
labs(title = "Treatment Intercepts for All Species", x = "Treatment", y = "Occupancy Probability") +
theme_minimal()
# Reshape data to long format bc ggplot required
long_format <- gather(reordered_treatment_matrix, key = "Treatment", value = "Occupancy_Probability")
#from matrix to data frame
reordered_treatment_matrix <- as.data.frame(treatment_matrix)
# Reshape data to long format bc ggplot required
long_format <- gather(reordered_treatment_matrix, key = "Treatment", value = "Occupancy_Probability")
box.colors <- c('lightgreen','steelblue', 'coral2', '#f9d62e', '#b967ff' )
ggplot(long_format, aes(x = Treatment, y = Occupancy_Probability, fill = Treatment)) +
geom_boxplot(col = box.colors) +
labs(title = "Treatment Intercepts for All Species", x = "Treatment", y = "Occupancy Probability") +
theme_minimal()
View(reordered_treatment_matrix)
View(treatment_matrix)
View(TreatmentIntercept)
View(treatment_matrix)
new_order <- c("Control", "Wildfire", "Harvest, Wildfire", "Harvest", "Salvage Logged")
treatment_matrix <- treatment_matrix[,new_order]
#
# # Find the positions of the treatments in the desired order
# column_order <- match(desired.order, colnames(treatment_matrix))
#
# # Reorder the columns
# reordered_treatment_matrix <- treatment_matrix[, column_order]
#
# #from matrix to data frame
# reordered_treatment_matrix <- as.data.frame(treatment_matrix)
# # Reshape data to long format bc ggplot required
long_format <- gather(treatment_matrix, key = "Treatment", value = "Occupancy_Probability")
ggplot(long_format, aes(x = Treatment, y = Occupancy_Probability, fill = Treatment)) +
geom_boxplot(col = box.colors) +
labs(title = "Treatment Intercepts for All Species", x = "Treatment", y = "Occupancy Probability") +
theme_minimal()
View(long_format)
View(long_format)
# Assuming 'treatment_matrix' is your dataframe and 'trt' is your treatment variable
long_format$Treatment <- factor(long_format$Treatment,
levels = c("Control", "Wildfire", "Harvest, Wildfire", "Harvest", "Salvage Logged")) # Replace "DesiredOrder", "Treat1", etc., with your actual treatment names in the desired order
ggplot(long_format, aes(x = Treatment, y = Occupancy_Probability, fill = Treatment)) +
geom_boxplot(col = box.colors) +
labs(title = "Treatment Intercepts for All Species", x = "Treatment", y = "Occupancy Probability") +
theme_minimal()
#reorder treatment names
treatment_matrix <- trt.int.inv # Using the inv logit treatment estimates
#ntreatments are numbered, need to give them names
new.names <- c("Salvage Logged", "Wildfire", "Harvest, Wildfire", "Harvest", "Control")
colnames(treatment_matrix) <- new.names
# # Reshape data to long format bc ggplot required
long_format <- gather(treatment_matrix, key = "Treatment", value = "Occupancy_Probability")
treatment_matrix <- as.data.frame(treatment_matrix)
# # Reshape data to long format bc ggplot required
long_format <- gather(treatment_matrix, key = "Treatment", value = "Occupancy_Probability")
# Assuming 'treatment_matrix' is your dataframe and 'trt' is your treatment variable
long_format$Treatment <- factor(long_format$Treatment,
levels = c("Control", "Wildfire", "Harvest, Wildfire", "Harvest", "Salvage Logged")) # Replace "DesiredOrder", "Treat1", etc., with your actual treatment names in the desired order
box.colors <- c('lightgreen','steelblue', 'coral2', '#f9d62e', '#b967ff' )
ggplot(long_format, aes(x = Treatment, y = Occupancy_Probability, fill = Treatment)) +
geom_boxplot(col = box.colors) +
labs(title = "Treatment Intercepts for All Species", x = "Treatment", y = "Occupancy Probability") +
theme_minimal()
ggplot(long_format, aes(x = Treatment, y = Occupancy_Probability, fill = Treatment)) +
geom_boxplot() +
cale_fill_manual(values = box.colors) +
labs(title = "Treatment Intercepts for All Species", x = "Treatment", y = "Occupancy Probability") +
theme_minimal()
ggplot(long_format, aes(x = Treatment, y = Occupancy_Probability, fill = Treatment)) +
geom_boxplot() +
scale_fill_manual(values = box.colors) +
labs(title = "Treatment Intercepts for All Species", x = "Treatment", y = "Occupancy Probability") +
theme_minimal()
ggplot(long_format, aes(x = Treatment, y = Occupancy_Probability, fill = Treatment)) +
geom_boxplot() +
scale_fill_manual(values = box.colors) +
labs(title = "Treatment Intercepts for All Species", x = "Treatment", y = "Occupancy Probability") +
theme_minimal() +
theme(panel.background = element_rect(fill = "transparent", color = NA),
plot.background = element_rect(fill = "transparent", color = NA),
plot.title = element_text(hjust = 0.5), # Center the title
axis.text.x = element_text(angle = 45, hjust = 1), # Rotate x-axis labels
legend.background = element_rect(fill = "transparent", color = NA), # Transparent legend background
legend.box.background = element_rect(fill = "transparent", color = NA))
ggsave("C:/Users/jasmi/OneDrive/Documents/Academic/OSU/Git/oss-occu/figures/06-rework-nimble-models/boxplot_trt_occu_prob_nimble.png",
plot = last_plot(), bg = "transparent")
