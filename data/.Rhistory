# Parameters monitored
parameters <- c("z","p","TreatmentIntercept","DetectionIntercept","betaTemp", "betaTemp2")
# MCMC Settings
ni <- 40000
nt <- 40
nb <- 20000
nc <- 3
# Data
nimble.data = list(Y=data$all.obs,
temp=scaled_temp)
nimble.constants = list(n.sites = length(unique(data$site)),
n.treatments = length(unique(data2$treatment)),
treatment=data2$treatment,
site=as.numeric(as.factor(data$site)),
n.obs = length(data$all.obs))
mcmc.output.1 <- nimbleMCMC(code = all.spp.model.1,
data = nimble.data,
constants=nimble.constants,
monitors = parameters,
niter = ni,
nburnin = nb,
nchains = nc,
thin=nt,
summary=TRUE,
samplesAsCodaMCMC = TRUE)
attach.nimble(mcmc.output.1$samples)
save(mcmc.output.1, file="./all.spp_model.RData")
load("./all.spp_model.RData")
# Gelman-Rubin diagnostic (AKA RHat or PSRF)
z <- mcmc.output.1$samples
g <- matrix(NA, nrow=nvar(z), ncol=2)
for (v in 1:nvar(z)) { g[v,] <- gelman.diag(z[,v])$psrf }
PSRF <- bind_cols(colnames(z$chain1),g) %>% rename(Parameter = ...1 ,PSRF = ...2 ,PSRFUpperCI = ...3)
PSRF # Values are below 1.05, so that's good
# Inverse logit the detection intercept to get detection probabilities
det.probs.inv <- inv.logit(DetectionIntercept)
# Looking at trace plots and parameter estimates
MCMCtrace(object = mcmc.output.1$samples,
pdf = FALSE, # no export to PDF
ind = TRUE, # separate density lines per chain
params = c("DetectionIntercept", "betaTemp", "TreatmentIntercept"))
# Looking at trace plots and parameter estimates
MCMCtrace(object = mcmc.output.1$samples,
pdf = FALSE, # no export to PDF
ind = TRUE, # separate density lines per chain
params = c("DetectionIntercept", "betaTemp", "TreatmentIntercept"))
dev.off()
# Looking at trace plots and parameter estimates
MCMCtrace(object = mcmc.output.1$samples,
pdf = FALSE, # no export to PDF
ind = TRUE, # separate density lines per chain
params = c("DetectionIntercept", "betaTemp", "TreatmentIntercept"))
#mean(det.probs.inv) # = 0.3207378
#mean(det.probs.inv>0)  # = 1
#median(det.probs.inv)  # = 0.3198026
boxplot(det.probs.inv)
# Inv logit TreatmentIntercept to get Occupancy Estimates
trt.int.inv <- inv.logit(TreatmentIntercept)
# Renaming and reordering the treatment intercepts for the boxplot
# treatment_matrix <- TreatmentIntercept
treatment_matrix <- trt.int.inv # Using the inv logit treatment estimates
View(treatment_matrix)
new.names <- c("Salvage Logged", "Wildfire", "Harvest, Wildfire", "Harvest", "Control")
colnames(treatment_matrix) <- new.names
desired.order <- c("Control", "Wildfire", "Harvest, Wildfire", "Harvest", "Salvage Logged")
box.colors <- c('lightgreen','steelblue', 'coral2', '#f9d62e', '#b967ff' )
# Boxplot of Treatment Estimates
#png("C:/Users/jasmi/OneDrive/Documents/Academic/OSU/Git/Occupancy-2023/figures/Trt_occu_prob_nimble/Boxplot_trt_occu_prob_nimble.png")
boxplot(treatment_matrix[, match(desired.order, colnames(treatment_matrix))],
main = "Treatment Intercepts for All Species",
xlab = "Treatment", ylab = "Occupancy Probability",
col = box.colors)
rm(list=ls())
setwd("C:/Users/jasmi/OneDrive/Documents/Academic/OSU/Git/Occupancy-2023/data")
library(nimble)
library(ggplot2)
library(data.table)
library(tidyverse)
library(mcmcplots)
library(MCMCvis)
library(boot)
source('attach.nimble_v2.R')
data <- read.csv("sitecovs_obs_long.csv")
View(data)
setwd("C:/Users/jasmi/OneDrive/Documents/Academic/OSU/Git/oss-occu/data")
subplot <- read.csv("subplot.complete.csv")
View(subplot)
setwd("C:/Users/jasmi/OneDrive/Documents/Academic/OSU/Git/Occupancy-2023/data")
data2 <- read.csv("site_treatments.csv")
View(data2)
setwd("C:/Users/jasmi/OneDrive/Documents/Academic/OSU/Git/oss-occu/data")
site <- read.csv("site.complete.csv")
View(site)
sals <- read.csv("sals.complete.csv",
colClasses = c(landowner="factor", stand="character", trt="factor",
obs="factor", subplot="factor", recap="factor",
pass="factor", spp="factor", cover_obj="factor",
substrate="factor", age_class="factor"))
View(sals)
# add detection col
sals$detect <- 1
View(subplot)
View(data2)
sals_occu_df <- sals[,c('site_id','date_mdy','spp','detect')]
View(sals_occu_df)
df_count <- sals_occu_df %>%
group_by(site_id, spp) %>%
summarize(n = n())
View(df_count)
df_count <- sals %>%
group_by(site_id, spp) %>%
summarize(n = n())
# Reshape the data to have one row per site and a count column for each species
spp_count <- df_count %>%
pivot_wider(names_from = spp, values_from = n, values_fill = 0)
View(spp_count)
df_count <- sals %>%
group_by(site_id, spp, detect) %>%
summarize(n = n())
# Reshape the data to have one row per site and a count column for each species
spp_count <- df_count %>%
pivot_wider(names_from = spp, values_from = n, values_fill = 0)
# Reshape the data to have one row per site and a count column for each species
spp_count <- df_count %>%
pivot_wider(names_from = spp, values_from = detect, values_fill = 0)
# delete spp i dont care about
spp_count <- spp_count[,-6]
spp_count <- spp_count[,-6]
spp_count <- spp_count[,-6]
spp_count <- spp_count[,-3]
spp_count <- as.data.frame(spp_count)
View(data2)
View(data)
names(spp_count) <- c("site","count","enes.obs","oss.obs")
head(spp_count)
View(data)
View(data2)
View(data)
View(data)
# new df group by site
df_count <- sals %>%
group_by(site_id, date, subplot, spp, detect) %>%
summarize(n = n())
# Reshape the data to have one row per site and a count column for each species
spp_count <- df_count %>%
pivot_wider(names_from = spp, values_from = detect, values_fill = 0)
# delete spp i dont care about
spp_count <- spp_count[,-6]
spp_count <- spp_count[,-6]
spp_count <- spp_count[,-6]
spp_count <- spp_count[,-3]
spp_count <- as.data.frame(spp_count)
names(spp_count) <- c("site","count","enes.obs","oss.obs")
head(spp_count)
# new df group by site
df_count <- sals %>%
group_by(site_id, date, subplot, spp, detect) %>%
summarize(n = n())
# Reshape the data to have one row per site and a count column for each species
spp_count <- df_count %>%
pivot_wider(names_from = spp, values_from = detect, values_fill = 0)
# delete spp i dont care about
spp_count <- spp_count[,-8]
spp_count <- spp_count[,-8]
spp_count <- spp_count[,-8]
spp_count <- spp_count[,-5]
# new df group by site
df_count <- sals %>%
group_by(site_id, date_mdy, subplot, spp, detect) %>%
summarize(n = n())
# Reshape the data to have one row per site and a count column for each species
spp_count <- df_count %>%
pivot_wider(names_from = spp, values_from = detect, values_fill = 0)
# delete spp i dont care about
spp_count <- spp_count[,-8]
spp_count <- spp_count[,-8]
spp_count <- spp_count[,-8]
spp_count <- spp_count[,-5]
spp_count <- as.data.frame(spp_count)
names(spp_count) <- c("site","date","subplot","count","enes.obs","oss.obs")
head(spp_count)
View(data)
View(data)
View(subplot)
rm(list=ls())
setwd("C:/Users/jasmi/OneDrive/Documents/Academic/OSU/Git/Occupancy-2023/data")
library(nimble)
library(ggplot2)
library(data.table)
library(tidyverse)
library(mcmcplots)
library(MCMCvis)
library(boot)
source('attach.nimble_v2.R')
data <- read.csv("sitecovs_obs_long.csv")
data$site <- as.numeric(data$site)
data$all.obs <- as.numeric(data$all.obs)
data$oss.obs <- as.numeric(data$oss.obs)
data$enes.obs <- as.numeric(data$enes.obs)
data2 <- read.csv("site_treatments.csv")
data2$site <- as.numeric(data2$site)
data2$treatment <- as.numeric(factor(data2$treatment))
table(data2$treatment)
#  1 = BS
#  2 = BU
#  3 = HB
#  4 = HU
#  5 = UU
scaled_temp <- c(scale(data$temp))
View(data)
View(data2)
setwd("C:/Users/jasmi/OneDrive/Documents/Academic/OSU/Git/oss-occu/data")
library(nimble)
library(ggplot2)
library(data.table)
library(tidyverse)
library(mcmcplots)
library(MCMCvis)
library(boot)
source('attach.nimble_v2.R')
#### load data --------------------------------------------------------------------------------------------
site <- read.csv("site.complete.csv")
subplot <- read.csv("subplot.complete.csv")
sals <- read.csv("sals.complete.csv",
colClasses = c(landowner="factor", stand="character", trt="factor",
obs="factor", subplot="factor", recap="factor",
pass="factor", spp="factor", cover_obj="factor",
substrate="factor", age_class="factor"))
# add detection col
sals$detect <- 1
View(sals)
# new df group by site
df_count <- sals %>%
group_by(site_id, date_mdy, subplot, spp, detect) %>%
summarize(n = n())
# Reshape the data to have one row per site and a count column for each species
spp_count <- df_count %>%
pivot_wider(names_from = spp, values_from = detect, values_fill = 0)
# delete spp i dont care about
spp_count <- spp_count[,-8]
spp_count <- spp_count[,-8]
spp_count <- spp_count[,-8]
spp_count <- spp_count[,-5]
spp_count <- as.data.frame(spp_count)
names(spp_count) <- c("site","date","subplot","count","enes.obs","oss.obs")
head(spp_count)
View(spp_count)
View(site)
View(subplot)
View(subplot)
View(data)
setwd("C:/Users/jasmi/OneDrive/Documents/Academic/OSU/Git/Occupancy-2023/data")
library(unmarked)
library(ggplot2)
library(stats)
library(MASS)
## Load Data----------------------------------------------------------------------------------------------
# Detection Covariates
hum <- read.csv("detcov_humidity.csv", row.names = 1)
temp <- read.csv("detcov_temp.csv", row.names = 1 )
weather <- read.csv("detcov_weather.csv", row.names = 1 )
date <- read.csv("detcov_juliandate.csv", row.names = 1 )
soilmoist <- read.csv("detcov_soilmoist.csv", row.names = 1 )
View(hum)
scaled_hum <- as.data.frame(scale(hum))
scaled_temp <- as.data.frame(scale(temp))
scaled_date <- as.data.frame(scale(date))
scaled_soilmoist <- as.data.frame(scale(soilmoist))
View(scaled_hum)
# Occupancy Covariates
sitecovs <- read.csv("sitecovs.csv")
# Reorder treatments
sitecovs$treatment <- factor(sitecovs$treatment,
levels = c("UU", "BU", "HB", "HU", "BS"))
# Scale Occupancy Covariates
sitecovs$site <- as.character(sitecovs$site)
# Identify numeric sitecovs
numeric_sitecovs <- sitecovs[sapply(sitecovs, is.numeric)]
# Scale the numeric sitecovs
scaled_numeric_sitecovs <- as.data.frame(scale(numeric_sitecovs))
# Combine the scaled numeric sitecovs with non-numeric sitecovs
scaled_sitecovs <- cbind(scaled_numeric_sitecovs, sitecovs[setdiff(names(sitecovs), names(numeric_sitecovs))])
View(scaled_sitecovs)
## Species data
oss.dat <- read.csv("OSS_occ_7.csv")
oss.dets <- oss.dat[,-1]
enes.dat <- read.csv("ENES_occ_7.csv")
enes.dets <- enes.dat[,-1]
View(enes.dat)
View(enes.dets)
View(enes.dat)
View(enes.dets)
## OSS Top Model Exploration-------------------------------------------------------------------------------
# Build OSS unmarkedFrameOccu Object
UMF.oss.scaled <- unmarkedFrameOccu(
y = oss.dets,
obsCovs = list(humidity = scaled_hum, temp = scaled_temp, weather = weather, date = scaled_date,
soilmoist = scaled_soilmoist),
siteCovs = scaled_sitecovs)
# 4: psi(treatment) p(x) , x = date, treatment, or soil moisture
m4 <- occu(~temp ~treatment, data=UMF.oss.scaled)
## Extract treatment occupancy predictions and plot --------------------------------------------------------
# Extract psi predictions from model 4
preds4 <- predict(m4, type="state")
sites_trt <- sitecovs[, c("site","treatment")]
site_preds4 <- cbind(sites_trt, preds4)
# Barplot of predictions for each treatment
ggplot(site_preds4, aes(x = treatment, y = Predicted, ymin = lower, ymax = upper, fill = treatment)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
geom_errorbar(aes(ymax = upper, ymin = lower), width = 0.25, position = position_dodge(width = 0.7), linewidth = 1) +
labs(title = "OSS: Treatment vs. Predicted Occupancy",
x = "Treatment", y = "Predicted Value") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_brewer(palette = "Set1")
# Boxplot of preds with confidence intervals
ggplot(site_preds4, aes(x = treatment, y = Predicted, fill = treatment)) +
geom_boxplot() +
geom_point(position = position_dodge(width = 0.75), size = 3) +
geom_errorbar(aes(ymax = upper, ymin = lower), width = 0.25, position = position_dodge(width = 0.75), size = 1) +
labs(title = "OSS: Treatment vs. Predicted Occupancy",
x = "Treatment", y = "Predicted Value") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_brewer(palette = "Set1")
View(hum)
View(temp)
View(date)
View(subplot)
View(soilmoist)
View(soilmoist)
View(subplot)
head(subplot
)
View(subplot)
# Reshape the data back to wide format, flipping the dimensions
subplot_long <- subplot %>%
pivot_wider(names_from = subplot, values_from = soil_moist_avg)
View(subplot_long)
View(subplot_long)
df <- tibble::tribble(
~site_id, ~subplot, ~soil_moisture,
1, "A", 100,
1, "B", 200,
2, "A", 150,
2, "B", 250
)
# Reshape the data from wide to long format
df_long <- df %>%
pivot_longer(cols = -subplot, names_to = "variable", values_to = "value")
View(df)
View(df_long)
View(df)
View(df_long)
df_long <- df_long %>%
mutate(site_ID = str_extract(subplot, "\\d+"))
df_wide <- df_long %>%
pivot_wider(names_from = variable, values_from = value)
View(df_wide)
head(subplot)
head(scaled_soilmoist)
# Melt the data to a long format
melted_df <- subplot %>%
select(soil_moist_avg) %>% # Select only the soil_moist_avg column
pivot_longer(everything(), names_to = "subplot", values_to = "soil_moist_avg")
df <- read.csv("subplot.complete.csv")
setwd("C:/Users/jasmi/OneDrive/Documents/Academic/OSU/Git/oss-occu/data")
df <- read.csv("subplot.complete.csv")
# Melt the data to a long format
melted_df <- df %>%
select(soil_moist_avg) %>% # Select only the soil_moist_avg column
pivot_longer(everything(), names_to = "subplot", values_to = "soil_moist_avg")
View(df)
# Assuming df is your original data frame
# Step 1: Convert the data to a long format
long_df <- df %>%
pivot_longer(cols = -c(site_id, subplot), # Exclude site_id and subplot from being converted to long format
names_to = "variable",
values_to = "value") %>%
filter(variable == "soil_moist_avg") # Filter to keep only the soil_moist_avg column
View(subplot_long)
View(subplot)
df <- subset(subplot[,c('site_id','subplot','soil_moist_avg')])
View(df)
#
df_long <- df %>%
pivot_longer(cols = -subplot, names_to = "variable", values_to = "value")
class(df)
summary(df)
df$site_id <- as.numeric(df$site_id)
View(df)
df$site_id <- as.factor(df$site_id)
View(df)
df$site_id <- as.character(df$site_id)
View(df)
df <- subset(subplot[,c('site_id','subplot','soil_moist_avg')])
View(df)
class(df$site_id)
class(df$soil_moist_avg)
df$num <- seq_len(nrow(df))
df_long <- df %>%
pivot_longer(cols = -subplot, names_to = "variable", values_to = "value")
df <- df[,-1]
df_long <- df %>%
pivot_longer(cols = -subplot, names_to = "variable", values_to = "value")
# Add a new column for site ID
df_long <- df_long %>%
mutate(site_ID = str_extract(subplot, "\\d+"))
# Reshape the data back to wide format, flipping the dimensions
df_wide <- df_long %>%
pivot_wider(names_from = variable, values_from = value)
View(df_long)
# Clean up the column names
df_wide <- df_wide %>%
rename_with(~str_remove(.x, "_ID"), everything())
# Print the transformed data frame
print(df_wide)
df <- subset(subplot[,c('site_id','subplot','soil_moist_avg')])
df$num <- seq_len(nrow(df))
df <- df[,-1]
View(df)
df <- subset(subplot[,c('subplot','soil_moist_avg')])
df_long <- df %>%
pivot_longer(cols = -subplot, names_to = "variable", values_to = "value")
# Add a new column for site ID
df_long <- df_long %>%
mutate(site_ID = str_extract(subplot, "\\d+"))
# Add a new column for site ID
df_long <- df_long %>%
mutate(site_ID = str_extract(site_id, "\\d+"))
df <- subset(subplot[,c('site_id','subplot','soil_moist_avg')])
df_long <- df %>%
pivot_longer(cols = -subplot, names_to = "variable", values_to = "value")
df <- subset(subplot[,c('subplot','soil_moist_avg')])
df_long <- df %>%
pivot_longer(cols = -subplot, names_to = "variable", values_to = "value")
df_long <- df %>%
pivot_longer(cols = -subplot, names_to = "variable", values_to = "value")
# Reshape the data back to wide format, flipping the dimensions
df_wide <- df_long %>%
pivot_wider(names_from = variable, values_from = value)
View(df_wide)
df_long <- merge(df_long, subplot$site_id)
df <- subset(subplot[,c('subplot','soil_moist_avg')])
df_long <- df %>%
pivot_longer(cols = -subplot, names_to = "variable", values_to = "value")
df_long <- cbind(df_long, subplot$site_id)
# Reshape the data back to wide format, flipping the dimensions
df_wide <- df_long %>%
pivot_wider(names_from = variable, values_from = value)
# Reshape the data back to wide format, flipping the dimensions
df_wide <- df_long %>%
pivot_wider(names_from = subplot, values_from = soil_moist_avg)
df <- subset(subplot[,c('subplot','soil_moist_avg')])
df_long <- df %>%
pivot_longer(cols = -subplot, names_to = "variable", values_to = "value")
df_long <- cbind(df_long, subplot$site_id)
# Add a new column for site ID
df_long <- df_long %>%
mutate(site_ID = str_extract(site_id, "\\d+"))
# Reshape the data back to wide format, flipping the dimensions
df_wide <- df_long %>%
pivot_wider(names_from = subplot, values_from = value)
soil_moist_wide <- df_wide[,-1]
soil_moist_wide <- soil_moist_wide[,-1]
View(soil_moist_wide)
View(scaled_soilmoist)
df <- subset(subplot[,c('subplot','soil_moist_avg')])
#change to long format
df_long <- df %>%
pivot_longer(cols = -subplot, names_to = "variable", values_to = "value")
#add site id back in
df_long <- cbind(df_long, subplot$site_id)
# Reshape the data back to wide format, flipping the dimensions
df_wide <- df_long %>%
pivot_wider(names_from = subplot, values_from = value)
soil_moist_wide <- df_wide[,-1]
rownames(soil_moist_wide) <- soil_moist_wide[,1]
soil_moist_wide <- as.data.frame(soil_moist_wide)
rownames(soil_moist_wide) <- soil_moist_wide[,1]
soil_moist_wide <- soil_moist_wide[,-1]
View(subplot)
df <- subset(subplot[,c('subplot','weather')])
#change to long format
df_long <- df %>%
pivot_longer(cols = -subplot, names_to = "variable", values_to = "value")
#add site id back in
df_long <- cbind(df_long, subplot$site_id)
# Reshape the data back to wide format, flipping the dimensions
df_wide <- df_long %>%
pivot_wider(names_from = subplot, values_from = value)
weather_wide <- df_wide[,-1]
weather_wide <- as.data.frame(weather_wide)
rownames(weather_wide) <- weather_wide[,1]
weather_wide <- weather_wide[,-1]
View(weather_wide)
View(subplot)
weather <- weather_wide[,-1]
soil_moist <- soil_moist_wide[,-1]
View(sitecovs)
#scale
scaled_soilmoist <- as.data.frame(scale(soilmoist))
View(site)
head(site)
head(scaled_sitecovs)
site_new <- subset(site[,c('site_id','trt','elev','day_mdy','temp','hum')])
site_new <- subset(site[,c('site_id','trt','elev','date_mdy','temp','hum')])
head(site_new)
site_new <- subset(site[,c('site_id','trt','date_mdy','elev','temp','hum')])
head(site_new)
dwd <- read.csv("dwd.complete.csv")
View(dwd)
