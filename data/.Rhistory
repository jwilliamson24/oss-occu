library(vegan)
library(rpart)
library(rpart.plot)
library(party)
library(randomForest)
library(ggplot2)
#setwd("C:/Users/jasmi/OneDrive/Documents/Academic/OSU/Git/multivariate-analysis")
setwd("~/Library/CloudStorage/OneDrive-Personal/Documents/Academic/OSU/Git/multivariate-analysis")
source("Biostats.R")
dat <- read.csv("Harney_Fishes_2007.csv", row.names = 1)
spp_N <- colSums(dat[,16:ncol(dat)])
spp_0 <- subset(spp_N, spp_N == 0)
omit <- names(spp_0)
dat2 <- dat[,!(colnames(dat) %in% omit)]
dat3 <- dat2[rowSums(dat2[,16:ncol(dat2)]) >0, ]
dat3$Herbaceous[is.na(dat3$Herbaceous)] <- 0
dat3$Ann_Herb[is.na(dat3$Ann_Herb)] <- 0
dat3 <- dat3[complete.cases(dat3$SiteLength),]
dat_final <- dat3
fish <- dat_final[,16:ncol(dat_final)]
env <- dat_final[,1:15]
fish_red <- drop.var(fish, min.fo=1)
fish_dens <- fish_red
for(i in 1:nrow(fish_red)){
fish_dens[i,] <- fish_red[i,]/dat_final$SiteLength[i]
}
fish_dens_log <- log(fish_dens + 1)
drop <- c("Latitude","Longitude","SiteLength","SiteWidth","SurfaceArea")
env <- env[,!(colnames(env) %in% drop)]
env_cont <- env[,!(colnames(env) %in% c("SMU","Pop","NLCD_Cat"))]
env <- env[,!(colnames(env) %in% c("Ave_Max_D","Ann_Herb"))]
env_cont <- env_cont[,!(colnames(env_cont) %in% c("Ave_Max_D","Ann_Herb"))]
Trout_PA <- ifelse(fish$TROUT_RB > 0, "Present", "Absent")
Trout.tree <- rpart(Trout_PA ~ ., data=env_cont, minsplit=2, xval=5)
rpart.plot(Trout.tree)
plotcp(Trout.tree)
Trout.tree.prune <- prune(Trout.tree, 0.076)
rpart.plot(Trout.tree.prune)
Trout.tree2 <- rpart(fish$TROUT_RB ~ ., data=env_cont, minsplit=2, xval=5)
rpart.plot(Trout.tree2)
plotcp(Trout.tree2)
Trout.tree2.prune <- prune(Trout.tree2, 0.06)
rpart.plot(Trout.tree2.prune)
Trout.forest <- randomForest(as.factor(Trout_PA) ~ ., data=env_cont, ntree = 5000, mtry = 5, importance=TRUE, keep.forest=FALSE, na.action=na.omit)
Trout.forest
varImpPlot(Trout.forest)
ForestData <- as.data.frame(importance(Trout.forest))
ForestData <- ForestData[order(ForestData[,1]),]
ForestData$Var.Names <- row.names(ForestData)
colnames(ForestData) <- c("Absent","Present","MeanDec","IncNodePurity","Var.Names")
ForestData
ggplot(ForestData, aes(x=Var.Names, y=MeanDec)) +
geom_segment( aes(x=Var.Names, xend=Var.Names, y=0, yend=MeanDec), color="skyblue") +
geom_point(aes(size = IncNodePurity), color="blue", alpha=0.6) +
theme_light() +
coord_flip() +
theme(
legend.position="bottom",
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
Trout.forest2 <- randomForest(fish$TROUT_RB ~ ., data=env_cont, ntree = 5000, mtry = 5, importance=TRUE, keep.forest=FALSE, na.action=na.omit)
Trout.forest2
ForestData <- as.data.frame(importance(Trout.forest2))
ForestData <- ForestData[order(ForestData[,1]),]
ForestData$Var.Names <- row.names(ForestData)
colnames(ForestData) <- c("MeanDec","IncNodePurity","Var.Names")
ForestData
ggplot(ForestData, aes(x=Var.Names, y=MeanDec)) +
geom_segment( aes(x=Var.Names, xend=Var.Names, y=0, yend=MeanDec), color="skyblue") +
geom_point(aes(size = IncNodePurity), color="blue", alpha=0.6) +
theme_light() +
coord_flip() +
theme(
legend.position="bottom",
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
varImpPlot(Trout.forest)
Trout.forest
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Library/CloudStorage/OneDrive-Personal/Documents/Academic/OSU/Git/multivariate-analysis")
library(vegan)
library(viridis)
library(MASSExtra)
library(ade4)
source("biostats.R")
#site-level data
#dat <- readRDS("C:/Users/jasmi/OneDrive/Documents/Academic/OSU/Git/oss-occu/data/site_level_matrix.rds")
dat <- readRDS("~/Library/CloudStorage/OneDrive-Personal/Documents/Academic/OSU/Git/oss-occu/data/site_level_matrix.rds")
row.names(dat) <- dat[,1]
#dat2 <- subset(dat, year=="2024")
sals <- dat[26:27]
env <- dat[1:25]
drop <- c("lat","long","stand","tree_farm","landowner","site_id","year","weather")
env <- env[,!(colnames(env) %in% drop)]
env_cont <- env[,-1]
drop <- c("jul_date","veg_cov","fwd_cov","dwd_count","size_cl","decay_cl","char_cl","length_cl" )
env_subset <- env_cont[,!(colnames(env_cont) %in% drop)]
View(sals)
oss_PA <- ifelse(sals$oss > 0, "Present", "Absent")
oss.tree <- rpart(oss_PA ~ ., data=env_subset, minsplit=2, xval=5)
rpart.plot(oss.tree)
plotcp(oss.tree)
oss.tree.prune <- prune(oss.tree, 0.044)
rpart.plot(oss.tree.prune)
oss.forest <- randomForest(as.factor(oss_PA) ~ ., data=env_subset, ntree = 5000, mtry = 5, importance=TRUE, keep.forest=FALSE, na.action=na.omit)
oss.forest
oss.forest
sqrt(8)
oss.forest <- randomForest(as.factor(oss_PA) ~ ., data=env_subset, ntree = 2000, mtry = 3, importance=TRUE, keep.forest=FALSE, na.action=na.omit)
oss.forest
varImpPlot(oss.forest)
ForestData <- as.data.frame(importance(oss.forest))
ForestData <- ForestData[order(ForestData[,1]),]
ForestData$Var.Names <- row.names(ForestData)
colnames(ForestData) <- c("Absent","Present","MeanDec","IncNodePurity","Var.Names")
ForestData
ggplot(ForestData, aes(x=Var.Names, y=MeanDec)) +
geom_segment( aes(x=Var.Names, xend=Var.Names, y=0, yend=MeanDec), color="skyblue") +
geom_point(aes(size = IncNodePurity), color="blue", alpha=0.6) +
theme_light() +
coord_flip() +
theme(
legend.position="bottom",
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
oss_PA <- ifelse(sals$oss > 0, "Present", "Absent")
oss.tree <- rpart(oss_PA ~ ., data=env_subset, minsplit=2, xval=5)
rpart.plot(oss.tree)
plotcp(oss.tree)
oss.tree.prune <- prune(oss.tree, 0.044)
rpart.plot(oss.tree.prune)
oss.forest <- randomForest(as.factor(oss_PA) ~ ., data=env_subset, ntree = 5000, mtry = 5, importance=TRUE, keep.forest=FALSE, na.action=na.omit)
oss.forest
table(oss_PA)
importance(oss.forest)
varImpPlot(oss.forest)
ForestData <- as.data.frame(importance(oss.forest))
ForestData <- ForestData[order(ForestData[,1]),]
ForestData$Var.Names <- row.names(ForestData)
colnames(ForestData) <- c("Absent","Present","MeanDec","IncNodePurity","Var.Names")
ForestData
ggplot(ForestData, aes(x=Var.Names, y=MeanDec)) +
geom_segment( aes(x=Var.Names, xend=Var.Names, y=0, yend=MeanDec), color="skyblue") +
geom_point(aes(size = IncNodePurity), color="blue", alpha=0.6) +
theme_light() +
coord_flip() +
theme(
legend.position="bottom",
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
install.packages("tinytex")
tinytex::install_tinytex()
install.packages("tinytex")
tinytex::install_tinytex()
install.packages("tinytex", dependencies = TRUE)
remove.packages("tinytex")
install.packages("tinytex")
tinytex::install_tinytex()
dat <- read.csv("env_subset_corr.csv", row.names = 1)
dat2 <- readRDS("site_level_matrix.rds") #need this for the treatments
rm(list=ls())
setwd("~/Library/CloudStorage/OneDrive-Personal/Documents/Academic/OSU/Git/oss-occu/data")
dat <- read.csv("env_subset_corr.csv", row.names = 1)
dat2 <- readRDS("site_level_matrix.rds") #need this for the treatments
row.names(dat2) <- dat2[,1]
dat <- dat[,-c(11:13)]
dat_std <- decostand(dat, "standardize") #z-scores
library(vegan)
dat_std <- decostand(dat, "standardize") #z-scores
normality_results <- sapply(dat[, covariate_columns], function(x) shapiro.test(x)$p.value)
normality_results <- sapply(dat, function(x) shapiro.test(x)$p.value)
normality_results
par(mfrow = c(3, 4))  # Arrange plots in a grid (3 rows, 4 columns)
for (var in names(dat)) {
qqnorm(dat[[var]], main = paste("Q-Q Plot:", var))
qqline(dat[[var]], col = "red")
}
par(mfrow = c(1,1))  # Reset plot layout
library(car)
library(FSA)
install.packages(FSA)
shapiro_results <- sapply(dat[, c("temp", "canopy_cov", "veg_cov", "dwd_cov",
"fwd_cov", "soil_moist", "dwd_count", "size_cl",
"decay_cl", "char_cl", "avg_volume")],
function(x) shapiro.test(x)$p.value)
shapiro_results
shapiro_results <- sapply(habitat_data,
function(x) shapiro.test(x)$p.value)
shapiro_results <- sapply(dat, function(x) shapiro.test(x)$p.value)
shapiro_results
dat$temp_sq <- sqrt(dat$temp)
qqnorm(dat$temp_sq)
qqline(dat$temp_sq, col = "red")
shapiro_results <- sapply(dat, function(x) shapiro.test(x)$p.value)
shapiro_results
qqnorm(dat$temp)
qqline(dat$temp, col = "red")
dat$temp_log <- log(dat$temp)
dat$avg_volume_log <- log(dat$avg_volume)
dat$avg_volume_sq <- sq(dat$avg_volume)
dat$avg_volume_sq <- sqrt(dat$avg_volume)
shapiro.test(habitat_data$temp_log)
shapiro.test(dat$temp_log)
shapiro.test(dat$avg_volume_log)
shapiro.test(dat$temp_sq)
shapiro.test(dat$avg_volume_sq)
shapiro.test(dat$temp_log)
shapiro.test(dat$temp_sq)
shapiro.test(dat$avg_volume_log)
shapiro.test(dat$avg_volume_sq)
qqnorm(dat$avg_volume_sq)
qqline(dat$avg_volume_sq, col = "red")
variance_results <- sapply(dat, function(x) {
leveneTest(x ~ dat2$trt)$p.value
})
variance_results
variance_results <- sapply(dat, function(x) {
leveneTest(x ~ dat2$trt)$p.value
})
warnings()
class(dat$temp)
dat2$trt <- as.factor(dat2$trt)
variance_results <- sapply(dat, function(x) {
leveneTest(x ~ dat2$trt)$p.value
})
variance_results
str(dat)  # Check the structure of 'dat' to ensure columns are numeric
View(dat)
# Run Levene's Test for each variable in 'dat'
variance_results <- sapply(dat, function(x) {
if (is.numeric(x)) {
return(leveneTest(x ~ dat2$trt)$p.value)  # Only run Levene's test on numeric columns
}
return(NA)  # Return NA for non-numeric columns
})
# View the results
variance_results
leveneTest(dat$soil_moist ~ dat2$trt)  # More robust than Bartlett's
variance_results <- sapply(dat, function(x) {
if (is.numeric(x)) {
test_result <- try(leveneTest(x ~ dat2$trt), silent = TRUE)
if (inherits(test_result, "try-error")) {
return(NA)  # Return NA if an error occurs
}
return(test_result$p.value)  # Return the p-value
}
return(NA)  # Return NA for non-numeric columns
})
# View the results
variance_results
# Loop through each column in 'dat'
for (colname in names(dat)) {
# Check if the column is numeric
if (is.numeric(dat[[colname]])) {
# Run Levene's test and store the result
variance_results[[colname]] <- leveneTest(dat[[colname]] ~ dat2$trt)$p.value
}
}
# View the results
variance_results
# Create an empty list to store the p-values
variance_results <- list()
# Loop through each column in 'dat'
for (colname in names(dat)) {
# Check if the column is numeric
if (is.numeric(dat[[colname]])) {
# Run Levene's test and store the result
variance_results[[colname]] <- leveneTest(dat[[colname]] ~ dat2$trt)$p.value
}
}
# View the results
variance_results
# Create an empty list to store the p-values
variance_results <- list()
# Loop through each column in 'dat'
for (colname in names(dat)) {
# Check if the column is numeric
if (is.numeric(dat[[colname]])) {
# Run Levene's test and store the result
variance_results[[colname]] <- leveneTest(dat[[colname]] ~ dat2$trt)$p.value
}
}
# Create an empty list to store the p-values
variance_results <- list()
# Loop through each column in 'dat'
for (i in names(dat)) {
# Check if the column is numeric
if (is.numeric(dat[[i]])) {
# Run Levene's test and store the result
variance_results[[i]] <- leveneTest(dat[[i]] ~ dat2$trt)$p.value
}
}
# View the results
variance_results
str9dat
str(dat)
leveneTest(dat$soil_moist ~ dat2$trt)
leveneTest(dat$dwd_count ~ dat2$trt)
leveneTest(dat$decay_cl ~ dat2$trt)
leveneTest(dat$temp_sq ~ dat2$trt)
anova_results <- lapply(c("temp_sq", "soil_moist", "dwd_count", "decay_cl"), function(var) {
model <- aov(dat[[var]] ~ dat2$treatment)
summary(model)
})
anova_results <- lapply(c("temp_sq", "soil_moist", "dwd_count", "decay_cl"), function(var) {
model <- aov(dat[[var]] ~ dat2$trt)
summary(model)
})
names(anova_results) <- c("temp_sq", "soil_moist", "dwd_count", "decay_cl")
anova_results
TukeyHSD(model)
anova_results <- lapply(c("temp_sq", "soil_moist", "dwd_count", "decay_cl"), function(var) {
model <- aov(dat[[var]] ~ dat2$trt)
summary(model)
})
names(anova_results) <- c("temp_sq", "soil_moist", "dwd_count", "decay_cl")
anova_results
TukeyHSD(model)
TukeyHSD(anova_results)
anova_results <- lapply(c("temp_sq", "soil_moist", "dwd_count", "decay_cl"), function(var) {
model <- aov(dat[[var]] ~ dat2$trt)
return(model)
})
names(anova_results) <- c("temp_sq", "soil_moist", "dwd_count", "decay_cl")
anova_results
anova_results <- lapply(c("temp_sq", "soil_moist", "dwd_count", "decay_cl"), function(var) {
model <- aov(dat[[var]] ~ dat2$trt)
summary(model)
})
names(anova_results) <- c("temp_sq", "soil_moist", "dwd_count", "decay_cl")
anova_results
summary(model)
summary(anova_results)
# Tukey HSD for 'temp_sq'
tukey_temp_sq <- TukeyHSD(model_temp_sq)
# Run Tukey HSD on each aov object
tukey_results <- lapply(c("temp_sq", "soil_moist", "dwd_count", "decay_cl"), function(var) {
model <- aov(dat[[var]] ~ dat2$trt)  # Run ANOVA again
return(TukeyHSD(model))  # Apply Tukey HSD
})
# View Tukey HSD results
tukey_results
kruskal_results <- lapply(c("canopy_cov", "veg_cov", "dwd_cov", "fwd_cov", "size_cl", "char_cl", "avg_volume"), function(var) {
kruskal.test(dat[[var]] ~ dat2$trt)
})
names(kruskal_results) <- c("canopy_cov", "veg_cov", "dwd_cov", "fwd_cov", "size_cl", "char_cl", "avg_volume")
kruskal_results
dunnTest(dat$canopy_cov ~ dat2$trt, method = "bonferroni")
install.packages("dunn.test")
library(dunn.test)
dunnTest(dat$canopy_cov ~ dat2$trt, method = "bonferroni")
dunn.Test(dat$canopy_cov ~ dat2$trt, method = "bonferroni")
install.packages("FSA")  # Install FSA package
library(FSA)  # Load FSA package
dunnTest(dat$canopy_cov ~ dat2$trt, method = "bonferroni")
# Run Dunn's test for each variable
dunn_results <- lapply(c("canopy_cov", "veg_cov", "dwd_cov", "fwd_cov", "size_cl", "char_cl", "avg_volume"), function(var) {
kruskal_test <- kruskal.test(dat[[var]] ~ dat2$trt)  # Kruskal-Wallis test for each variable
if (kruskal_test$p.value < 0.05) { # Apply Dunn's test if Kruskal-Wallis is significant
return(dunnTest(dat[[var]] ~ dat2$trt, kw=TRUE))  # Dunn's test
} else {
return(NULL)  # If Kruskal-Wallis is not significant, return NULL
}
})
dunn_results
dunn_results
dunn_results[[1]]
names(dunn_results)
names(dunn_results) <- c("canopy_cov", "veg_cov", "dwd_cov", "fwd_cov", "size_cl", "char_cl", "avg_volume")
dunn_results
# View Tukey HSD results
names(tukey_results) <- c("temp_sq", "soil_moist", "dwd_count", "decay_cl")
tukey_results
dunn_results
anova_results <- lapply(c("temp_sq", "soil_moist", "dwd_count", "decay_cl"), function(var) {
model <- aov(dat[[var]] ~ dat2$trt)
summary(model)
})
names(anova_results) <- c("temp_sq", "soil_moist", "dwd_count", "decay_cl")
anova_results
