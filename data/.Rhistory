library(vegan)
library(rpart)
library(rpart.plot)
library(party)
library(randomForest)
library(ggplot2)
#setwd("C:/Users/jasmi/OneDrive/Documents/Academic/OSU/Git/multivariate-analysis")
setwd("~/Library/CloudStorage/OneDrive-Personal/Documents/Academic/OSU/Git/multivariate-analysis")
source("Biostats.R")
dat <- read.csv("Harney_Fishes_2007.csv", row.names = 1)
spp_N <- colSums(dat[,16:ncol(dat)])
spp_0 <- subset(spp_N, spp_N == 0)
omit <- names(spp_0)
dat2 <- dat[,!(colnames(dat) %in% omit)]
dat3 <- dat2[rowSums(dat2[,16:ncol(dat2)]) >0, ]
dat3$Herbaceous[is.na(dat3$Herbaceous)] <- 0
dat3$Ann_Herb[is.na(dat3$Ann_Herb)] <- 0
dat3 <- dat3[complete.cases(dat3$SiteLength),]
dat_final <- dat3
fish <- dat_final[,16:ncol(dat_final)]
env <- dat_final[,1:15]
fish_red <- drop.var(fish, min.fo=1)
fish_dens <- fish_red
for(i in 1:nrow(fish_red)){
fish_dens[i,] <- fish_red[i,]/dat_final$SiteLength[i]
}
fish_dens_log <- log(fish_dens + 1)
drop <- c("Latitude","Longitude","SiteLength","SiteWidth","SurfaceArea")
env <- env[,!(colnames(env) %in% drop)]
env_cont <- env[,!(colnames(env) %in% c("SMU","Pop","NLCD_Cat"))]
env <- env[,!(colnames(env) %in% c("Ave_Max_D","Ann_Herb"))]
env_cont <- env_cont[,!(colnames(env_cont) %in% c("Ave_Max_D","Ann_Herb"))]
Trout_PA <- ifelse(fish$TROUT_RB > 0, "Present", "Absent")
Trout.tree <- rpart(Trout_PA ~ ., data=env_cont, minsplit=2, xval=5)
rpart.plot(Trout.tree)
plotcp(Trout.tree)
Trout.tree.prune <- prune(Trout.tree, 0.076)
rpart.plot(Trout.tree.prune)
Trout.tree2 <- rpart(fish$TROUT_RB ~ ., data=env_cont, minsplit=2, xval=5)
rpart.plot(Trout.tree2)
plotcp(Trout.tree2)
Trout.tree2.prune <- prune(Trout.tree2, 0.06)
rpart.plot(Trout.tree2.prune)
Trout.forest <- randomForest(as.factor(Trout_PA) ~ ., data=env_cont, ntree = 5000, mtry = 5, importance=TRUE, keep.forest=FALSE, na.action=na.omit)
Trout.forest
varImpPlot(Trout.forest)
ForestData <- as.data.frame(importance(Trout.forest))
ForestData <- ForestData[order(ForestData[,1]),]
ForestData$Var.Names <- row.names(ForestData)
colnames(ForestData) <- c("Absent","Present","MeanDec","IncNodePurity","Var.Names")
ForestData
ggplot(ForestData, aes(x=Var.Names, y=MeanDec)) +
geom_segment( aes(x=Var.Names, xend=Var.Names, y=0, yend=MeanDec), color="skyblue") +
geom_point(aes(size = IncNodePurity), color="blue", alpha=0.6) +
theme_light() +
coord_flip() +
theme(
legend.position="bottom",
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
Trout.forest2 <- randomForest(fish$TROUT_RB ~ ., data=env_cont, ntree = 5000, mtry = 5, importance=TRUE, keep.forest=FALSE, na.action=na.omit)
Trout.forest2
ForestData <- as.data.frame(importance(Trout.forest2))
ForestData <- ForestData[order(ForestData[,1]),]
ForestData$Var.Names <- row.names(ForestData)
colnames(ForestData) <- c("MeanDec","IncNodePurity","Var.Names")
ForestData
ggplot(ForestData, aes(x=Var.Names, y=MeanDec)) +
geom_segment( aes(x=Var.Names, xend=Var.Names, y=0, yend=MeanDec), color="skyblue") +
geom_point(aes(size = IncNodePurity), color="blue", alpha=0.6) +
theme_light() +
coord_flip() +
theme(
legend.position="bottom",
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
varImpPlot(Trout.forest)
Trout.forest
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Library/CloudStorage/OneDrive-Personal/Documents/Academic/OSU/Git/multivariate-analysis")
library(vegan)
library(viridis)
library(MASSExtra)
library(ade4)
source("biostats.R")
#site-level data
#dat <- readRDS("C:/Users/jasmi/OneDrive/Documents/Academic/OSU/Git/oss-occu/data/site_level_matrix.rds")
dat <- readRDS("~/Library/CloudStorage/OneDrive-Personal/Documents/Academic/OSU/Git/oss-occu/data/site_level_matrix.rds")
row.names(dat) <- dat[,1]
#dat2 <- subset(dat, year=="2024")
sals <- dat[26:27]
env <- dat[1:25]
drop <- c("lat","long","stand","tree_farm","landowner","site_id","year","weather")
env <- env[,!(colnames(env) %in% drop)]
env_cont <- env[,-1]
drop <- c("jul_date","veg_cov","fwd_cov","dwd_count","size_cl","decay_cl","char_cl","length_cl" )
env_subset <- env_cont[,!(colnames(env_cont) %in% drop)]
View(sals)
oss_PA <- ifelse(sals$oss > 0, "Present", "Absent")
oss.tree <- rpart(oss_PA ~ ., data=env_subset, minsplit=2, xval=5)
rpart.plot(oss.tree)
plotcp(oss.tree)
oss.tree.prune <- prune(oss.tree, 0.044)
rpart.plot(oss.tree.prune)
oss.forest <- randomForest(as.factor(oss_PA) ~ ., data=env_subset, ntree = 5000, mtry = 5, importance=TRUE, keep.forest=FALSE, na.action=na.omit)
oss.forest
oss.forest
sqrt(8)
oss.forest <- randomForest(as.factor(oss_PA) ~ ., data=env_subset, ntree = 2000, mtry = 3, importance=TRUE, keep.forest=FALSE, na.action=na.omit)
oss.forest
varImpPlot(oss.forest)
ForestData <- as.data.frame(importance(oss.forest))
ForestData <- ForestData[order(ForestData[,1]),]
ForestData$Var.Names <- row.names(ForestData)
colnames(ForestData) <- c("Absent","Present","MeanDec","IncNodePurity","Var.Names")
ForestData
ggplot(ForestData, aes(x=Var.Names, y=MeanDec)) +
geom_segment( aes(x=Var.Names, xend=Var.Names, y=0, yend=MeanDec), color="skyblue") +
geom_point(aes(size = IncNodePurity), color="blue", alpha=0.6) +
theme_light() +
coord_flip() +
theme(
legend.position="bottom",
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
oss_PA <- ifelse(sals$oss > 0, "Present", "Absent")
oss.tree <- rpart(oss_PA ~ ., data=env_subset, minsplit=2, xval=5)
rpart.plot(oss.tree)
plotcp(oss.tree)
oss.tree.prune <- prune(oss.tree, 0.044)
rpart.plot(oss.tree.prune)
oss.forest <- randomForest(as.factor(oss_PA) ~ ., data=env_subset, ntree = 5000, mtry = 5, importance=TRUE, keep.forest=FALSE, na.action=na.omit)
oss.forest
table(oss_PA)
importance(oss.forest)
varImpPlot(oss.forest)
ForestData <- as.data.frame(importance(oss.forest))
ForestData <- ForestData[order(ForestData[,1]),]
ForestData$Var.Names <- row.names(ForestData)
colnames(ForestData) <- c("Absent","Present","MeanDec","IncNodePurity","Var.Names")
ForestData
ggplot(ForestData, aes(x=Var.Names, y=MeanDec)) +
geom_segment( aes(x=Var.Names, xend=Var.Names, y=0, yend=MeanDec), color="skyblue") +
geom_point(aes(size = IncNodePurity), color="blue", alpha=0.6) +
theme_light() +
coord_flip() +
theme(
legend.position="bottom",
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
install.packages("tinytex")
tinytex::install_tinytex()
install.packages("tinytex")
tinytex::install_tinytex()
install.packages("tinytex", dependencies = TRUE)
remove.packages("tinytex")
install.packages("tinytex")
tinytex::install_tinytex()
rm(list=ls())
setwd("~/Library/CloudStorage/OneDrive-Personal/Documents/Academic/OSU/Git/oss-occu/data")
library(dplyr)
library(tidyr)
library(vegan)
library(pastecs)
library(corrplot)
library(ggplot2)
library(gridExtra)
source("~/Library/CloudStorage/OneDrive-Personal/Documents/Academic/OSU/Git/multivariate-analysis/biostats.R")
dat2 <- read.csv("sites_with_aspect.csv")
#site-level data
dat <- readRDS("site_level_matrix.rds")
View(dat2)
View(dat)
dat <- read.csv("sites_with_aspect.csv") #switched to this df on 01/25 when i added aspect from DEM
row.names(dat) <- dat[,1]
View(dat)
env <- dat[c(1:25,28)]
View(env)
#extra dwd metrics
dwd <- read.csv("dwd.extra.metrics.csv")
#env cont
drop <- c("lat","long","stand","tree_farm","landowner","year","weather","trt","jul_date","elev","site_id")
env_sub <- env[,!(colnames(env) %in% drop)]
#add dwd dens and avg volume from dwd to env df
env_merge <- cbind(env_sub, dwd[,c("dwd_dens","avg_volume")])
View(env_merge)
View(env_sub)
View(env_merge)
env.zscore <- decostand(env_merge, "standardize") #Z-scores the data in each column
P.corr <- cor(env_merge, method = "pearson", use = "complete.obs")
corrplot(P.corr,
type = "upper",
order = "hclust",
tl.col = "black",
tl.srt = 45)
drop <- c("hum","stumps","dwd_dens","logs")
env_subset_corr <- env_merge[,!(colnames(env_merge) %in% drop)]
env_corr <- cor(env_subset_corr, method = "pearson", use = "complete.obs")
corrplot(env_corr,
type = "upper",
order = "hclust",
tl.col = "black",
tl.srt = 45)
env_subset_corr <- env_subset_corr[,!colnames(env_subset_corr) %in% "length_cl"]
corr3 <- cor(env_subset_corr, method = "pearson", use = "complete.obs")
corrplot(corr3,
type = "upper",
order = "hclust",
tl.col = "black",
tl.srt = 45)
# Set a threshold
threshold <- 0.5
# Get pairs with correlation above the threshold
cor_pairs <- which(abs(corr3) > threshold, arr.ind = TRUE)
# Filter to keep only unique pairs (avoid duplicates and self-correlations)
cor_pairs <- cor_pairs[cor_pairs[, 1] < cor_pairs[, 2], ]
# Display the variable pairs and their correlation values
result <- data.frame(
Var1 = rownames(corr3)[cor_pairs[, 1]],
Var2 = colnames(corr3)[cor_pairs[, 2]],
Correlation = corr3[cor_pairs]
)
result
write.csv(env_subset_corr, "~/Library/CloudStorage/OneDrive-Personal/Documents/Academic/OSU/Git/oss-occu/data/env_subset_corr.csv",
row.names = FALSE)
