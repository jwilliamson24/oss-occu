rain_event = ifelse(precip_mm > 0, as.Date(merged_data$date_mdy), NA)  # Mark rain event dates
) %>%
ungroup()
# Check the result
head(merged_data)
# Step 2: Propagate the last rain date using na.locf
merged_data <- merged_data %>%
group_by(site_id) %>%
mutate(
# Fill missing rain event dates with the previous non-NA value (i.e., last rain date)
last_rain_date = zoo::na.locf(rain_event, na.rm = FALSE, fromLast = FALSE)
) %>%
ungroup()
# Step 3: Calculate the days since the last rain (if last_rain_date is not NA)
merged_data <- merged_data %>%
mutate(
days_since_rain = ifelse(!is.na(last_rain_date), as.numeric(difftime(date_mdy, last_rain_date, units = "days")), NA)
)
# Check the result
head(merged_data)
### try calculating time since rain from the daily precip df that only has site id, date, and precip amount
## then merge back with site with the new addt cols for time since precip
trialdf <- daily_precip_data
View(trialdf)
trial_df <- trial_df %>%
group_by(site_id) %>%
mutate(
rain_event = ifelse(precip_mm > 0, as.Date(trial_df$date_mdy), NA)  # Mark rain event dates
) %>%
ungroup()
### try calculating time since rain from the daily precip df that only has site id, date, and precip amount
## then merge back with site with the new addt cols for time since precip
trial_df <- daily_precip_data
trial_df <- trial_df %>%
group_by(site_id) %>%
mutate(
rain_event = ifelse(precip_mm > 0, as.Date(trial_df$date_mdy), NA)  # Mark rain event dates
) %>%
ungroup()
# Check the result
head(trial_df)
# Step 2: Propagate the last rain date using na.locf
trial_df <- trial_df %>%
group_by(site_id) %>%
mutate(
# Fill missing rain event dates with the previous non-NA value (i.e., last rain date)
last_rain_date = zoo::na.locf(rain_event, na.rm = FALSE, fromLast = FALSE)
) %>%
ungroup()
# Step 3: Calculate the days since the last rain (if last_rain_date is not NA)
trial_df <- trial_df %>%
mutate(
days_since_rain = ifelse(!is.na(last_rain_date), as.numeric(difftime(date_mdy, last_rain_date, units = "days")), NA)
)
# Check the result
head(trial_df)
View(trial_df)
### try calculating time since rain from the daily precip df that only has site id, date, and precip amount
## then merge back with site with the new addt cols for time since precip
trial_df <- daily_precip_data
trial_df <- trial_df %>%
group_by(site_id) %>%
mutate(
rain_event = ifelse(precip_mm > 0, as.Date(trial_df$date_mdy), NA)  # Mark rain event dates
) %>%
ungroup()
trial_df <- trial_df %>%
group_by(site_id) %>%
mutate(
rain_event = ifelse(precip_mm >= 1, 1, 0)  # Mark rain event dates
) %>%
ungroup()
trial_df$precip_mm <- round(trial_df$precip_mm,2)
trial_df <- trial_df %>%
group_by(site_id) %>%
mutate(
rain_event = ifelse(precip_mm >= 1, 1, 0)  # Mark rain event dates
) %>%
ungroup()
head(trial_df)
# Compute last rain date
trial_df <- trial_df %>%
group_by(site_id) %>%  # Group by site
arrange(date_mdy) %>%  # Ensure chronological order
mutate(last_rain_date = ifelse(rain_event == 0, lag(date_mdy[which(rain_event == 1)], default = NA), NA))
trial_df$date_mdy <- as.Date(trial_df$date_mdy)
trial_df <- trial_df %>%
group_by(site_id) %>%
arrange(date_mdy) %>%
mutate(last_rain_date = as.Date(ifelse(rain_event == 0,
max(date_mdy[rain_event == 1 & date_mdy < date_mdy], na.rm = TRUE),
NA), origin = "1970-01-01"))
trial_df <- daily_precip_data
trial_df$precip_mm <- round(trial_df$precip_mm,2) # round precip to 2 decimal places
trial_df <- trial_df %>%
group_by(site_id) %>%
mutate(
rain_event = ifelse(precip_mm >= 1, 1, 0)  # rain 1mm or more = 1 (yes), <1mm = 0 (no)
) %>%
ungroup()
trial_df <- trial_df %>%
group_by(site_id) %>%
arrange(date_mdy) %>%
mutate(last_rain_date = as.Date(ifelse(rain_event == 0,
max(date_mdy[rain_event == 1 & date_mdy < date_mdy], na.rm = TRUE),
NA), origin = "1970-01-01"))
trial_df <- daily_precip_data
trial_df$precip_mm <- round(trial_df$precip_mm,2) # round precip to 2 decimal places
trial_df <- trial_df %>%
group_by(site_id) %>%
mutate(
rain_event = ifelse(precip_mm >= 1, 1, 0)  # rain 1mm or more = 1 (yes), <1mm = 0 (no)
) %>%
ungroup()
trial_df$date_mdy <- as.Date(trial_df$date_mdy)
# Compute last rain date
trial_df <- trial_df %>%
group_by(site_id) %>%  # Group by site
arrange(date_mdy) %>%  # Ensure chronological order
mutate(last_rain_date = ifelse(rain_event == 0, lag(date_mdy[which(rain_event == 1)], default = NA), NA))
head(trial_df)
trial_df$last_rain_date <- as.Date(trial_df$last_rain_date, origin = "1970-01-01")
# Step 3: Calculate the days since the last rain (if last_rain_date is not NA)
trial_df <- trial_df %>%
mutate(
days_since_rain = ifelse(!is.na(last_rain_date), as.numeric(difftime(date_mdy, last_rain_date, units = "days")), NA)
)
trial_df <- trial_df %>%
group_by(site_id) %>%
arrange(date_mdy) %>%
mutate(last_rain_date = if_else(
rain_event == 0,
as.Date(sapply(date_mdy, function(d) max(date_mdy[rain_event == 1 & date_mdy < d], na.rm = TRUE)), origin = "1970-01-01"),
NA_Date_
))
dates_needed <- seq(as.Date("2023-02-10"), as.Date("2023-06-10"), by = "day") #vector with all dates from mar 10 - jun 10 2023
#dates_needed <-unique(site_sub$date_mdy) # make list of survey dates that we need data for
get_prism_dailys(type = "ppt", dates = dates_needed, keepZip = FALSE) # get daily precip
# store files
raster_files <- list.files("~/Library/CloudStorage/OneDrive-Personal/Documents/Academic/OSU/Git/oss-occu/data/prism", pattern = "*.bil", full.names = TRUE)
# Get list of subdirectories that were stored (each day folder)
prism_folders <- list.dirs("~/Library/CloudStorage/OneDrive-Personal/Documents/Academic/OSU/Git/oss-occu/data/prism", full.names = TRUE, recursive = FALSE)
# Get list of only .bil files within each folder
bil_files <- lapply(prism_folders, function(folder) {
list.files(folder, pattern = "\\.bil$", full.names = TRUE)
})
# Get list of all PRISM .bil files (daily precipitation)
bil_files_all <- unlist(lapply(prism_folders, function(folder) {
list.files(folder, pattern = "\\.bil$", full.names = TRUE)
}))
# Extract date from filenames (containing YYYYMMDD)
bil_files <- unlist(bil_files) #unlist to turn into a vector of .bil file paths
bil_dates <- as.Date(sub(".*_(\\d{8})_bil\\.bil$", "\\1", bil_files), format = "%Y%m%d")
# Initialize empty dataframe for daily precipitation per site
daily_precip_data <- data.frame()
for (i in seq_along(bil_files)) {
r <- rast(bil_files[i])  # Load raster for a specific date
# Extract precip values for site locations
precip_values <- extract(r, site_sub[, c("long", "lat")])
# Store results
daily_precip_data <- rbind(daily_precip_data,
data.frame(site_id = site_sub$site_id,
date = bil_dates[i],
precip_mm = precip_values[, 2]))  # Adjust column index if needed
}
# Save daily precipitation data for future use
write.csv(daily_precip_data, "daily_precip_data.csv", row.names = FALSE)
# Rename date column for merging
daily_precip_data <- daily_precip_data %>%
rename(date_mdy = date)
daily_precip_data$date_mdy <- as.Date(daily_precip_data$date_mdy)
### try calculating time since rain from the daily precip df that only has site id, date, and precip amount
## then merge back with site with the new addt cols for time since precip
trial_df <- daily_precip_data
trial_df <- trial_df %>%
group_by(site_id) %>%
mutate(
rain_event = ifelse(precip_mm > 0, as.Date(trial_df$date_mdy), NA)  # Mark rain event dates
) %>%
ungroup()
trial_df <- daily_precip_data
trial_df$precip_mm <- round(trial_df$precip_mm,2) # round precip to 2 decimal places
trial_df <- trial_df %>%
group_by(site_id) %>%
mutate(
rain_event = ifelse(precip_mm >= 1, 1, 0)  # rain 1mm or more = 1 (yes), <1mm = 0 (no)
) %>%
ungroup()
head(trial_df)
# Compute last rain date
trial_df <- trial_df %>%
group_by(site_id) %>%  # Group by site
arrange(date_mdy) %>%  # Ensure chronological order
mutate(last_rain_date = ifelse(
rain_event == 0, lag(date_mdy[which(rain_event == 1)], default = NA), NA))
# convert to YYYY-MM-DD date
trial_df$last_rain_date <- as.Date(trial_df$last_rain_date, origin = "1970-01-01")
# Step 3: Calculate the days since the last rain (if last_rain_date is not NA)
trial_df <- trial_df %>%
mutate(
days_since_rain = ifelse(!is.na(last_rain_date), as.numeric(difftime(date_mdy, last_rain_date, units = "days")), NA)
)
trial_df <- trial_df %>%
group_by(site_id) %>%
arrange(date_mdy) %>%
mutate(last_rain_date = if_else(
rain_event == 0,
as.Date(sapply(date_mdy, function(d) max(date_mdy[rain_event == 1 & date_mdy < d], na.rm = TRUE)), origin = "1970-01-01"),
NA_Date_
))
trial_df <- trial_df %>%
group_by(site_id) %>%
arrange(date_mdy) %>%
mutate(last_rain_date = if_else(
rain_event == 0,
as.Date(ifelse(any(rain_event == 1 & date_mdy < date_mdy),
max(date_mdy[rain_event == 1 & date_mdy < date_mdy], na.rm = TRUE),
NA), origin = "1970-01-01"),
NA_Date_
))
trial_df <- trial_df %>%
group_by(site_id) %>%
arrange(date_mdy) %>%
mutate(last_rain_date = if_else(
rain_event == 0,
as.Date(sapply(date_mdy, function(d) {
past_rains <- date_mdy[rain_event == 1 & date_mdy < d]  # Only previous rain events
if (length(past_rains) > 0) max(past_rains) else NA  # Select the most recent one
})),
NA_Date_
))
trial_df <- daily_precip_data
trial_df$precip_mm <- round(trial_df$precip_mm,2) # round precip to 2 decimal places
trial_df <- trial_df %>%
group_by(site_id) %>%
mutate(
rain_event = ifelse(precip_mm >= 1, 1, 0)  # rain 1mm or more = 1 (yes), <1mm = 0 (no)
) %>%
ungroup()
trial_df <- trial_df %>%
group_by(site_id) %>%  # Group by site
arrange(date_mdy) %>%  # Ensure chronological order
mutate(last_rain_date = ifelse(
rain_event == 0, lag(date_mdy[which(rain_event == 1)], default = NA), NA))
# convert to YYYY-MM-DD date
trial_df$last_rain_date <- as.Date(trial_df$last_rain_date, origin = "1970-01-01")
trial_df <- trial_df %>%
group_by(site_id) %>%
arrange(date_mdy) %>%
mutate(last_rain_date = if_else(
rain_event == 0,
as.Date(sapply(date_mdy, function(d) {
past_rains <- date_mdy[rain_event == 1 & date_mdy < d]  # Only previous rain events
if (length(past_rains) > 0) max(past_rains) else NA  # Select the most recent one
})),
NA_Date_
))
trial_df <- trial_df %>%
group_by(site_id) %>%
arrange(date_mdy) %>%
mutate(last_rain_date = if_else(
rain_event == 0,
as.Date(sapply(date_mdy, function(d) {
past_rains <- date_mdy[rain_event == 1 & date_mdy < d]  # Only previous rain events
if (length(past_rains) > 0) max(past_rains) else NA  # Select the most recent one
})),
NA_Date_
))
# Step 3: Calculate the days since the last rain (if last_rain_date is not NA)
trial_df <- trial_df %>%
mutate(
days_since_rain = ifelse(!is.na(last_rain_date), as.numeric(difftime(date_mdy, last_rain_date, units = "days")), NA)
)
trial_df <- daily_precip_data
trial_df$precip_mm <- round(trial_df$precip_mm,2) # round precip to 2 decimal places
# create rain event column - did it rain that day?
trial_df$rain_event <- ifelse(trial_df$precip_mm >= 1, 1, 0) # rain 1mm or more = 1 (yes), <1mm = 0 (no)
# Ensure data is sorted by site_id and date
trial_df <- trial_df[order(trial_df$site_id, trial_df$date_mdy), ]
# Initialize the new column with NA
trial_df$last_rain_date <- NA
# Loop through each row
for (i in seq_len(nrow(trial_df))) {
# Only fill last_rain_date for non-rain days
if (trial_df$rain_event[i] == 0) {
# Find the last rain event within the same site
past_rain_dates <- trial_df$date_mdy[trial_df$site_id == trial_df$site_id[i] &
trial_df$rain_event == 1 &
trial_df$date_mdy < trial_df$date_mdy[i]]
# Assign the most recent rain date (if any)
if (length(past_rain_dates) > 0) {
trial_df$last_rain_date[i] <- max(past_rain_dates)
}
}
}
# convert to YYYY-MM-DD date
trial_df$last_rain_date <- as.Date(trial_df$last_rain_date, origin = "1970-01-01")
class(trial_df$date_mdy)
class(trial_df$last_rain_date)
# Calculate days_since_rain
trial_df$days_since_rain <- ifelse(!is.na(trial_df$last_rain_date),
as.numeric(difftime(trial_df$date_mdy, trial_df$last_rain_date, units = "days")),
NA)
dates_needed23 <- seq(as.Date("2023-02-10"), as.Date("2023-06-10"), by = "day") #vector with all dates from mar 10 - jun 10 2023
dates_needed24 <- seq(as.Date("2024-02-10"), as.Date("2024-06-10"), by = "day")
#dates_needed <-unique(site_sub$date_mdy) # make list of survey dates that we need data for
dates_needed_all <- merge(dates_needed23,dates_needed24)
View(dates_needed_all)
#dates_needed <-unique(site_sub$date_mdy) # make list of survey dates that we need data for
dates_needed <- c(dates_needed23,dates_needed24)
get_prism_dailys(type = "ppt", dates = dates_needed, keepZip = FALSE) # get daily precip
# store files
raster_files <- list.files("~/Library/CloudStorage/OneDrive-Personal/Documents/Academic/OSU/Git/oss-occu/data/prism", pattern = "*.bil", full.names = TRUE)
# Get list of subdirectories that were stored (each day folder)
prism_folders <- list.dirs("~/Library/CloudStorage/OneDrive-Personal/Documents/Academic/OSU/Git/oss-occu/data/prism", full.names = TRUE, recursive = FALSE)
# Get list of only .bil files within each folder
bil_files <- lapply(prism_folders, function(folder) {
list.files(folder, pattern = "\\.bil$", full.names = TRUE)
})
site_sub$survey_date_str <- format(site_sub$date_mdy, "%Y%m%d")
# data frame to store precip data
precip_data <- data.frame(site_id = site_sub$site_id, survey_date = site_sub$date_mdy, precip_mm = NA)
# Initialize with NA to ensure all 127 rows are filled
precip_data$precip_mm <- rep(NA, nrow(site_sub))
# sequence each row in site_sub and attach the corresponding precip value by location and date
for (i in seq_len(nrow(site_sub))) {
date_str <- site_sub$survey_date_str[i]
if (!is.na(date_str)) {  # Check for NA
matching_file <- unlist(lapply(bil_files, function(x) grep(date_str, x, value = TRUE)))
if (length(matching_file) > 0) {
r <- terra::rast(matching_file)
precip_value <- terra::extract(r, site_sub[i, c("long", "lat")], ID = TRUE) # extract locations
if (!is.null(precip_value) && length(precip_value) > 0) {
precip_data$precip_mm[i] <- precip_value[, 2]  # Extract precip column
}
}
}
}
# add precip and survey date to the large site level df
merged <- cbind(dat,precip_data)
merged <- merged[,-29]
View(merged)
write.csv(merged, "~/Library/CloudStorage/OneDrive-Personal/Documents/Academic/OSU/Git/oss-occu/data/site_data_aspect_precip")
# Get list of all PRISM .bil files (daily precipitation)
bil_files_all <- unlist(lapply(prism_folders, function(folder) {
list.files(folder, pattern = "\\.bil$", full.names = TRUE)
}))
# Extract date from filenames (containing YYYYMMDD)
bil_files <- unlist(bil_files) #unlist to turn into a vector of .bil file paths
bil_dates <- as.Date(sub(".*_(\\d{8})_bil\\.bil$", "\\1", bil_files), format = "%Y%m%d")
# Initialize empty dataframe for daily precipitation per site
daily_precip_data <- data.frame()
for (i in seq_along(bil_files)) {
r <- rast(bil_files[i])  # Load raster for a specific date
# Extract precip values for site locations
precip_values <- extract(r, site_sub[, c("long", "lat")])
# Store results
daily_precip_data <- rbind(daily_precip_data,
data.frame(site_id = site_sub$site_id,
date = bil_dates[i],
precip_mm = precip_values[, 2]))  # Adjust column index if needed
}
# Save daily precipitation data for future use
write.csv(daily_precip_data, "daily_precip_data.csv", row.names = FALSE)
# Rename date column for merging
colnames(daily_precip_data)[colnames(daily_precip_data) == "date"] <- "date_mdy"
# Print the result to check the change
print(daily_precip_data)
daily_precip_data$precip_mm <- round(daily_precip_data$precip_mm,2) # round precip to 2 decimal places
daily_precip_data$date_mdy <- as.Date(daily_precip_data$date_mdy)
# Save daily precipitation data for future use
write.csv(daily_precip_data, "daily_precip_data.csv", row.names = FALSE)
trial_df <- daily_precip_data
trial_df$precip_mm <- round(trial_df$precip_mm,2) # round precip to 2 decimal places
# create rain event column - did it rain that day?
trial_df$rain_event <- ifelse(trial_df$precip_mm >= 1, 1, 0) # rain 1mm or more = 1 (yes), <1mm = 0 (no)
# Ensure data is sorted by site_id and date
trial_df <- trial_df[order(trial_df$site_id, trial_df$date_mdy), ]
# Initialize the new column with NA
trial_df$last_rain_date <- NA
# Loop through each row
for (i in seq_len(nrow(trial_df))) {
# Only fill last_rain_date for non-rain days
if (trial_df$rain_event[i] == 0) {
# Find the last rain event within the same site
past_rain_dates <- trial_df$date_mdy[trial_df$site_id == trial_df$site_id[i] &
trial_df$rain_event == 1 &
trial_df$date_mdy < trial_df$date_mdy[i]]
# Assign the most recent rain date (if any)
if (length(past_rain_dates) > 0) {
trial_df$last_rain_date[i] <- max(past_rain_dates)
}
}
}
# convert to YYYY-MM-DD date
trial_df$last_rain_date <- as.Date(trial_df$last_rain_date, origin = "1970-01-01")
# Ensure both are Date objects
trial_df$date_mdy <- as.Date(trial_df$date_mdy)
trial_df$last_rain_date <- as.Date(trial_df$last_rain_date)
# Calculate days_since_rain
trial_df$days_since_rain <- ifelse(!is.na(trial_df$last_rain_date),
as.numeric(difftime(trial_df$date_mdy, trial_df$last_rain_date, units = "days")),
NA)
rain_df <- daily_precip_data
# create rain event column - did it rain that day?
rain_df$rain_event <- ifelse(rain_df$precip_mm >= 1, 1, 0) # rain 1mm or more = 1 (yes), <1mm = 0 (no)
# Ensure data is sorted by site_id and date
rain_df <- rain_df[order(rain_df$site_id, rain_df$date_mdy), ]
# Initialize the new column with NA
rain_df$last_rain_date <- NA
# Loop through each row
for (i in seq_len(nrow(rain_df))) {
# Only fill last_rain_date for non-rain days
if (rain_df$rain_event[i] == 0) {
# Find the last rain event within the same site
past_rain_dates <- rain_df$date_mdy[rain_df$site_id == rain_df$site_id[i] &
rain_df$rain_event == 1 &
rain_df$date_mdy < rain_df$date_mdy[i]]
# Assign the most recent rain date (if any)
if (length(past_rain_dates) > 0) {
rain_df$last_rain_date[i] <- max(past_rain_dates)
}
}
}
# convert to YYYY-MM-DD date
rain_df$last_rain_date <- as.Date(rain_df$last_rain_date, origin = "1970-01-01")
# Ensure both are Date objects
rain_df$date_mdy <- as.Date(rain_df$date_mdy)
rain_df$last_rain_date <- as.Date(rain_df$last_rain_date)
# Calculate days_since_rain
rain_df$days_since_rain <- ifelse(!is.na(rain_df$last_rain_date),
as.numeric(difftime(rain_df$date_mdy, rain_df$last_rain_date, units = "days")),
NA)
View(rain_df)
merged_df <- left_join(site_sub, rain_df, by = c("site_id", "date_mdy")
merged_df <- left_join(site_sub, rain_df, by = c("site_id", "date_mdy"))
merged_df <- left_join(site_sub, rain_df, by = c("site_id", "date_mdy"))
View(merged_df)
ifelse?
?ifelse
merged_df$days_since_rain <- ifelse(merged_df$days_since_rain == "NA", 0, merged_df$days_since_rain)
View(merged_df)
merged_df$days_since_rain[is.na(merged_df$days_since_rain)] <- 0
merged_df$last_rain_date[is.na(merged_df$last_rain_date)] <- merged_df$date_mdy
merged_df <- left_join(site_sub, rain_df, by = c("site_id", "date_mdy"))
merged_df$days_since_rain[is.na(merged_df$days_since_rain)] <- 0
# Save
write.csv(merged_df, "site_rain_data.csv", row.names = FALSE)
View(merged)
View(precip_data)
View(rain_df)
View(merged_df)
View(rain_df)
View(dat)
# remove unnecessary rain cols
rain_df <- rain_df[,-c(4:5)]
# make NA = 0 days since rain
rain_df$days_since_rain[is.na(merged_df$days_since_rain)] <- 0
# make NA = 0 days since rain
rain_df$days_since_rain[is.na(rain_df$days_since_rain)] <- 0
ain_df <- daily_precip_data
# create rain event column - did it rain that day?
rain_df$rain_event <- ifelse(rain_df$precip_mm >= 1, 1, 0) # rain 1mm or more = 1 (yes), <1mm = 0 (no)
# Ensure data is sorted by site_id and date
rain_df <- rain_df[order(rain_df$site_id, rain_df$date_mdy), ]
# Initialize the new column with NA
rain_df$last_rain_date <- NA
# Loop through each row
for (i in seq_len(nrow(rain_df))) {
# Only fill last_rain_date for non-rain days
if (rain_df$rain_event[i] == 0) {
# Find the last rain event within the same site
past_rain_dates <- rain_df$date_mdy[rain_df$site_id == rain_df$site_id[i] &
rain_df$rain_event == 1 &
rain_df$date_mdy < rain_df$date_mdy[i]]
# Assign the most recent rain date (if any)
if (length(past_rain_dates) > 0) {
rain_df$last_rain_date[i] <- max(past_rain_dates)
}
}
}
# convert to YYYY-MM-DD date
rain_df$last_rain_date <- as.Date(rain_df$last_rain_date, origin = "1970-01-01")
# Ensure both are Date objects
rain_df$date_mdy <- as.Date(rain_df$date_mdy)
rain_df$last_rain_date <- as.Date(rain_df$last_rain_date)
# Calculate days_since_rain
rain_df$days_since_rain <- ifelse(!is.na(rain_df$last_rain_date),
as.numeric(difftime(rain_df$date_mdy, rain_df$last_rain_date, units = "days")),
NA)
# make NA = 0 days since rain
rain_df$days_since_rain[is.na(rain_df$days_since_rain)] <- 0
merged_df <- left_join(site_sub, rain_df, by = c("site_id", "date_mdy"))
# Save entire rain data frame
write.csv(merged_df, "site_rain_data.csv", row.names = FALSE)
# remove unnecessary rain cols
new_rain <- rain_df[,-c(4:5)]
View(new_rain)
# remove unnecessary rain cols
rain_merge <- rain_df[,-c(5:6)]
View(rain_merge)
merge <- cbind(dat,rain_merge)
View(merge)
names(merged_df)
# Keep only specific columns (e.g., "col1", "col2", "col3")
new_merged_df <- merged_df[c("site_id", "date_mdy", "precip_mm","days_since_rain")]
View(new_merged_df)
all_merged_df <- full_join(dat,new_merged_df, by = c("site_id","date_mdy"))
all_merged_df <- full_join(dat,new_merged_df, by = c("site_id"))
View(all_merged_df)
# save
write.csv(all_merged_df, "~/Library/CloudStorage/OneDrive-Personal/Documents/Academic/OSU/Git/oss-occu/data/site_aspect_precip_all_vars.csv")
