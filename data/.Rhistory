# set prior as normal distribution with a negative mean (mu = -1) and a moderate stdev (sd = 1).
oss.model <- nimbleCode ({
# Priors
# uninformative, vague priors
for(t in 1:n.treatments){
TreatmentIntercept[t] ~ dunif(-10,10)
#DetectionIntercept[t] ~ dunif(-5,5) # separate det int per treatment
}#t
DetectionIntercept ~ dunif(-5,5) # single det int
betaTemp ~ dunif(-5, 5)
betaTemp2 ~ dunif(-5, 0)
betaRain ~ dnorm(-1, 1) #days since rain and occu have slight negative relationship,
# set prior as normal distribution with a negative mean (mu = -1) and a moderate stdev (sd = 1).
# Likelihood
# Process/Biological model = Occupancy
# need two pieces: one defining psi(occu prob coeff) and covariates, and one defining z dist
for(i in 1:n.sites) {
logit(psi[i]) <- TreatmentIntercept[treatment[i]]  #psi=occupancy probability
z[i] ~ dbern(psi[i])  # z=1 if occupied, z=latent true occupancy
}#i
# Observation model = Detection
# need two pieces: one for p(det prob coeff) and one defining Y distribution
for(j in 1:n.obs) {
logit(p[j]) <- #DetectionIntercept[treatment[site[j]]] +
DetectionIntercept +
betaTemp*temp[j] +
betaTemp2*temp[j]^2 +
betaRain*days.since.rain[j]
#using temp as covariate with a quadratic relationship
#p=detection probability for site i and survey j
Y[j] ~ dbern(p[j] * z[site[j]]) #Y=my actual data observations
#z=1 or 0, turns this on or off
}#j
})
# Parameters monitored
parameters <- c("z","p","TreatmentIntercept","DetectionIntercept","betaTemp", "betaTemp2", "betaRain")
# MCMC Settings
ni <- 40000
nt <- 40
nb <- 20000
nc <- 3
# Data
nimble.data = list(Y=data$oss.obs,
temp=scaled_temp,
days.since.rain=data$days.since.rain)
nimble.constants = list(n.sites = length(unique(data$site)),
n.treatments = length(unique(data2$treatment)),
treatment=data2$treatment,
site=as.numeric(as.factor(data$site)),
n.obs = length(data$all.obs))
mcmc.output.3 <- nimbleMCMC(code = oss.model,
data = nimble.data,
constants=nimble.constants,
monitors = parameters,
niter = ni,
nburnin = nb,
nchains = nc,
thin=nt,
summary=TRUE,
samplesAsCodaMCMC = TRUE)
attach.nimble(mcmc.output.3$samples)
enes.model <- nimbleCode ({
# Priors
# uninformative, vague priors
for(t in 1:n.treatments){
TreatmentIntercept[t] ~ dunif(-10,10)
DetectionIntercept[t] ~ dunif(-5,5) # separate det int per treatment
}#t
#DetectionIntercept ~ dunif(-5,5) # single det intercept
betaTemp ~ dunif(-5, 5)
betaTemp2 ~ dunif(-5, 0)
#betaRain ~ dnorm(-1, 1)
# Likelihood
# Process/Biological model = Occupancy
# need two pieces: one defining psi(occu prob coeff) and covariates, and one defining z dist
for(i in 1:n.sites) {
logit(psi[i]) <- TreatmentIntercept[treatment[i]]  #psi=occupancy probability
z[i] ~ dbern(psi[i])  # z=1 if occupied, z=latent true occupancy
}#i
# Observation model = Detection
# need two pieces: one for p(det prob coeff) and one defining Y distribution
for(j in 1:n.obs) {
logit(p[j]) <-  DetectionIntercept[treatment[site[j]]] +
#DetectionIntercept +
betaTemp*temp[j] +
betaTemp2*temp[j]^2 #+
#betaRain*days.since.rain[j]
#using temp as covariate with a quadratic relationship
#p=detection probability for site i and survey j
Y[j] ~ dbern(p[j] * z[site[j]]) #Y=my actual data observations
#z=1 or 0, turns this on or off
}#j
})
# Parameters monitored
parameters <- c("z","p","TreatmentIntercept","DetectionIntercept","betaTemp", "betaTemp2")#, "betaRain")
# MCMC Settings
ni <- 80000
nt <- 80
nb <- 40000
nc <- 3
# Data
nimble.data = list(Y=data$enes.obs,
temp=scaled_temp)#,
nimble.constants = list(n.sites = length(unique(data$site)),
n.treatments = length(unique(data2$treatment)),
treatment=data2$treatment,
site=as.numeric(as.factor(data$site)),
n.obs = length(data$all.obs))
mcmc.output.4 <- nimbleMCMC(code = enes.model,
data = nimble.data,
constants=nimble.constants,
monitors = parameters,
niter = ni,
nburnin = nb,
nchains = nc,
thin=nt,
summary=TRUE,
samplesAsCodaMCMC = TRUE)
attach.nimble(mcmc.output.4$samples)
enes.det.prob <- inv.logit(DetectionIntercept)
enes.occu.prob <- inv.logit(TreatmentIntercept)
boxplot(det.probs.inv)
# Inverse logit the detection intercept to get detection probabilities
det.probs.inv <- inv.logit(DetectionIntercept)
boxplot(det.probs.inv)
View(enes.det.prob)
# Renaming and reordering the intercepts for the boxplot
enes.det.prob <- inv.logit(DetectionIntercept)
new.names <- c("Salvage Logged", "Wildfire", "Harvest, Wildfire", "Harvest", "Control")
colnames(enes.det.prob) <- new.names
desired.order <- c("Control", "Wildfire", "Harvest, Wildfire", "Harvest", "Salvage Logged")
box.colors <- c('lightgreen','steelblue', 'coral2', '#f9d62e', '#b967ff' )
#boxplot of Treatment Estimates - occu prob for each treatment
boxplot(enes.det.prob[, match(desired.order, colnames(enes.det.prob))],
main = "Detection Intercepts for ENES",
xlab = "Treatment", ylab = "Detection Probability",
col = box.colors)
rm(list=ls())
# oss model:
load("./oss_model.RData")
attach.nimble(mcmc.output.3$samples)
library(tidyr)
library(nimble)
library(ggplot2)
library(data.table)
library(tidyverse)
library(mcmcplots)
library(MCMCvis)
library(boot)
source('attach.nimble_v2.R')
attach.nimble(mcmc.output.3$samples)
oss.det.prob <- inv.logit(DetectionIntercept)
new.names <- c("Salvage Logged", "Wildfire", "Harvest, Wildfire", "Harvest", "Control")
colnames(oss.det.prob) <- new.names
desired.order <- c("Control", "Wildfire", "Harvest, Wildfire", "Harvest", "Salvage Logged")
box.colors <- c('lightgreen','steelblue', 'coral2', '#f9d62e', '#b967ff' )
#boxplot of Treatment Estimates - occu prob for each treatment
boxplot(oss.det.prob[, match(desired.order, colnames(treatment_matrix))],
main = "Treatment Intercepts for OSS",
xlab = "Treatment", ylab = "Detection Probability",
col = box.colors)
#boxplot of Treatment Estimates - occu prob for each treatment
boxplot(oss.det.prob[, match(desired.order, colnames(oss.det.prob))],
main = "Treatment Intercepts for OSS",
xlab = "Treatment", ylab = "Detection Probability",
col = box.colors)
oss.det.prob <- inv.logit(DetectionIntercept)
new.names <- c("Salvage Logged", "Wildfire", "Harvest, Wildfire", "Harvest", "Control")
colnames(oss.det.prob) <- new.names
desired.order <- c("Control", "Wildfire", "Harvest, Wildfire", "Harvest", "Salvage Logged")
box.colors <- c('lightgreen','steelblue', 'coral2', '#f9d62e', '#b967ff' )
#boxplot of Treatment Estimates - occu prob for each treatment
boxplot(oss.det.prob[, match(desired.order, colnames(oss.det.prob))],
main = "Treatment Intercepts for OSS",
xlab = "Treatment", ylab = "Detection Probability",
col = box.colors)
oss.det.prob <- inv.logit(DetectionIntercept)
oss.occu.prob <- inv.logit(TreatmentIntercept)
new.names <- c("Salvage Logged", "Wildfire", "Harvest, Wildfire", "Harvest", "Control") #treatments are numbered, need to give them names
colnames(oss.occu.prob) <- new.names
oss.occu.prob <- as.data.frame(oss.occu.prob)
oss.long <- gather(oss.occu.prob, key = "Treatment", value = "Occupancy_Probability") #reshape data to long format bc ggplot required
oss.long$Treatment <- factor(oss.long$Treatment,#specify treatment order for plot
levels = c("Control", "Wildfire", "Harvest, Wildfire", "Harvest", "Salvage Logged")) # Replace "DesiredOrder", "Treat1", etc., with your actual treatment names in the desired order
box.colors <- c('lightgreen','steelblue', 'coral2', '#f9d62e', '#b967ff' )
p <- ggplot(oss.long, aes(x = Treatment, y = Occupancy_Probability, fill = Treatment)) +
geom_boxplot() +
theme_classic() +
scale_fill_manual(values = box.colors) +
labs(title = "Treatment Intercepts for OSS", x = "Treatment", y = "Occupancy Probability") +
theme(plot.title = element_text(hjust = 0.5)) # Center the title
p
rm(list=ls())
# oss model:
load("./oss_model.RData")
# oss model:
oss_model <- load("./oss_model.RData")
attach.nimble(oss_model$samples)
source('attach.nimble_v2.R')
attach.nimble(oss_model$samples)
attach.nimble(mcmc.output.3$samples)
oss.occu.prob <- inv.logit(TreatmentIntercept)
oss.det.prob <- inv.logit(DetectionIntercept)
# enes model:
load("./enes_model.RData")
attach.nimble(mcmc.output.4$samples)
enes.occu.prob <- inv.logit(TreatmentIntercept)
enes.det.prob <- inv.logit(DetectionIntercept)
# detection data
oss.dets <- read.csv("oss.occu.wide.csv")
enes.dets <- read.csv("enes.occu.wide.csv")
# Compute naive occupancy: proportion of sites with at least one detection
oss_naive_occu <- mean(rowSums(oss.dets) > 0)
enes_naive_occu <- mean(rowSums(enes.dets) > 0)
# Identify which sites have at least one detection
oss_site_occupancy <- rowSums(oss.dets) > 0
# add occu to site and trt
site_subset$oss_occu <- oss_site_occupancy
oss_naive_occ_by_trt <- aggregate(oss_occu ~ treatment, data = site_subset, mean)
# site data
site <- read.csv("site.complete.csv")
site_subset <- subset(site[,c(1,5)])
# Compute naive occupancy: proportion of sites with at least one detection
oss_naive_occu <- mean(rowSums(oss.dets) > 0)
oss_naive_occu
enes_naive_occu <- mean(rowSums(enes.dets) > 0)
enes_naive_occu
# Identify which sites have at least one detection
oss_site_occupancy <- rowSums(oss.dets) > 0
# add occu to site and trt
site_subset$oss_occu <- oss_site_occupancy
oss_naive_occ_by_trt <- aggregate(oss_occu ~ treatment, data = site_subset, mean)
# Identify which sites have at least one detection
oss_site_occupancy <- rowSums(oss.dets) > 0
# add occu to site and trt
site_subset$oss_occu <- oss_site_occupancy
oss_naive_occ_by_trt <- aggregate(oss_occu ~ trt, data = site_subset, mean)
oss_naive_occ_by_trt
# Identify which sites have at least one detection
enes_site_occupancy <- rowSums(enes.dets) > 0
# add occu to site and trt
site_subset$enes_occu <- enes_site_occupancy
enes_naive_occ_by_trt <- aggregate(enes_occu ~ trt, data = site_subset, mean)
enes_naive_occ_by_trt
oss.occu.prob <- inv.logit(TreatmentIntercept)
colnames(oss.occu.prob) <- new.names
oss.occu.prob <- as.data.frame(oss.occu.prob)
new.names <- c("Salvage Logged", "Wildfire", "Harvest, Wildfire", "Harvest", "Control")
oss.occu.prob <- inv.logit(TreatmentIntercept)
colnames(oss.occu.prob) <- new.names
oss.occu.prob <- as.data.frame(oss.occu.prob)
oss.long <- gather(oss.occu.prob, key = "Treatment", value = "Occupancy_Probability") #reshape data to long format bc ggplot required
oss.long$Treatment <- factor(oss.long$Treatment,#specify treatment order for plot
levels = c("Control", "Wildfire", "Harvest, Wildfire", "Harvest", "Salvage Logged")) # Replace "DesiredOrder", "Treat1", etc., with your actual treatment names in the desired order
box.colors <- c('lightgreen','steelblue', 'coral2', '#f9d62e', '#b967ff' )
p <- ggplot(oss.long, aes(x = Treatment, y = Occupancy_Probability, fill = Treatment)) +
geom_boxplot() +
theme_classic() +
scale_fill_manual(values = box.colors) +
labs(title = "Treatment Intercepts for OSS", x = "Treatment", y = "Occupancy Probability") +
theme(plot.title = element_text(hjust = 0.5)) # Center the title
p
# oss model:
load("./oss_model.RData")
attach.nimble(mcmc.output.3$samples)
rm(list=ls())
# oss model:
load("./oss_model.RData")
attach.nimble(mcmc.output.3$samples)
source('attach.nimble_v2.R')
attach.nimble(mcmc.output.3$samples)
oss.occu.prob <- inv.logit(TreatmentIntercept) # Inverse logit the trt intercept to get occu probabilities
oss.det.prob <- inv.logit(DetectionIntercept) # Inverse logit the detection intercept to get det probabilities
oss.occu.prob <- inv.logit(TreatmentIntercept)
colnames(oss.occu.prob) <- new.names
oss.occu.prob <- as.data.frame(oss.occu.prob)
new.names <- c("Salvage Logged", "Wildfire", "Harvest, Wildfire", "Harvest", "Control")
colnames(oss.occu.prob) <- new.names
oss.occu.prob <- as.data.frame(oss.occu.prob)
oss.long <- gather(oss.occu.prob, key = "Treatment", value = "Occupancy_Probability") #reshape data to long format bc ggplot required
oss.long$Treatment <- factor(oss.long$Treatment,#specify treatment order for plot
levels = c("Control", "Wildfire", "Harvest, Wildfire", "Harvest", "Salvage Logged")) # Replace "DesiredOrder", "Treat1", etc., with your actual treatment names in the desired order
box.colors <- c('lightgreen','steelblue', 'coral2', '#f9d62e', '#b967ff' )
p <- ggplot(oss.long, aes(x = Treatment, y = Occupancy_Probability, fill = Treatment)) +
geom_boxplot() +
theme_classic() +
scale_fill_manual(values = box.colors) +
labs(title = "Treatment Intercepts for OSS", x = "Treatment", y = "Occupancy Probability") +
theme(plot.title = element_text(hjust = 0.5)) # Center the title
p
load("./oss_model.RData")
attach.nimble(mcmc.output.3$samples)
oss.occu.prob <- inv.logit(TreatmentIntercept) # Inverse logit the trt intercept to get occu probabilities
oss.det.prob <- inv.logit(DetectionIntercept) # Inverse logit the detection intercept to get det probabilities
# enes model:
load("./enes_model.RData")
attach.nimble(mcmc.output.4$samples)
enes.occu.prob <- inv.logit(TreatmentIntercept)
enes.det.prob <- inv.logit(DetectionIntercept)
oss.occu.prob <- inv.logit(TreatmentIntercept)
new.names <- c("Salvage Logged", "Wildfire", "Harvest, Wildfire", "Harvest", "Control")
colnames(oss.occu.prob) <- new.names
oss.occu.prob <- as.data.frame(oss.occu.prob)
oss.long <- gather(oss.occu.prob, key = "Treatment", value = "Occupancy_Probability") #reshape data to long format bc ggplot required
oss.long$Treatment <- factor(oss.long$Treatment,#specify treatment order for plot
levels = c("Control", "Wildfire", "Harvest, Wildfire", "Harvest", "Salvage Logged")) # Replace "DesiredOrder", "Treat1", etc., with your actual treatment names in the desired order
box.colors <- c('lightgreen','steelblue', 'coral2', '#f9d62e', '#b967ff' )
p <- ggplot(oss.long, aes(x = Treatment, y = Occupancy_Probability, fill = Treatment)) +
geom_boxplot() +
theme_classic() +
scale_fill_manual(values = box.colors) +
labs(title = "Treatment Intercepts for OSS", x = "Treatment", y = "Occupancy Probability") +
theme(plot.title = element_text(hjust = 0.5)) # Center the title
p
rm(list=ls())
setwd("~/Library/CloudStorage/OneDrive-Personal/Documents/Academic/OSU/Git/oss-occu/data")
library(ggplot2)
source('attach.nimble_v2.R')
## load and name data  ------------------------------------------------------------------------------------
# saved model outputs
# all species model:
# load("./all.spp_model_2.RData")
# oss model:
load("./oss_model.RData")
attach.nimble(mcmc.output.3$samples)
oss.occu.prob <- inv.logit(TreatmentIntercept) # Inverse logit the trt intercept to get occu probabilities
oss.det.prob <- inv.logit(DetectionIntercept) # Inverse logit the detection intercept to get det probabilities
# enes model:
load("./enes_model.RData")
attach.nimble(mcmc.output.4$samples)
enes.occu.prob <- inv.logit(TreatmentIntercept)
enes.det.prob <- inv.logit(DetectionIntercept)
new.names <- c("Salvage Logged", "Wildfire", "Harvest, Wildfire", "Harvest", "Control")
colnames(oss.occu.prob) <- new.names
oss.occu.prob <- as.data.frame(oss.occu.prob)
oss.long <- gather(oss.occu.prob, key = "Treatment", value = "Occupancy_Probability") #reshape data to long format bc ggplot required
oss.long$Treatment <- factor(oss.long$Treatment,#specify treatment order for plot
levels = c("Control", "Wildfire", "Harvest, Wildfire", "Harvest", "Salvage Logged")) # Replace "DesiredOrder", "Treat1", etc., with your actual treatment names in the desired order
box.colors <- c('lightgreen','steelblue', 'coral2', '#f9d62e', '#b967ff' )
p <- ggplot(oss.long, aes(x = Treatment, y = Occupancy_Probability, fill = Treatment)) +
geom_boxplot() +
theme_classic() +
scale_fill_manual(values = box.colors) +
labs(title = "Treatment Intercepts for OSS", x = "Treatment", y = "Occupancy Probability") +
theme(plot.title = element_text(hjust = 0.5)) # Center the title
p
new.names <- c("Salvage Logged", "Wildfire", "Harvest, Wildfire", "Harvest", "Control")
colnames(enes.occu.prob) <- new.names
enes.occu.prob <- as.data.frame(enes.occu.prob)
enes.long <- gather(enes.occu.prob, key = "Treatment", value = "Occupancy_Probability") #reshape data to long format bc ggplot required
#specify treatment order for plot
enes.long$Treatment <- factor(enes.long$Treatment,
levels = c("Control", "Wildfire", "Harvest, Wildfire", "Harvest", "Salvage Logged")) # Replace "DesiredOrder", "Treat1", etc., with your actual treatment names in the desired order
box.colors <- c('lightgreen','steelblue', 'coral2', '#f9d62e', '#b967ff' )
p2 <- ggplot(enes.long, aes(x = Treatment, y = Occupancy_Probability, fill = Treatment)) +
geom_boxplot() +
theme_classic() +
scale_fill_manual(values = box.colors) +
labs(title = "Treatment Intercepts for ENES", x = "Treatment", y = "Occupancy Probability") +
theme(plot.title = element_text(hjust = 0.5)) # Center the title
p2
oss.long <- read.csv("oss.occu.long.csv")
enes.long <- read.csv("enes.occu.long.csv")
oss.long$spp <- "OSS"
enes.long$spp <- "ENES"
combined_data <- rbind(enes.long, oss.long)
## boxplot
p3 <- ggplot(combined_data, aes(x = Treatment, y = Occupancy_Probability, fill = spp)) +
geom_boxplot(position = position_dodge(width = 0.75)) +  # Dodging for grouped boxplots
theme_classic() +
scale_fill_manual(values = c("#1f77b4", 'coral2')) +  # Use different colors for the species
labs(title = "Treatment Intercepts for Both Species", x = "Treatment", y = "Occupancy Probability") +
theme(plot.title = element_text(hjust = 0.5)) # Center the title
p3
View(combined_data)
site <- read.csv("site.complete.csv")
subplot <- read.csv("subplot.complete.csv")
sals <- read.csv("sals.complete.csv",
colClasses = c(landowner="factor", stand="character", trt="factor",
obs="factor", subplot="factor", recap="factor",
pass="factor", spp="factor", cover_obj="factor",
substrate="factor", age_class="factor"))
oss.dets <- read.csv("oss.occu.wide.csv")
enes.dets <- read.csv("enes.occu.wide.csv")
all.long <- read.csv("all.occu.long.csv")
oss.long <- read.csv("oss.occu.long.csv")
enes.long <- read.csv("enes.occu.long.csv")
# add df with precip data
env_subset_corr <- read.csv("env_subset_corr.csv")
## format data --------------------------------------------------------------------------------------------------
# we need two parts: one subplot-level matrix, and one site-level matrix
#### subplot-level matrix:
# "date" "site" "temp" "humidity" "soil.moist" "all.obs" "oss.obs" "enes.obs"
# subset and merge the various dataframes
subplot_subset <- subset(subplot[,c(8,1,9,18)]) #subset subplot variables
df1 <- subset(site[,c(1,10,11)]) #subset site variables
precip <- subset(env_subset_corr[,c(1,14)]) #subset precip to just site id and days since rain
colnames(precip)[1] <- "site_id"
#merge site subset with precip subset
df2 <- full_join(df1,precip,by="site_id")
dfmerge <- full_join(subplot_subset,df2,by="site_id") #merge site and subplot
#prev line joins temp and hum to subplot matrix, which automatically repeats the
#temp and hum in blank subplot cells from same site id for both years because
#its currently only listed for each site
#rename sal columns
colnames(oss.long)[3] <- "oss.obs"
colnames(enes.long)[3] <- "enes.obs"
colnames(all.long)[3] <- "all.obs"
#merge sal columns with env variables
merge1 <- merge(dfmerge, all.long, by=c("site_id","subplot"))
merge1 <- merge(merge1, oss.long, by=c("site_id","subplot"))
complete.merge <- merge(merge1,enes.long,by=c("site_id","subplot"))
colnames(complete.merge) <- c("site","subplot","date","soil.moist","temp",
"humidity","days.since.rain","all.obs","oss.obs","enes.obs")
#### site-level matrix:
# "site" and "treatment
site_subset <- subset(site[,c(1,5)])
site_subset$trt <- as.factor(site_subset$trt)
site_subset$trt <- as.numeric(site_subset$trt)
table(site_subset$trt)
colnames(site_subset)[2] <- "treatment"
#  1 = BS
#  2 = BU
#  3 = HB
#  4 = HU
#  5 = UU
## name data for model --------------------------------------------------------------------------------------------------
data <- complete.merge
data$all.obs <- as.numeric(data$all.obs)
data$oss.obs <- as.numeric(data$oss.obs)
data$enes.obs <- as.numeric(data$enes.obs)
data2 <- site_subset
table(data2$treatment)
scaled_temp <- c(scale(data$temp))
#how to treat days since rain as detection covariate? priors?
# ggplot(complete.merge, aes(x = days.since.rain, y = oss.obs)) +
#   geom_point(color = "blue", size = 2) +
#   geom_smooth(method = "lm", color = "red", se = TRUE)
# days since rain and occu have slight negative relationship,
# set prior as normal distribution with a negative mean (mu = -1) and a moderate stdev (sd = 1).
## OSS MODEL ------------------------------------------------------------------------------------------------
oss.long$spp <- "OSS"
enes.long$spp <- "ENES"
combined_data <- rbind(enes.long, oss.long)
View(combined_data)
p3 <- ggplot(combined_data, aes(x = trt, y = Occupancy_Probability, fill = spp)) +
geom_boxplot(position = position_dodge(width = 0.75)) +  # Dodging for grouped boxplots
theme_classic() +
scale_fill_manual(values = c("#1f77b4", 'coral2')) +  # Use different colors for the species
labs(title = "Treatment Intercepts for Both Species", x = "Treatment", y = "Occupancy Probability") +
theme(plot.title = element_text(hjust = 0.5)) # Center the title
p3
View(oss.dets)
View(oss.occu.prob)
library(ggplot2)
library(tidyr)
library(dplyr)
# Rename treatments
new.names <- c("Salvage Logged", "Wildfire", "Harvest, Wildfire", "Harvest", "Control")
# Convert OSS occupancy probabilities to a data frame and reshape
colnames(oss.occu.prob) <- new.names
oss.occu.long <- gather(as.data.frame(oss.occu.prob), key = "Treatment", value = "Occupancy_Probability")
oss.occu.long$Species <- "OSS"  # Add species identifier
# Convert ENES occupancy probabilities to a data frame and reshape
colnames(enes.occu.prob) <- new.names
enes.occu.long <- gather(as.data.frame(enes.occu.prob), key = "Treatment", value = "Occupancy_Probability")
enes.occu.long$Species <- "ENES"  # Add species identifier
# Combine both datasets
combined_data <- bind_rows(oss.occu.long, enes.occu.long)
View(combined_data)
# Ensure Treatment order is correct
combined_data$Treatment <- factor(combined_data$Treatment,
levels = c("Control", "Wildfire", "Harvest, Wildfire", "Harvest", "Salvage Logged"))
# Define colors
box.colors <- c('lightgreen','steelblue', 'coral2', '#f9d62e', '#b967ff')
# Create the plot
p <- ggplot(combined_data, aes(x = Treatment, y = Occupancy_Probability, fill = Treatment)) +
geom_boxplot() +
facet_wrap(~Species, scales = "free_y") +  # Separate plots for OSS and ENES
theme_classic() +
scale_fill_manual(values = box.colors) +
labs(title = "Occupancy Probability by Treatment for OSS and ENES",
x = "Treatment", y = "Occupancy Probability") +
theme(plot.title = element_text(hjust = 0.5))  # Center title
p
p <- ggplot(combined_data, aes(x = Treatment, y = Occupancy_Probability, fill = Species)) +
geom_boxplot(position = position_dodge(0.8)) +  # Dodge for side-by-side boxes
theme_classic() +
scale_fill_manual(values = c("OSS" = "blue", "ENES" = "red")) +
labs(title = "Occupancy Probability by Treatment for OSS and ENES",
x = "Treatment", y = "Occupancy Probability") +
theme(plot.title = element_text(hjust = 0.5))  # Center title
p
p3 <- ggplot(combined_data, aes(x = Treatment, y = Occupancy_Probability, fill = Treatment)) +
geom_boxplot() +
facet_wrap(~Species, scales = "free_y") +  # Separate plots for OSS and ENES
theme_classic() +
scale_fill_manual(values = box.colors) +
labs(title = "Occupancy Probability by Treatment for OSS and ENES",
x = "Treatment", y = "Occupancy Probability") +
theme(plot.title = element_text(hjust = 0.5))  # Center title
ggsave(filename = "faceted_spp_occu_prob.png", plot = p3, device = "png",
path = "~/Library/CloudStorage/OneDrive-Personal/Documents/Academic/OSU/Git/oss-occu/figures/06-rework-nimble-models",
width = 12, height = 6, units = "in", dpi = 300)
p4 <- ggplot(combined_data, aes(x = Treatment, y = Occupancy_Probability, fill = Species)) +
geom_boxplot(position = position_dodge(0.8)) +  # Dodge for side-by-side boxes
theme_classic() +
scale_fill_manual(values = c("OSS" = "steelblue", "ENES" = "coral2")) +
labs(title = "Occupancy Probability by Treatment for OSS and ENES",
x = "Treatment", y = "Occupancy Probability") +
theme(plot.title = element_text(hjust = 0.5))  # Center title
p4
