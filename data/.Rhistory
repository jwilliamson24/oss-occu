rm(list=ls())
#setwd("C:/Users/jasmi/OneDrive/Documents/Academic/OSU/Git/oss-occu/data")
setwd("~/Library/CloudStorage/OneDrive-Personal/Documents/Academic/OSU/Git/oss-occu/data")
library(nimble)
library(ggplot2)
library(data.table)
library(tidyverse)
library(mcmcplots)
library(MCMCvis)
library(boot)
source('attach.nimble_v2.R')
site <- read.csv("site.complete.csv")
subplot <- read.csv("subplot.complete.csv")
sals <- read.csv("sals.complete.csv",
colClasses = c(landowner="factor", stand="character", trt="factor",
obs="factor", subplot="factor", recap="factor",
pass="factor", spp="factor", cover_obj="factor",
substrate="factor", age_class="factor"))
oss.dets <- read.csv("oss.occu.wide.csv")
enes.dets <- read.csv("enes.occu.wide.csv")
all.long <- read.csv("all.occu.long.csv")
oss.long <- read.csv("oss.occu.long.csv")
enes.long <- read.csv("enes.occu.long.csv")
subplot_subset <- subset(subplot[,c(8,1,9,18)]) #subset subplot info
df1 <- subset(site[,c(1,10,11)]) #subset site info
dfmerge <- full_join(subplot_subset,df1,by="site_id") #merge site and subplot
#prev line joins temp and hum to subplot matrix, which automatically repeats the
#temp and hum in blank subplot cells from same site id for both years because
#its currently only listed for each site
colnames(oss.long)[3] <- "oss.obs"
colnames(enes.long)[3] <- "enes.obs"
colnames(all.long)[3] <- "all.obs"
merge1 <- merge(dfmerge, all.long, by=c("site_id","subplot"))
merge1 <- merge(merge1, oss.long, by=c("site_id","subplot"))
complete.merge <- merge(merge1,enes.long,by=c("site_id","subplot"))
colnames(complete.merge) <- c("site","subplot","date","soil.moist","temp",
"humidity","all.obs","oss.obs","enes.obs")
site_subset <- subset(site[,c(1,5)])
site_subset$trt <- as.factor(site_subset$trt)
site_subset$trt <- as.numeric(site_subset$trt)
table(site_subset$trt)
colnames(site_subset)[2] <- "treatment"
data <- complete.merge
#data$site <- as.numeric(data$site)
data$all.obs <- as.numeric(data$all.obs)
data$oss.obs <- as.numeric(data$oss.obs)
data$enes.obs <- as.numeric(data$enes.obs)
data2 <- site_subset
table(data2$treatment)
#  1 = BS
#  2 = BU
#  3 = HB
#  4 = HU
#  5 = UU
scaled_temp <- c(scale(data$temp))
oss.model <- nimbleCode ({
# Priors
# uninformative, vague priors
for(t in 1:n.treatments){
TreatmentIntercept[t] ~ dunif(-10,10)
}#t
DetectionIntercept ~ dunif(-5,5)
betaTemp ~ dunif(-5, 5)
betaTemp2 ~ dunif(-5, 0)
# Likelihood
# Process/Biological model = Occupancy
# need two pieces: one defining psi(occu prob coeff) and covariates, and one defining z dist
for(i in 1:n.sites) {
logit(psi[i]) <- TreatmentIntercept[treatment[i]]  #psi=occupancy probability
z[i] ~ dbern(psi[i])  # z=1 if occupied, z=latent true occupancy
}#i
# Observation model = Detection
# need two pieces: one for p(det prob coeff) and one defining Y distribution
for(j in 1:n.obs) {
logit(p[j]) <- DetectionIntercept + betaTemp*temp[j] + betaTemp2*temp[j]^2
#using temp as covariate with a quadratic relationship
#p=detection probability for site i and survey j
Y[j] ~ dbern(p[j] * z[site[j]]) #Y=my actual data observations
#z=1 or 0, turns this on or off
}#j
})
# Parameters monitored
parameters <- c("z","p","TreatmentIntercept","DetectionIntercept","betaTemp", "betaTemp2")
# MCMC Settings
ni <- 40000
nt <- 40
nb <- 20000
nc <- 3
# Data
nimble.data = list(Y=data$oss.obs,
temp=scaled_temp)
nimble.constants = list(n.sites = length(unique(data$site)),
n.treatments = length(unique(data2$treatment)),
treatment=data2$treatment,
site=as.numeric(as.factor(data$site)),
n.obs = length(data$all.obs))
mcmc.output.3 <- nimbleMCMC(code = oss.model,
data = nimble.data,
constants=nimble.constants,
monitors = parameters,
niter = ni,
nburnin = nb,
nchains = nc,
thin=nt,
summary=TRUE,
samplesAsCodaMCMC = TRUE)
attach.nimble(mcmc.output.3$samples)
# Gelman-Rubin diagnostic (AKA RHat or PSRF)
z <- mcmc.output.3$samples
g <- matrix(NA, nrow=nvar(z), ncol=2)
for (v in 1:nvar(z)) { g[v,] <- gelman.diag(z[,v])$psrf }
PSRF <- bind_cols(colnames(z$chain1),g) %>% rename(Parameter = ...1 ,PSRF = ...2 ,PSRFUpperCI = ...3)
PSRF # Values are below 1.05, so that's good
# Inverse logit the detection intercept to get detection probabilities
det.probs.inv <- inv.logit(DetectionIntercept)
hist(det.probs.inv)
# Looking at trace plots and parameter estimates
MCMCtrace(object = mcmc.output.3$samples,
pdf = FALSE, # no export to PDF
ind = TRUE, # separate density lines per chain
params = c("DetectionIntercept", "betaTemp", "TreatmentIntercept"))
mean(det.probs.inv) # = 0.26108
mean(det.probs.inv>0)  # = 1
median(det.probs.inv)  # = 0.2597028
boxplot(det.probs.inv)
# Inv logit TreatmentIntercept to get Occupancy Estimates
trt.int.inv <- inv.logit(TreatmentIntercept)
median(trt.int.inv[,1]) # 0.6392119    BS
median(trt.int.inv[,2]) # 0.8090534    BU
median(trt.int.inv[,3]) # 0.5784290    HB
median(trt.int.inv[,4]) # 0.6915276    HU
median(trt.int.inv[,5]) # 0.9920444    UU
# Renaming and reordering the treatment intercepts for the boxplot
# treatment_matrix <- TreatmentIntercept
trt.int.inv <- inv.logit(TreatmentIntercept)
treatment_matrix <- trt.int.inv # Using the inv logit treatment estimates
new.names <- c("Salvage Logged", "Wildfire", "Harvest, Wildfire", "Harvest", "Control")
colnames(treatment_matrix) <- new.names
desired.order <- c("Control", "Wildfire", "Harvest, Wildfire", "Harvest", "Salvage Logged")
box.colors <- c('lightgreen','steelblue', 'coral2', '#f9d62e', '#b967ff' )
#boxplot of Treatment Estimates - occu prob for each treatment
boxplot(treatment_matrix[, match(desired.order, colnames(treatment_matrix))],
main = "Treatment Intercepts for All Species",
xlab = "Treatment", ylab = "Occupancy Probability",
col = box.colors)
#define treatments using the inv logit treatment estimates
treatment_matrix <- trt.int.inv
#treatments are numbered, need to give them names
new.names <- c("Salvage Logged", "Wildfire", "Harvest, Wildfire", "Harvest", "Control")
colnames(treatment_matrix) <- new.names
treatment_matrix <- as.data.frame(treatment_matrix)
#reshape data to long format bc ggplot required
long_format <- gather(treatment_matrix, key = "Treatment", value = "Occupancy_Probability")
#specify treatment order for plot
long_format$Treatment <- factor(long_format$Treatment,
levels = c("Control", "Wildfire", "Harvest, Wildfire", "Harvest", "Salvage Logged")) # Replace "DesiredOrder", "Treat1", etc., with your actual treatment names in the desired order
box.colors <- c('lightgreen','steelblue', 'coral2', '#f9d62e', '#b967ff' )
p <- ggplot(long_format, aes(x = Treatment, y = Occupancy_Probability, fill = Treatment)) +
geom_boxplot() +
theme_classic() +
scale_fill_manual(values = box.colors) +
labs(title = "Treatment Intercepts for OSS", x = "Treatment", y = "Occupancy Probability") +
theme(plot.title = element_text(hjust = 0.5)) # Center the title
ggsave(filename = "oss_trt_occu_prob.png", plot = p, device = "png",
path = "C:/Users/jasmi/OneDrive/Documents/Academic/OSU/Git/oss-occu/figures/06-rework-nimble-models",
width = 10, height = 6, units = "in", dpi = 300)
p
library(tidyr)
enes.model <- nimbleCode ({
# Priors
# uninformative, vague priors
for(t in 1:n.treatments){
TreatmentIntercept[t] ~ dunif(-10,10)
}#t
DetectionIntercept ~ dunif(-5,5)
betaTemp ~ dunif(-5, 5)
betaTemp2 ~ dunif(-5, 0)
# Likelihood
# Process/Biological model = Occupancy
# need two pieces: one defining psi(occu prob coeff) and covariates, and one defining z dist
for(i in 1:n.sites) {
logit(psi[i]) <- TreatmentIntercept[treatment[i]]  #psi=occupancy probability
z[i] ~ dbern(psi[i])  # z=1 if occupied, z=latent true occupancy
}#i
# Observation model = Detection
# need two pieces: one for p(det prob coeff) and one defining Y distribution
for(j in 1:n.obs) {
logit(p[j]) <- DetectionIntercept + betaTemp*temp[j] + betaTemp2*temp[j]^2
#using temp as covariate with a quadratic relationship
#p=detection probability for site i and survey j
Y[j] ~ dbern(p[j] * z[site[j]]) #Y=my actual data observations
#z=1 or 0, turns this on or off
}#j
})
# Parameters monitored
parameters <- c("z","p","TreatmentIntercept","DetectionIntercept","betaTemp", "betaTemp2")
# MCMC Settings
ni <- 80000
nt <- 80
nb <- 40000
nc <- 3
# Data
nimble.data = list(Y=data$enes.obs,
temp=scaled_temp)
nimble.constants = list(n.sites = length(unique(data$site)),
n.treatments = length(unique(data2$treatment)),
treatment=data2$treatment,
site=as.numeric(as.factor(data$site)),
n.obs = length(data$all.obs))
mcmc.output.4 <- nimbleMCMC(code = enes.model,
data = nimble.data,
constants=nimble.constants,
monitors = parameters,
niter = ni,
nburnin = nb,
nchains = nc,
thin=nt,
summary=TRUE,
samplesAsCodaMCMC = TRUE)
attach.nimble(mcmc.output.4$samples)
mcmcplot(mcmc.output.4$samples)
# Renaming and reordering the treatment intercepts for the boxplot
trt.int.inv2 <- inv.logit(TreatmentIntercept)
treatment_matrix2 <- trt.int.inv2 # Using the inv logit treatment estimates
new.names <- c("Salvage Logged", "Wildfire", "Harvest, Wildfire", "Harvest", "Control")
colnames(treatment_matrix2) <- new.names
desired.order <- c("Control", "Wildfire", "Harvest, Wildfire", "Harvest", "Salvage Logged")
box.colors <- c('lightgreen','steelblue', 'coral2', '#f9d62e', '#b967ff' )
#boxplot of Treatment Estimates - occu prob for each treatment
boxplot(treatment_matrix2[, match(desired.order, colnames(treatment_matrix2))],
main = "Treatment Intercepts for All Species",
xlab = "Treatment", ylab = "Occupancy Probability",
col = box.colors)
#define treatments using the inv logit treatment estimates
treatment_matrix2 <- trt.int.inv2
#treatments are numbered, need to give them names
new.names <- c("Salvage Logged", "Wildfire", "Harvest, Wildfire", "Harvest", "Control")
colnames(treatment_matrix2) <- new.names
treatment_matrix2 <- as.data.frame(treatment_matrix2)
#reshape data to long format bc ggplot required
long_format2 <- gather(treatment_matrix2, key = "Treatment", value = "Occupancy_Probability")
#specify treatment order for plot
long_format2$Treatment <- factor(long_format2$Treatment,
levels = c("Control", "Wildfire", "Harvest, Wildfire", "Harvest", "Salvage Logged")) # Replace "DesiredOrder", "Treat1", etc., with your actual treatment names in the desired order
box.colors <- c('lightgreen','steelblue', 'coral2', '#f9d62e', '#b967ff' )
p2 <- ggplot(long_format2, aes(x = Treatment, y = Occupancy_Probability, fill = Treatment)) +
geom_boxplot() +
theme_classic() +
scale_fill_manual(values = box.colors) +
labs(title = "Treatment Intercepts for ENES", x = "Treatment", y = "Occupancy Probability") +
theme(plot.title = element_text(hjust = 0.5)) # Center the title
p2
long_format_1 <- gather(as.data.frame(treatment_matrix), key = "Treatment", value = "Occupancy_Probability")
long_format_1$Treatment <- factor(long_format_1$Treatment, levels = c("Control", "Wildfire", "Harvest, Wildfire", "Harvest", "Salvage Logged"))
long_format_1$Species <- "Species 1"  # Add a species column
treatment_matrix2 <- trt.int.inv2
colnames(treatment_matrix2) <- new.names
long_format_2 <- gather(as.data.frame(treatment_matrix2), key = "Treatment", value = "Occupancy_Probability")
long_format_2$Treatment <- factor(long_format_2$Treatment, levels = c("Control", "Wildfire", "Harvest, Wildfire", "Harvest", "Salvage Logged"))
long_format_2$Species <- "Species 2"  # Add a species column
## Combine both datasets
combined_data <- rbind(long_format_1, long_format_2)
long_format_1 <- gather(as.data.frame(treatment_matrix), key = "Treatment", value = "Occupancy_Probability")
long_format_1$Treatment <- factor(long_format_1$Treatment, levels = c("Control", "Wildfire", "Harvest, Wildfire", "Harvest", "Salvage Logged"))
long_format_1$Species <- "OSS"  # Add a species column
treatment_matrix2 <- trt.int.inv2
colnames(treatment_matrix2) <- new.names
long_format_2 <- gather(as.data.frame(treatment_matrix2), key = "Treatment", value = "Occupancy_Probability")
long_format_2$Treatment <- factor(long_format_2$Treatment, levels = c("Control", "Wildfire", "Harvest, Wildfire", "Harvest", "Salvage Logged"))
long_format_2$Species <- "ENES"  # Add a species column
## Combine both datasets
combined_data <- rbind(long_format_1, long_format_2)
## boxplot
box.colors <- c('lightgreen','steelblue', 'coral2', '#f9d62e', '#b967ff')
p <- ggplot(combined_data, aes(x = Treatment, y = Occupancy_Probability, fill = Species)) +
geom_boxplot(position = position_dodge(width = 0.75)) +  # Dodging for grouped boxplots
theme_classic() +
scale_fill_manual(values = c("#1f77b4", "#ff7f0e")) +  # Use different colors for the species
labs(title = "Treatment Intercepts for Both Species", x = "Treatment", y = "Occupancy Probability") +
theme(plot.title = element_text(hjust = 0.5)) # Center the title
p
p <- ggplot(combined_data, aes(x = Treatment, y = Occupancy_Probability, fill = Species)) +
geom_boxplot(position = position_dodge(width = 0.75)) +  # Dodging for grouped boxplots
theme_classic() +
scale_fill_manual(values = c("#1f77b4", 'coral2')) +  # Use different colors for the species
labs(title = "Treatment Intercepts for Both Species", x = "Treatment", y = "Occupancy Probability") +
theme(plot.title = element_text(hjust = 0.5)) # Center the title
p
p3 <- ggplot(combined_data, aes(x = Treatment, y = Occupancy_Probability, fill = Species)) +
geom_boxplot(position = position_dodge(width = 0.75)) +  # Dodging for grouped boxplots
theme_classic() +
scale_fill_manual(values = c("#1f77b4", 'coral2')) +  # Use different colors for the species
labs(title = "Treatment Intercepts for Both Species", x = "Treatment", y = "Occupancy Probability") +
theme(plot.title = element_text(hjust = 0.5)) # Center the title
ggsave(filename = "both_trt_occu_prob.png", plot = p3, device = "png",
path = "~/Library/CloudStorage/OneDrive-Personal/Documents/Academic/OSU/Git/oss-occu/figures/06-rework-nimble-models",
width = 10, height = 6, units = "in", dpi = 300)
