# Aggregate to data frame with one row for each treatment
trt_sal_counts <- aggregate(count ~ trt + spp, data = reshaped_spp_count, FUN = sum)
trt_sample_size <- as.data.frame(table(site$trt))
names(trt_sample_size) <- c("trt","sample_size")
trt_counts_merged <- merge(trt_sal_counts, trt_sample_size, by = "trt")
# Standardized counts = total observed sal count / number of sites sampled in that treatment
trt_counts_merged$stzd.count <- trt_counts_merged$count / trt_counts_merged$sample_size
trt_counts_merged$trt <- factor(trt_counts_merged$trt,
levels = c("UU", "BU", "HB", "HU", "BS"))
ggplot(trt_counts_merged, aes(x=trt, y=stzd.count, fill=trt, pattern=spp)) +
geom_bar(stat='identity', position='dodge', color="black") +
ggtitle('Salamander Counts by Treatment and Species') +
xlab('Treatment') +
ylab('Count') +
scale_fill_manual('Treatment', values=c('lightgreen','steelblue', 'coral2', '#f9d62e', '#b967ff' ))
ggplot(trt_counts_merged, aes(x=trt, y=stzd.count, fill=trt, color=spp)) +
geom_bar(stat='identity', position='dodge', color="black") +
ggtitle('Salamander Counts by Treatment and Species') +
xlab('Treatment') +
ylab('Count') +
scale_fill_manual('Treatment', values=c('lightgreen','steelblue', 'coral2', '#f9d62e', '#b967ff')+
scale_color_manual(values=c("red", "blue")
ggplot(trt_counts_merged, aes(x=trt, y=stzd.count, fill=trt, color=spp)) +
ggplot(trt_counts_merged, aes(x=trt, y=stzd.count, fill=trt, color=spp)) +
geom_bar(stat='identity', position='dodge', width=0.8) +
ggtitle('Salamander Counts by Treatment and Species') +
xlab('Treatment') +
ylab('Count') +
scale_fill_manual(values=c('lightgreen','steelblue', 'coral2', '#f9d62e', '#b967ff')) +
scale_color_manual(values=c("red", "blue", "green")) # Adjust colors for spp as needed
ggplot(trt_counts_merged, aes(x=trt, y=stzd.count, fill=trt, color=spp)) +
geom_bar(stat='identity', position='dodge', width=0.8) +
ggtitle('Salamander Counts by Treatment and Species') +
xlab('Treatment') +
ylab('Count') +
scale_fill_manual(values=c('lightgreen','steelblue', 'coral2', '#f9d62e', '#b967ff')) +
scale_color_manual(values=c("red", "blue"))
ggplot(trt_counts_merged, aes(x=trt, y=stzd.count, fill=trt, color=spp)) +
geom_bar(stat='identity', position='dodge', width=0.5) +
ggtitle('Salamander Counts by Treatment and Species') +
xlab('Treatment') +
ylab('Count') +
scale_fill_manual(values=c('lightgreen','steelblue', 'coral2', '#f9d62e', '#b967ff')) +
scale_color_manual(values=c("red", "blue"))
ggplot(trt_counts_merged, aes(x=trt, y=stzd.count, fill=trt, color=spp)) +
geom_bar(stat='identity', position='dodge', width=0.7) +
ggtitle('Salamander Counts by Treatment and Species') +
xlab('Treatment') +
ylab('Count') +
scale_fill_manual(values=c('lightgreen','steelblue', 'coral2', '#f9d62e', '#b967ff')) +
scale_color_manual(values=c("red", "blue"))
ggplot(trt_counts_merged, aes(x=trt, y=stzd.count, fill=trt, color=spp)) +
geom_bar(stat='identity', position='dodge', width=0.7) +
ggtitle('Salamander Counts by Treatment and Species') +
xlab('Treatment') +
ylab('Count') +
scale_fill_manual(values=c('lightgreen','steelblue', 'coral2', '#f9d62e', '#b967ff')) +
scale_color_manual(values=c("black", "pink"))
ggplot(trt_counts_merged, aes(x=trt, y=stzd.count, fill=trt, color=spp)) +
geom_bar(stat='identity', position='dodge', width=0.7) +
ggtitle('Salamander Counts by Treatment and Species') +
xlab('Treatment') +
ylab('Count') +
scale_fill_manual(values=c('lightgreen','steelblue', 'coral2', '#f9d62e', '#b967ff')) +
scale_color_manual(values=c("black"))
colors <- c("black")
ggplot(trt_counts_merged, aes(x=trt, y=stzd.count, fill=trt, color=spp)) +
geom_bar(stat='identity', position='dodge', width=0.7) +
ggtitle('Salamander Counts by Treatment and Species') +
xlab('Treatment') +
ylab('Count') +
scale_fill_manual(values=c('lightgreen','steelblue', 'coral2', '#f9d62e', '#b967ff')) +
scale_color_manual(values=colors)
# Create the plot
ggplot(trt_counts_merged, aes(x=trt, y=stzd.count, fill=trt, color=spp)) +
geom_bar(stat='identity', position='dodge', width=0.8, alpha=1) + # Set alpha to 1 for full opacity
ggtitle('Salamander Counts by Treatment and Species') +
xlab('Treatment') +
ylab('Count') +
scale_fill_manual(values=c('lightgreen','steelblue', 'coral2', '#f9d62e', '#b967ff')) + # Custom fill colors for treatments
scale_color_manual(values=c("black", "transparent")) # Specify black for one species and transparent for another
# Standardized barplot per treatment
png("C:/Users/jasmi/OneDrive/Documents/Academic/OSU/Git/oss-occu/figures/barplot_stzd_counts.png")
ggplot(trt_counts_merged, aes(x=trt, y=stzd.count, fill=trt, color=spp)) +
geom_bar(stat='identity', position='dodge', width=0.8, alpha=1) + # Set alpha to 1 for full opacity
ggtitle('Salamander Counts by Treatment and Species') +
xlab('Treatment') +
ylab('Count') +
scale_fill_manual(values=c('lightgreen','steelblue', 'coral2', '#f9d62e', '#b967ff')) + # Custom fill colors for treatments
scale_color_manual(values=c("black", "transparent")) # Specify black for one species and transparent for another
dev.off()
# Standardized barplot per treatment
png("C:/Users/jasmi/OneDrive/Documents/Academic/OSU/Git/oss-occu/figures/03-initial-figures/barplot_stzd_counts.png")
ggplot(trt_counts_merged, aes(x=trt, y=stzd.count, fill=trt, color=spp)) +
geom_bar(stat='identity', position='dodge', width=0.8, alpha=1) + # Set alpha to 1 for full opacity
ggtitle('Salamander Counts by Treatment and Species') +
xlab('Treatment') +
ylab('Count') +
scale_fill_manual(values=c('lightgreen','steelblue', 'coral2', '#f9d62e', '#b967ff')) + # Custom fill colors for treatments
scale_color_manual(values=c("black", "transparent")) # Specify black for one species and transparent for another
dev.off()
View(trt_counts_merged)
setwd("C:/Users/jasmi/OneDrive/Documents/Academic/OSU/Git/Occupancy-2023/Analysis Pleth Conf 2023")
counts <- read.csv("OSS_data_2023_counts.csv")
climate <- read.csv("OSS_data_2023_climate.csv")
treatmentcount <- read.csv("OSS_data_2023_treatmentcount.csv")
treatmentcount.species <- read.csv("treatmentcount.species.csv")
temp <- read.csv("OSS_data_2023_temp.csv")
View(counts)
View(sals)
days_count <- sals %>%
group_by(date_mdy, year, detect) %>%
summarize(n = n())
View(days_count)
days_count <- sals %>%
group_by(date_mdy, year, spp) %>%
summarize(n = n())
days_count <- sals %>%
group_by(date_mdy, year) %>%
summarize(n = n())
View(treatmentcount.species)
View(treatmentcount.species)
# Reshape the data for count by species
reshaped_data <- treatmentcount.species %>%
pivot_longer(cols = c(enes, oss), names_to = "species", values_to = "count")
View(reshaped_data)
View(counts)
View(days_count)
names(days_count) <- c("date","year","count")
barplot(counts$count,
space=1,
main="Counts by Date",
ylab="Daily Count",
xlab="month",
col=terrain.colors
(length(unique(counts$month)))
[as.factor(counts$month)])
head(days_count)
days_count <- as.data.frame(days_count)
head(days_count)
# adding month column
days_count$month <- format(days_count$date_mdy, "%m")
head(days_count)
# adding month column
days_count$month <- month(days_count$date_mdy, "%m")
# adding month column
days_count$month <- month(days_count$date_mdy)
# group by date and year and add count column
days_count <- sals %>%
group_by(date_mdy, year) %>%
summarize(n = n())
names(days_count) <- c("date","year","count")
days_count <- as.data.frame(days_count)
days_count$month <- format(days_count$date, "%m")
# adding month column
days_count$month <- month(days_count$date)
days_count$month <- format(days_count$date, "%m")
head(days_count)
# group by date and year and add count column
days_count <- sals %>%
group_by(date_mdy, year) %>%
summarize(n = n())
names(days_count) <- c("date","year","count")
days_count <- as.data.frame(days_count)
# adding month column
days_count$month <- month(days_count$date)
barplot(days_count$count,
space=1,
main="Counts by Date",
ylab="Daily Count",
xlab="month",
col=terrain.colors
(length(unique(days_count$month)))
[as.factor(days_count$month)])
head(days_count)
days_count_2023 <- subset(days_count, by = 2023)
View(days_count_2023)
?subset
days_count_2023 <- subset(days_count, year = 2023)
View(days_count_2023)
head(airquality)
days_count_2023 <- subset(days_count, year == 2023)
days_count_2024 <- subset(days_count, year == 2024)
View(days_count_2024)
barplot(days_count_2023$count,
space=1,
main="Counts by Date",
ylab="Daily Count",
xlab="month",
col=terrain.colors
(length(unique(days_count_2023$month)))
[as.factor(days_count_2023$month)])
barplot(days_count_2024$count,
space=1,
main="Counts by Date",
ylab="Daily Count",
xlab="month",
col=terrain.colors
(length(unique(days_count_2024$month)))
[as.factor(days_count_2024$month)])
colors <- c("lightgreen","#f9d62e","coral2","steelblue")
barplot(days_count$count,
space=1,
main="Counts by Date",
ylab="Daily Count",
xlab="month",
col=colors
(length(unique(days_count$month)))
[as.factor(days_count$month)])
barplot(days_count$count,
space=1,
main="Counts by Date",
ylab="Daily Count",
xlab="month",
col=colors,
(length(unique(days_count$month)))
[as.factor(days_count$month)])
barplot(days_count$count,
space=1,
main="Counts by Date",
ylab="Daily Count",
xlab="month",
col=terrain.colors
(length(unique(days_count$month)))
[as.factor(days_count$month)])
barplot(days_count$count,
space=1,
main="Counts by Date",
ylab="Daily Count",
xlab="month",
col=c("lightgreen","#f9d62e","coral2","steelblue")
(length(unique(days_count$month)))
[as.factor(days_count$month)])
colors <- c("lightgreen", "#f9d62e", "coral2", "steelblue")
# Manually map colors to each unique month
color_map <- setNames(colors, unique(days_count$month))
# Create the barplot
barplot(days_count$count,
space=1,
main="Counts by Date",
ylab="Daily Count",
xlab="Month",
col=color_map[days_count$month])
space=1,
barplot(days_count_2023$count,
space=1,
main="Counts by Date",
ylab="Daily Count",
xlab="month",
col=terrain.colors
(length(unique(days_count_2023$month)))
[as.factor(days_count_2023$month)])
barplot(days_count_2024$count,
space=1,
main="Counts by Date",
ylab="Daily Count",
xlab="month",
col=terrain.colors
(length(unique(days_count_2024$month)))
[as.factor(days_count_2024$month)])
barplot(days_count$count,
space=1,
main="Counts by Date",
ylab="Daily Count",
xlab="month",
col=color_map[days_count$month]
(length(unique(days_count$month)))
[as.factor(days_count$month)])
# Define colors
colors <- c("lightgreen", "#f9d62e", "coral2", "steelblue")
# Manually map colors to each unique month
color_map <- setNames(colors, unique(days_count$month))
view(color_map)
barplot(days_count$count,
space=1,
main="Counts by Date",
ylab="Daily Count",
xlab="Month",
col=color_map[days_count$month])
view(colors)
view(color_map)
class(color_map)
color_map <- as.data.frame(color_map)
View(color_map)
color_map$month <- c(3:6)
# Create the barplot
barplot(days_count$count,
space=1,
main="Counts by Date",
ylab="Daily Count",
xlab="Month",
col=color_map[days_count$month]) # Assign colors based on the mapped colors
# Create the barplot
barplot(days_count$count,
space=1,
main="Counts by Date",
ylab="Daily Count",
xlab="Month",
col=color_map[color_map$month]) # Assign colors based on the mapped colors
barplot(days_count$count,
space=1,
main="Counts by Date",
ylab="Daily Count",
xlab="Month",
col=color_map[days_count$month])
barplot(days_count_2023$count,
space=1,
main="Counts by Date",
ylab="Daily Count",
xlab="month",
col=terrain.colors
(length(unique(days_count_2023$month)))
[as.factor(days_count_2023$month)])
barplot(days_count_2024$count,
space=1,
main="Counts by Date",
ylab="Daily Count",
xlab="month",
col=terrain.colors
(length(unique(days_count_2024$month)))
[as.factor(days_count_2024$month)])
# Define colors
colors <- c("lightgreen", "#f9d62e", "coral2", "steelblue")
# Manually map colors to each unique month
color_map <- setNames(colors, unique(days_count$month))
# Create the barplot
barplot(days_count$count,
space=1,
main="Counts by Date",
ylab="Daily Count",
xlab="Month",
col=color_map[days_count$month]) # Assign colors based on the mapped colors
days_count$month <- as.factor(days_count$month)
# Create the barplot
barplot(days_count$count,
space=1,
main="Counts by Date",
ylab="Daily Count",
xlab="Month",
col=color_map[days_count$month]) # Assign colors based on the mapped colors
# Define colors
colors <- c("lightgreen", "#f9d62e", "pink", "steelblue")
# Manually map colors to each unique month
color_map <- setNames(colors, unique(days_count$month))
days_count$month <- as.factor(days_count$month)
# Create the barplot
barplot(days_count$count,
space=1,
main="Counts by Date",
ylab="Daily Count",
xlab="Month",
col=color_map[days_count$month]) # Assign colors based on the mapped colors
barplot(days_count$count,
space=1,
main="Counts by Date",
ylab="Daily Count",
xlab="month",
col=color_map[days_count$month]
(length(unique(days_count$month)))
[as.factor(days_count$month)])
color_map <- setNames(colors, unique(days_count_2023$month))
days_count$month <- as.factor(days_count_2023$month)
days_count_2023$month <- as.factor(days_count_2023$month)
barplot(days_count_2023$count,
space=1,
main="Counts by Date",
ylab="Daily Count",
xlab="month",
col=color_map[days_count$month])
#2024
color_map <- setNames(colors, unique(days_count_2024$month))
days_count_2024$month <- as.factor(days_count_2024$month)
barplot(days_count_2024$count,
space=1,
main="Counts by Date",
ylab="Daily Count",
xlab="month",
col=color_map[days_count$month])
View(temp)
View(site)
site$ID <- seq_len((nrow(site)))
View(sals_2023)
View(sals_2024)
site_2024 <- subset(site, year == 2024)
site_2024$ID <- seq_len((nrow(site_2024)))
View(site_2024)
ggplot(site_2024, aes(x = ID, y = temp, group = 1)) +
geom_point(color="blue") +
geom_line(color="blue", linetype="solid", size=2) +
theme_classic() +
theme(
panel.background = element_rect(fill='transparent'),
plot.background = element_rect(fill='transparent', color=NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.background = element_rect(fill='transparent'),
legend.box.background = element_rect(fill='transparent')
)
ggplot(site_2024, aes(x = date_mdy, y = temp, group = 1)) +
geom_point(color="blue") +
geom_line(color="blue", linetype="solid", size=2) +
theme_classic() +
theme(
panel.background = element_rect(fill='transparent'),
plot.background = element_rect(fill='transparent', color=NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.background = element_rect(fill='transparent'),
legend.box.background = element_rect(fill='transparent')
)
site_2023 <- read.csv("oss_2023_sitesubplot.csv")
setwd("C:/Users/jasmi/OneDrive/Documents/Academic/OSU/Git/oss-occu/data")
site_2024 <- read.csv("oss_2024_site.csv")
View(sals_2024)
site_2024$date_mdy <- as.Date(site_2024$date, format = "%m/%d/%y") #format date
site_2024$date_mdy <- as.Date(site_2024$date, format = "%m/%d/%Y") #format date
site_2023 <- read.csv("oss_2023_sitesubplot.csv")
site_2023$year <- 2023 #add year column to 2023 data
site_2023$date_mdy <- as.Date(site_2023$date, format = "%m/%d/%Y") #format date
summary(site_2023)
site_2024 <- read.csv("oss_2024_site.csv")
site_2024$date_mdy <- as.Date(site_2024$date, format = "%m/%d/%Y") #format date
summary(site_2024)
#subset 2023/2024 data to include only columns in common
site_2023_subset <- names(site_2023) %in% names(site_2024) #vector of 2023 col names that match 2024 col names
site_2024_subset <- names(site_2024) %in% names(site_2023) #vector of 2024 col names that match 2023 col  names
#rbind to include only those cols in common
site_2023_2024 <- bind_rows(site_2023[site_2023_subset],site_2024[site_2024_subset])
#2023 has data for all subplots, so we need to work on that
#subset new data frame to inlcude only cols we care about for 2023
new_site_2023_subset <- subset(site_2023_2024, subset = year==2023)
#i want to average elev, temp, hum for all rows that have the same stand number
#this code creates new data frame with that info
site_2023_avg <- aggregate(cbind(temp,hum,elev)~stand,new_site_2023_subset,mean)
#prepare to merge site_2023_avg cols with other site cols
new_site_2023_subset[, c(6:8)] <- list(NULL) #remove old temp,hum,elev cols
new_site_2023_subset <- unique(new_site_2023_subset) #keep only one of each stand, remove duplicates
site_2023_joined <- inner_join(site_2023_avg,new_site_2023_subset,by="stand") #merge
summary(site_2023_joined)
#combine subsetted 2023 data with the 2024 site data and format
site.complete <- bind_rows(site_2023_joined,subset(site_2023_2024,subset=year==2024))
site.complete$landowner <- as.factor(site.complete$landowner)
site.complete$trt <- as.factor(site.complete$trt)
site.complete$stand <- as.integer(site.complete$stand)
#add unique site code, combo of stand#_replicate#_year
site.complete$site_id <- paste(site.complete$stand, "_", site.complete$site_rep,
"_", site.complete$year)
#reorder
new_order <- c("site_id","landowner","stand","site_rep","trt","year", "date",
"date_mdy","elev","temp","hum")
site.complete <- site.complete[,new_order]
summary(site.complete)
View(site.complete)
# save as csv
write.csv(site.complete, "C:/Users/jasmi/OneDrive/Documents/Academic/OSU/Git/oss-occu/data/site.complete.csv",
row.names = FALSE)
setwd("C:/Users/jasmi/OneDrive/Documents/Academic/OSU/Git/oss-occu/data")
site <- read.csv("site.complete.csv")
site_2024 <- subset(site, year == 2024)
site_2024$ID <- seq_len((nrow(site_2024)))
ggplot(site_2024, aes(x = date_mdy, y = temp, group = 1)) +
geom_point(color="blue") +
geom_line(color="blue", linetype="solid", size=2) +
theme_classic() +
theme(
panel.background = element_rect(fill='transparent'),
plot.background = element_rect(fill='transparent', color=NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.background = element_rect(fill='transparent'),
legend.box.background = element_rect(fill='transparent')
)
ggplot(site_2023, aes(x = date_mdy, y = temp, group = 1)) +
geom_point(color="blue") +
geom_line(color="blue", linetype="solid", size=2) +
theme_classic() +
theme(
panel.background = element_rect(fill='transparent'),
plot.background = element_rect(fill='transparent', color=NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.background = element_rect(fill='transparent'),
legend.box.background = element_rect(fill='transparent')
)
View(site_2023)
ggplot(site_2024, aes(x = date_mdy, y = temp, group = 1)) +
geom_point(color="blue") +
geom_line(color="blue", linetype="solid", size=2) +
theme_classic() +
theme(
panel.background = element_rect(fill='transparent'),
plot.background = element_rect(fill='transparent', color=NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.background = element_rect(fill='transparent'),
legend.box.background = element_rect(fill='transparent')
)
View(site)
# 2023 trend line found in Pleth_conf_exploratory
site_2023 <- subset(site, year == 2023)
ggplot(site_2023, aes(x = date_mdy, y = temp, group = 1)) +
geom_point(color="blue") +
geom_line(color="blue", linetype="solid", size=2) +
theme_classic() +
theme(
panel.background = element_rect(fill='transparent'),
plot.background = element_rect(fill='transparent', color=NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.background = element_rect(fill='transparent'),
legend.box.background = element_rect(fill='transparent')
)
