setwd("~/Downloads/Jas Data Wrangling 2")
## Packages
library(tidyverse)
## Read in original data (taken from JW' GitHub)
df_dwd <- read.csv("input_files/dwd.complete.csv")
df_sals <- read.csv("input_files/sals.complete.csv")
df_site <- read.csv("input_files/site_level_matrix.csv")
## Select relevant metadata variables and name them accordingly
df_meta <- select(df_site,
Owner = landowner,
TreeFarm = tree_farm,
StandNo = site_id,
Year = year,
JulianDate = jul_date,
AirTemp = temp)
View(df_meta)
## Change to celsius
df_meta$AirTemp <- (df_meta$AirTemp - 32) * 5 / 9
## Replicate rows for subplots
df_meta <- df_meta[rep(seq(1, nrow(df_meta)), each = 7),]
View(df_meta)
View(df_meta)
rownames(df_meta) <- NULL
df_meta$SubPlot <- rep(seq(1,7), nrow(df_site))
## Create the abundance variables
df_meta$V1 <- NA
df_meta$V2 <- NA
df_meta$V3 <- NA
## Loop through each subplot and get a count of DWD
## This only considers logs! Not stumps
df_meta$DW <- 0
for(i in 1:nrow(df_meta)){
df_meta$DW[i] <- sum(df_dwd$site_id == df_meta$StandNo[i] &
df_dwd$subplot == df_meta$SubPlot[i] &
df_dwd$dwd_type == "L")
}
## Create two dataframes for ENES and OSS
df_enes <- df_meta
df_oss <- df_meta
## Loop through each subplot and get a count of sallies for each pass
for(i in 1:nrow(df_meta)){
df_temp <- filter(df_sals, site_id == df_meta$StandNo[i], subplot == df_meta$SubPlot[i])
df_enes$V1[i] <- sum(df_temp$spp == "ENES" & df_temp$pass == 1)
df_enes$V2[i] <- sum(df_temp$spp == "ENES" & df_temp$pass == 2)
df_enes$V3[i] <- sum(df_temp$spp == "ENES" & df_temp$pass == 3)
df_oss$V1[i] <- sum(df_temp$spp == "OSS" & df_temp$pass == 1)
df_oss$V2[i] <- sum(df_temp$spp == "OSS" & df_temp$pass == 2)
df_oss$V3[i] <- sum(df_temp$spp == "OSS" & df_temp$pass == 3)
print(i)
}
View(df_enes)
View(df_oss)
## Select columns; treament repeated between years as a thing to fit Jay's format
df_trt <- select(df_site,
Owner = landowner,
TreeFarm = tree_farm,
StandNo = site_id,
"2023" = trt,
"2024" = trt)
View(df_trt)
## Select variables to exactly match
df_enes <- select(df_enes, "Owner", "TreeFarm", "StandNo", "V1", "V2", "V3",
"Year", "DW", "AirTemp", "JulianDate")
df_osss <- select(df_oss, "Owner", "TreeFarm", "StandNo", "V1", "V2", "V3",
"Year", "DW", "AirTemp", "JulianDate")
df_oss <- select(df_oss, "Owner", "TreeFarm", "StandNo", "V1", "V2", "V3",
"Year", "DW", "AirTemp", "JulianDate")
write.csv(df_oss, "intermediate_files/oss_detections_jw.csv", row.names = FALSE)
library(tidyr)
library(dplyr)
library(ggplot2)
rm(list=ls())
setwd("~/Downloads/Jas Data Wrangling 2")
# OSS
xo <- read.csv("intermediate_files/oss_detections_jw.csv")
# ENES
xe <- read.csv("intermediate_files/enes_detections_jw.csv")
trt.wide <- read.csv("intermediate_files/treatment_state_jw.csv", na.strings="*")
# stack
trt <- gather(trt.wide, "Year", "HarvestState", 4:5)
trt$StandID <- as.numeric(as.factor(trt$StandNo))
trt$Trt <- as.factor(trt$HarvestState)
trt$YearN <- as.numeric(as.factor(trt$Year))
trt.grp <- trt %>% group_by(StandNo) %>% summarize(Group=min(as.numeric(Trt), na.rm=T)) # 1 = unit was cut; 2 = unit was never cut
trt <- merge(trt, trt.grp)
trt$TrtGrp <- trt$Trt
xo$StandID <- as.numeric(as.factor(xo$StandNo))
xo$YearN <- as.numeric(as.factor(xo$Year))
xo$Owner <- factor(xo$Owner, levels=c("BLM", "ODF", "PB", "WY"))
xo <- xo[!is.na(xo$DW) & !is.na(xo$JulianDate) & !is.na(xo$AirTemp),]
xe$StandID <- as.numeric(as.factor(xe$StandNo))
xe$YearN <- as.numeric(as.factor(xe$Year))
xe$Owner <- factor(xe$Owner, levels=c("BLM", "ODF", "PB", "WY"))
xe <- xe[!is.na(xe$DW) & !is.na(xe$JulianDate) & !is.na(xe$AirTemp),]
trt <- trt[trt$StandNo %in% unique(xo$StandNo),]
trt$StandNo <- as.character(trt$StandNo)
xo <- merge(xo, trt[, c("StandNo", "HarvestState", "TrtGrp", "YearN")])
xe <- merge(xe, trt[, c("StandNo", "HarvestState", "TrtGrp", "YearN")])
sum(xo[,c("V1", "V2", "V3")], na.rm=T)
sum(xe[,c("V1", "V2", "V3")], na.rm=T)
mean(apply(xo[,c("V1", "V2", "V3")], 1, sum, na.rm=T), na.rm=T) # 0.27
mean(apply(xe[,c("V1", "V2", "V3")], 1, sum, na.rm=T), na.rm=T) # 0.18
sd(apply(xo[,c("V1", "V2", "V3")], 1, sum, na.rm=T), na.rm=T) # 0.62
sd(apply(xe[,c("V1", "V2", "V3")], 1, sum, na.rm=T), na.rm=T) # 0.48
nstand <- length(unique(xo$StandNo))
nplot <- length(unique(xo$SubPlot))
nyear <- length(unique(xo$Year))
nvisit <- 3
nall <- nrow(xo)
# stand-level covariates
cov.stand <- xo %>% group_by(StandID) %>% summarize(Ownership=Owner[1], TreeFarm=TreeFarm[1])
View(cov.stand)
Stand1 <- cov.stand$StandID
OWPB1 <- ifelse(cov.stand$Ownership=="PB", 1, 0)
OWBLM1 <- ifelse(cov.stand$Ownership=="BLM", 1, 0)
OWODF1 <- ifelse(cov.stand$Ownership=="ODF", 1, 0)
TFCL1 <- ifelse(cov.stand$TreeFarm=="CL", 1, 0)
TFNC1 <- ifelse(cov.stand$TreeFarm=="NC", 1, 0)
# stand-year level covariates
cov.standyear <- trt %>% group_by(StandID, YearN) %>% summarize(TrtGrp=TrtGrp[1])
Stand2 <- cov.standyear$StandID
View(cov.standyear)
View(xo)
Year2 <- cov.standyear$YearN
Year2024 <- matrix(ifelse(cov.standyear$YearN==2, 1, 0), nrow=nyear)
TrtGrp2 <- cov.standyear$TrtGrp
BS2 <- matrix(ifelse(cov.standyear$TrtGrp=="BS", 1, 0), nrow=nyear)
BU2 <- matrix(ifelse(cov.standyear$TrtGrp=="BU", 1, 0), nrow=nyear)
HB2 <- matrix(ifelse(cov.standyear$TrtGrp=="HB", 1, 0), nrow=nyear)
HU2 <- matrix(ifelse(cov.standyear$TrtGrp=="HU", 1, 0), nrow=nyear)
# plot-level covariates
DW3 <- xo$DW
JD3 <- xo$JulianDate
AT3 <- xo$AirTemp
Year3 <- xo$YearN
OWPB3 <- ifelse(xo$Owner=="PB", 1, 0)
OWBLM3 <- ifelse(xo$Owner=="BLM", 1, 0)
OWODF3 <- ifelse(xo$Owner=="ODF", 1, 0)
TFCL3 <- ifelse(xo$TreeFarm=="CL", 1, 0)
TFNC3 <- ifelse(xo$TreeFarm=="NC", 1, 0)
Stand3 <- as.numeric(as.factor(xo$StandID))
Year20243 <- ifelse(xo$YearN==2, 1, 0)
TrtGrp3 <- xo$TrtGrp
BS3 <- ifelse(xo$TrtGrp=="BS", 1, 0)
BU3 <- ifelse(xo$TrtGrp=="BU", 1, 0)
HB3 <- ifelse(xo$TrtGrp=="HB", 1, 0)
HU3 <- ifelse(xo$TrtGrp=="HU", 1, 0)
Vomax <- xo$Vmax
Vemax <- xe$Vmax
yo <- as.matrix(xo[,c("V1", "V2", "V3")])
yo <- ifelse(yo >= 1, 1, 0)
ye <- as.matrix(xe[,c("V1", "V2", "V3")])
ye <- ifelse(ye >= 1, 1, 0)
Vomax
View(xo)
#
model.h1 <- function(){
# priors for occupancy model
beta0 ~ dnorm(0, 0.333)
betaTFCL ~ dnorm(0, 1) # tree farm: CL, NC, (SP = ref)
betaTFNC ~ dnorm(0, 1)
betaOWPB ~ dnorm(0, 1) # ownership: PB, ODF, BLM, (WY = ref)
betaOWODF ~ dnorm(0, 1)
betaOWBLM ~ dnorm(0, 1)
betaYr24 ~ dnorm(0, 1) # 2023 = ref
betaHU ~ dnorm(0, 0.25) # treatments: HU, BU, HB, BS, (control = ref)
betaBU ~ dnorm(0, 0.25) # unsure about prior values
betaHB ~ dnorm(0, 0.25)
betaBS ~ dnorm(0, 0.25)
betaDW ~ dnorm(0, 0.25) # dwd count
sd.b0 ~ dgamma(1, 2) # did not change
tau.b0 <- 1/(sd.b0 * sd.b0) # did not change
# treatment effect estimators
SalvEffect <- betaBS - betaBU
BurnEffect <- betaHB - betaHU
# priors for detection random effects
mu.a0 ~ dnorm(0, 0.333) ### mu/sd/tau terms for all my trt betas, including interactions, kept same priors as Jay
mu.a1 ~ dnorm(0, 1) # harv
mu.a2 ~ dnorm(0, 1) # AT
mu.a3 ~ dnorm(0, 1) # AT^2
mu.a4 ~ dnorm(0, 1) # harv*AT
mu.a5 ~ dnorm(0, 1) # harv*AT^2
mu.a6 ~ dnorm(0, 1) # burn
mu.a7 ~ dnorm(0, 1) # burn*AT
mu.a8 ~ dnorm(0, 1) # burn*AT^2
mu.a9 ~ dnorm(0, 1) # harvburn
mu.a10 ~ dnorm(0, 1) # harvburn*AT
mu.a11 ~ dnorm(0, 1) # harvburn*AT^2
mu.a12 ~ dnorm(0, 1) # salv
mu.a13 ~ dnorm(0, 1) # salv*AT
mu.a14 ~ dnorm(0, 1) # salv*AT^2
sd.a0 ~ dgamma(1, 2) # used in tau below; one for each alpha term
sd.a1 ~ dgamma(2, 1) # Jay: hyper-prior for Trt effect; allow for greater prior uncertainty than other effects. what to do with this?
sd.a2 ~ dgamma(1, 2)
sd.a3 ~ dgamma(1, 2)
sd.a4 ~ dgamma(1, 2)
sd.a5 ~ dgamma(1, 2)
sd.a6 ~ dgamma(1, 2)
sd.a7 ~ dgamma(1, 2)
sd.a8 ~ dgamma(1, 2)
sd.a9 ~ dgamma(1, 2)
sd.a10 ~ dgamma(1, 2)
sd.a11 ~ dgamma(1, 2)
sd.a12 ~ dgamma(1, 2)
sd.a13 ~ dgamma(1, 2)
sd.a14 ~ dgamma(1, 2)
tau.a0 <- 1/(sd.a0 * sd.a0) # one for each alpha term
tau.a1 <- 1/(sd.a1 * sd.a1)
tau.a2 <- 1/(sd.a2 * sd.a2)
tau.a3 <- 1/(sd.a3 * sd.a3)
tau.a4 <- 1/(sd.a4 * sd.a4)
tau.a5 <- 1/(sd.a5 * sd.a5)
tau.a6 <- 1/(sd.a6 * sd.a6)
tau.a7 <- 1/(sd.a7 * sd.a7)
tau.a8 <- 1/(sd.a8 * sd.a8)
tau.a9 <- 1/(sd.a9 * sd.a9)
tau.a10 <- 1/(sd.a10 * sd.a10)
tau.a11 <- 1/(sd.a11 * sd.a11)
tau.a12 <- 1/(sd.a12 * sd.a12)
tau.a13 <- 1/(sd.a13 * sd.a13)
tau.a14 <- 1/(sd.a14 * sd.a14)
# detection model random effects (by year)
for(i in 1:nyear){ # used all terms from above
a0[i] ~ dnorm(mu.a0, tau.a0) # each plot level effect by year
aHU[i] ~ dnorm(mu.a1, tau.a1) # harvest
aAT[i] ~ dnorm(mu.a2, tau.a2) # ambient temp
aAT2[i] ~ dnorm(mu.a3, tau.a3) # ambient temp squared (quadratic)
aHUAT[i] ~ dnorm(mu.a4, tau.a4) # harv/temp interaction
aHUAT2[i] ~ dnorm(mu.a5, tau.a5) # harv/temp^2 interaction
aBU[i] ~ dnorm(mu.a6, tau.a6) # burned
aBUAT[i] ~ dnorm(mu.a7, tau.a7)
aBUAT2[i] ~ dnorm(mu.a8, tau.a8)
aHB[i] ~ dnorm(mu.a9, tau.a9) # harvested and burned
aHBAT[i] ~ dnorm(mu.a10, tau.a10)
aHBAT2[i] ~ dnorm(mu.a11, tau.a11)
aBS[i] ~ dnorm(mu.a12, tau.a12) # salvage logged
aBSAT[i] ~ dnorm(mu.a13, tau.a13)
aBSAT2[i] ~ dnorm(mu.a14, tau.a14)
}
for(i in 1:nstand){
# occupancy stand-level effects
mu1[i] <- beta0 + betaTFCL*TFCL[i] + betaTFNC*TFNC[i] + # added multiple tree farm designations
betaOWPB*OWPB[i] + betaOWODF*OWODF[i] + betaOWBLM*OWBLM[i] # added ownership designations
mu1i[i] ~ dnorm(mu1[i], tau.b0)
b0[i] <- mu1i[i] - mu1[i]
for(k in 1:nyear){
# occupancy stand-year level effects
mu2ik[i,k] <- mu1i[i] + betaYr24*Year2024[k,i] + betaHB*HB2[k,i] + betaBU*BU2[k,i] +
betaHB*HB2[k,i] * betaBS*BS2[k,i]
}
}
for(i in 1:nall){
# occupancy plot-level effects
mu3ikj[i] <- mu2ik[Stand3[i], Year3[i]] + betaDW*DW3[i]
logit(psi[i]) <- mu3ikj[i]
z[i] ~ dbern(psi[i])
# full detection model
logit(p[i]) <- a0[Year3[i]] + aAT[Year3[i]]*AT3[i] + aAT2[Year3[i]]*AT3[i]*AT3[i] +
aHU[Year3[i]]*HU3[i] + aHUAT[Year3[i]]*HU3[i]*AT3[i] + aHUAT2[Year3[i]]*HU3[i]*AT3[i]*AT3[i] + #harv
aBU[Year3[i]]*BU3[i] + aBUAT[Year3[i]]*BU3[i]*AT3[i] + aBUAT2[Year3[i]]*BU3[i]*AT3[i]*AT3[i] + #burn
aHB[Year3[i]]*HB3[i] + aHBAT[Year3[i]]*HB3[i]*AT3[i] + aHBAT2[Year3[i]]*HB3[i]*AT3[i]*AT3[i] + #harvburn
aBS[Year3[i]]*BS3[i] + aBSAT[Year3[i]]*BS3[i]*AT3[i] + aBSAT2[Year3[i]]*BS3[i]*AT3[i]*AT3[i] + #salv
p.eff[i] <- z[i] * p[i]
for(j in 1:nvisit){
# likelihood
y[i,j] ~ dbern(p.eff[i])
}
}
}
rm(list=ls())
library(R2jags)
readRDS("~/Library/CloudStorage/OneDrive-Personal/Documents/Academic/OSU/Git/oss-occu/LS-jas data wrangling/output_files/oss_enes_data_packaged_jw.RData")
load("~/Library/CloudStorage/OneDrive-Personal/Documents/Academic/OSU/Git/oss-occu/LS-jas data wrangling/output_files/oss_enes_data_packaged_jw.RData")
View(osslist)
#load("OSS ENES packaged data thru 2019.RData")
str(osslist)
source("~/Library/CloudStorage/OneDrive-Personal/Documents/Academic/OSU/Git/oss-occu/2020/2020_code_jayjones/JAGS BACI models 2019_JW_edited.r")
# diagnostic check
myFun <- function(n, y, p){
out <- matrix(ncol=3, nrow=n)
miss <- is.na(y)
for(i in 1:n){
out[i,1] <- sum(((as.numeric(y) - rep(p[i,], 3))^2)[!miss]) # 253
out[i,2] <- sum(((rbinom(length(miss), 1, rep(p[i,], 3)) - rep(p[i,], 3))^2)[!miss]) # 252.2
}
out[,3] <- ifelse(out[,1] > out[,2], 1, 0)
out
}
load("~/Library/CloudStorage/OneDrive-Personal/Documents/Academic/OSU/Git/oss-occu/LS-jas data wrangling/output_files/oss_enes_data_packaged_jw.RData")
#load("OSS ENES packaged data thru 2019.RData")
str(osslist)
library(R2jags)
# model setup
zst.o <- apply(osslist$yo, 1, max, na.rm=T)
inits.o <- function(){list(z=zst.o)}
params.o <- c("beta0", "betaTFCL", "betaTFNC", "betaOWPB", "betaOWODF", "betaOWBLM", "betaYr24", "betaHU",
"betaBU", "betaHB", "betaBS", "betaDW", "SalvEffect", "BurnEffect",
"mu.a0", "mu.a1", "mu.a2", "mu.a3", "mu.a4", "mu.a5", "mu.a6", "mu.a7", "mu.a8", "mu.a9", "mu.a10",
"mu.a11", "mu.a12", "mu.a13", "mu.a14", "p.eff", "b0", "sd.b0", "a0")
test.data.o <- with(osslist, list(y=yo, nyear=nyear, nstand=nstand, Year2024=Year2024, TFCL1=TFCL1, TFNC1=TFNC1,
HB2=HB2, BS2=BS2, HU2=HU2, BU2=BU2, DW3=(DW3-3)/2, AT3=(AT3-12)/5.5, Trt3=Trt3, #what is he doing here with these calculations?
nall=nall, nvisit=nvisit, Year3=Year3, Stand3=Stand3))
test.data.o <- with(osslist, list(y=yo, nyear=nyear, nstand=nstand, Year2024=Year2024, TFCL1=TFCL1, TFNC1=TFNC1,
HB2=HB2, BS2=BS2, HU2=HU2, BU2=BU2, DW3=(DW3-3)/2, AT3=(AT3-12)/5.5, Trt3=TrtGrp3, #what is he doing here with these calculations?
nall=nall, nvisit=nvisit, Year3=Year3, Stand3=Stand3))
# fit the model
system.time(out.oh1 <- jags(test.data.o, inits.o, params.o, model.h1, n.chains=4,
n.thin=10, n.iter=1100, n.burnin=100)) # 49s
library(R2jags)
rm(list=ls())
load("~/Library/CloudStorage/OneDrive-Personal/Documents/Academic/OSU/Git/oss-occu/LS-jas data wrangling/output_files/oss_enes_data_packaged_jw.RData")
#load("OSS ENES packaged data thru 2019.RData")
str(osslist)
source("~/Library/CloudStorage/OneDrive-Personal/Documents/Academic/OSU/Git/oss-occu/2020/2020_code_jayjones/JAGS BACI models 2019_JW_edited.r")
# diagnostic check
myFun <- function(n, y, p){
out <- matrix(ncol=3, nrow=n)
miss <- is.na(y)
for(i in 1:n){
out[i,1] <- sum(((as.numeric(y) - rep(p[i,], 3))^2)[!miss]) # 253
out[i,2] <- sum(((rbinom(length(miss), 1, rep(p[i,], 3)) - rep(p[i,], 3))^2)[!miss]) # 252.2
}
out[,3] <- ifelse(out[,1] > out[,2], 1, 0)
out
}
# model setup
zst.o <- apply(osslist$yo, 1, max, na.rm=T)
inits.o <- function(){list(z=zst.o)}
params.o <- c("beta0", "betaTFCL", "betaTFNC", "betaOWPB", "betaOWODF", "betaOWBLM", "betaYr24", "betaHU",
"betaBU", "betaHB", "betaBS", "betaDW", "SalvEffect", "BurnEffect",
"mu.a0", "mu.a1", "mu.a2", "mu.a3", "mu.a4", "mu.a5", "mu.a6", "mu.a7", "mu.a8", "mu.a9", "mu.a10",
"mu.a11", "mu.a12", "mu.a13", "mu.a14", "p.eff", "b0", "sd.b0", "a0")
test.data.o <- with(osslist, list(y=yo, nyear=nyear, nstand=nstand, Year2024=Year2024, TFCL1=TFCL1, TFNC1=TFNC1,
HB2=HB2, BS2=BS2, HU2=HU2, BU2=BU2, DW3=(DW3-3)/2, AT3=(AT3-12)/5.5, Trt3=TrtGrp3, #what is he doing here with these calculations?
nall=nall, nvisit=nvisit, Year3=Year3, Stand3=Stand3))
load("~/Library/CloudStorage/OneDrive-Personal/Documents/Academic/OSU/Git/oss-occu/LS-jas data wrangling/output_files/oss_enes_data_packaged_jw.RData")
# diagnostic check
myFun <- function(n, y, p){
out <- matrix(ncol=3, nrow=n)
miss <- is.na(y)
for(i in 1:n){
out[i,1] <- sum(((as.numeric(y) - rep(p[i,], 3))^2)[!miss]) # 253
out[i,2] <- sum(((rbinom(length(miss), 1, rep(p[i,], 3)) - rep(p[i,], 3))^2)[!miss]) # 252.2
}
out[,3] <- ifelse(out[,1] > out[,2], 1, 0)
out
}
# model setup
zst.o <- apply(osslist$yo, 1, max, na.rm=T)
inits.o <- function(){list(z=zst.o)}
params.o <- c("beta0", "betaTFCL", "betaTFNC", "betaOWPB", "betaOWODF", "betaOWBLM", "betaYr24", "betaHU",
"betaBU", "betaHB", "betaBS", "betaDW", "SalvEffect", "BurnEffect",
"mu.a0", "mu.a1", "mu.a2", "mu.a3", "mu.a4", "mu.a5", "mu.a6", "mu.a7", "mu.a8", "mu.a9", "mu.a10",
"mu.a11", "mu.a12", "mu.a13", "mu.a14", "p.eff", "b0", "sd.b0", "a0")
test.data.o <- with(osslist, list(y=yo, nyear=nyear, nstand=nstand, Year2024=Year2024, TFCL1=TFCL1, TFNC1=TFNC1,
HB2=HB2, BS2=BS2, HU2=HU2, BU2=BU2, DW3=(DW3-3)/2, AT3=(AT3-12)/5.5, Trt3=TrtGrp3, #what is he doing here with these calculations?
nall=nall, nvisit=nvisit, Year3=Year3, Stand3=Stand3))
# fit the model
system.time(out.oh1 <- jags(test.data.o, inits.o, params.o, model.h1, n.chains=4,
n.thin=10, n.iter=1100, n.burnin=100)) # 49s
source("~/Library/CloudStorage/OneDrive-Personal/Documents/Academic/OSU/Git/oss-occu/2020/2020_code_jayjones/JAGS BACI models 2019_JW_edited.r")
# fit the model
system.time(out.oh1 <- jags(test.data.o, inits.o, params.o, model.h1, n.chains=4,
n.thin=10, n.iter=1100, n.burnin=100)) # 49s
test.data.o <- with(osslist, list(y=yo, nyear=nyear, nstand=nstand, Year2024=Year2024, TFCL1=TFCL1, TFNC1=TFNC1,
HB2=HB2, BS2=BS2, HU2=HU2, BU2=BU2, DW3=(DW3-3)/2, AT3=(AT3-12)/5.5, Trt3=TrtGrp3, #what is he doing here with these calculations?
nall=nall, nvisit=nvisit, Year3=Year3, Stand3=Stand3))
library(R2jags)
rm(list=ls())
load("~/Library/CloudStorage/OneDrive-Personal/Documents/Academic/OSU/Git/oss-occu/LS-jas data wrangling/output_files/oss_enes_data_packaged_jw.RData")
#load("OSS ENES packaged data thru 2019.RData")
str(osslist)
source("~/Library/CloudStorage/OneDrive-Personal/Documents/Academic/OSU/Git/oss-occu/2020/2020_code_jayjones/JAGS BACI models 2019_JW_edited.r")
# diagnostic check
myFun <- function(n, y, p){
out <- matrix(ncol=3, nrow=n)
miss <- is.na(y)
for(i in 1:n){
out[i,1] <- sum(((as.numeric(y) - rep(p[i,], 3))^2)[!miss]) # 253
out[i,2] <- sum(((rbinom(length(miss), 1, rep(p[i,], 3)) - rep(p[i,], 3))^2)[!miss]) # 252.2
}
out[,3] <- ifelse(out[,1] > out[,2], 1, 0)
out
}
# model setup
zst.o <- apply(osslist$yo, 1, max, na.rm=T)
inits.o <- function(){list(z=zst.o)}
params.o <- c("beta0", "betaTFCL", "betaTFNC", "betaOWPB", "betaOWODF", "betaOWBLM", "betaYr24", "betaHU",
"betaBU", "betaHB", "betaBS", "betaDW", "SalvEffect", "BurnEffect",
"mu.a0", "mu.a1", "mu.a2", "mu.a3", "mu.a4", "mu.a5", "mu.a6", "mu.a7", "mu.a8", "mu.a9", "mu.a10",
"mu.a11", "mu.a12", "mu.a13", "mu.a14", "p.eff", "b0", "sd.b0", "a0")
test.data.o <- with(osslist, list(y=yo, nyear=nyear, nstand=nstand, Year2024=Year2024, TFCL1=TFCL1, TFNC1=TFNC1,
HB2=HB2, BS2=BS2, HU2=HU2, BU2=BU2, DW3=(DW3-3)/2, AT3=(AT3-12)/5.5, Trt3=TrtGrp3, #what is he doing here with these calculations?
nall=nall, nvisit=nvisit, Year3=Year3, Stand3=Stand3))
# fit the model
system.time(out.oh1 <- jags(test.data.o, inits.o, params.o, model.h1, n.chains=4,
n.thin=10, n.iter=1100, n.burnin=100)) # 49s
load("~/Library/CloudStorage/OneDrive-Personal/Documents/Academic/OSU/Git/oss-occu/LS-jas data wrangling/output_files/oss_enes_data_packaged_jw.RData")
#load("OSS ENES packaged data thru 2019.RData")
str(osslist)
source("~/Library/CloudStorage/OneDrive-Personal/Documents/Academic/OSU/Git/oss-occu/2020/2020_code_jayjones/JAGS BACI models 2019_JW_edited.r")
# diagnostic check
myFun <- function(n, y, p){
out <- matrix(ncol=3, nrow=n)
miss <- is.na(y)
for(i in 1:n){
out[i,1] <- sum(((as.numeric(y) - rep(p[i,], 3))^2)[!miss]) # 253
out[i,2] <- sum(((rbinom(length(miss), 1, rep(p[i,], 3)) - rep(p[i,], 3))^2)[!miss]) # 252.2
}
out[,3] <- ifelse(out[,1] > out[,2], 1, 0)
out
}
# model setup
zst.o <- apply(osslist$yo, 1, max, na.rm=T)
inits.o <- function(){list(z=zst.o)}
params.o <- c("beta0", "betaTFCL", "betaTFNC", "betaOWPB", "betaOWODF", "betaOWBLM", "betaYr24", "betaHU",
"betaBU", "betaHB", "betaBS", "betaDW", "SalvEffect", "BurnEffect",
"mu.a0", "mu.a1", "mu.a2", "mu.a3", "mu.a4", "mu.a5", "mu.a6", "mu.a7", "mu.a8", "mu.a9", "mu.a10",
"mu.a11", "mu.a12", "mu.a13", "mu.a14", "p.eff", "b0", "sd.b0", "a0")
# model setup
zst.o <- apply(osslist$yo, 1, max, na.rm=T)
load("~/Library/CloudStorage/OneDrive-Personal/Documents/Academic/OSU/Git/oss-occu/LS-jas data wrangling/output_files/oss_enes_data_packaged_jw.RData")
#load("OSS ENES packaged data thru 2019.RData")
str(osslist)
source("~/Library/CloudStorage/OneDrive-Personal/Documents/Academic/OSU/Git/oss-occu/2020/2020_code_jayjones/JAGS BACI models 2019_JW_edited.r")
load("~/Library/CloudStorage/OneDrive-Personal/Documents/Academic/OSU/Git/oss-occu/LS-jas data wrangling/output_files/oss_enes_data_packaged_jw.RData")
# diagnostic check
myFun <- function(n, y, p){
out <- matrix(ncol=3, nrow=n)
miss <- is.na(y)
for(i in 1:n){
out[i,1] <- sum(((as.numeric(y) - rep(p[i,], 3))^2)[!miss]) # 253
out[i,2] <- sum(((rbinom(length(miss), 1, rep(p[i,], 3)) - rep(p[i,], 3))^2)[!miss]) # 252.2
}
out[,3] <- ifelse(out[,1] > out[,2], 1, 0)
out
}
# model setup
zst.o <- apply(osslist$yo, 1, max, na.rm=T)
inits.o <- function(){list(z=zst.o)}
params.o <- c("beta0", "betaTFCL", "betaTFNC", "betaOWPB", "betaOWODF", "betaOWBLM", "betaYr24", "betaHU",
"betaBU", "betaHB", "betaBS", "betaDW", "SalvEffect", "BurnEffect",
"mu.a0", "mu.a1", "mu.a2", "mu.a3", "mu.a4", "mu.a5", "mu.a6", "mu.a7", "mu.a8", "mu.a9", "mu.a10",
"mu.a11", "mu.a12", "mu.a13", "mu.a14", "p.eff", "b0", "sd.b0", "a0")
test.data.o <- with(osslist, list(y=yo, nyear=nyear, nstand=nstand, Year2024=Year2024, TFCL1=TFCL1, TFNC1=TFNC1,
HB2=HB2, BS2=BS2, HU2=HU2, BU2=BU2, DW3=(DW3-3)/2, AT3=(AT3-12)/5.5, Trt3=TrtGrp3, #what is he doing here with these calculations?
nall=nall, nvisit=nvisit, Year3=Year3, Stand3=Stand3))
# fit the model
system.time(out.oh1 <- jags(test.data.o, inits.o, params.o, model.h1, n.chains=4,
n.thin=10, n.iter=1100, n.burnin=100)) # 49s
test.data.o <- with(osslist, list(y=yo, nyear=nyear, nstand=nstand, Year2024=Year2024, TFCL1=TFCL1, TFNC1=TFNC1,
HB2=HB2, BS2=BS2, HU2=HU2, BU2=BU2, DW3=(DW3-3)/2, AT3=(AT3-12)/5.5, #what is he doing here with these calculations?
nall=nall, nvisit=nvisit, Year3=Year3, Stand3=Stand3))
# fit the model
system.time(out.oh1 <- jags(test.data.o, inits.o, params.o, model.h1, n.chains=4,
n.thin=10, n.iter=1100, n.burnin=100)) # 49s
library(R2jags)
rm(list=ls())
source("~/Library/CloudStorage/OneDrive-Personal/Documents/Academic/OSU/Git/oss-occu/2020/2020_code_jayjones/JAGS BACI models 2019_JW_edited copy.r")
load("~/Library/CloudStorage/OneDrive-Personal/Documents/Academic/OSU/Git/oss-occu/LS-jas data wrangling/output_files/oss_enes_data_packaged_jw.RData")
#load("OSS ENES packaged data thru 2019.RData")
str(osslist)
# diagnostic check
myFun <- function(n, y, p){
out <- matrix(ncol=3, nrow=n)
miss <- is.na(y)
for(i in 1:n){
out[i,1] <- sum(((as.numeric(y) - rep(p[i,], 3))^2)[!miss]) # 253
out[i,2] <- sum(((rbinom(length(miss), 1, rep(p[i,], 3)) - rep(p[i,], 3))^2)[!miss]) # 252.2
}
out[,3] <- ifelse(out[,1] > out[,2], 1, 0)
out
}
# model setup
zst.o <- apply(osslist$yo, 1, max, na.rm=T)
inits.o <- function(){list(z=zst.o)}
params.o <- c("beta0", "betaTFCL", "betaTFNC", "betaOWPB", "betaOWODF", "betaOWBLM", "betaYr24", "betaHU",
"betaBU", "betaHB", "betaBS", "betaDW", "SalvEffect", "BurnEffect",
"mu.a0", "mu.a1", "mu.a2", "mu.a3", "mu.a4", "mu.a5", "mu.a6", "mu.a7", "mu.a8", "mu.a9", "mu.a10",
"mu.a11", "mu.a12", "mu.a13", "mu.a14", "p.eff", "b0", "sd.b0", "a0")
test.data.o <- with(osslist, list(y=yo, nyear=nyear, nstand=nstand, Year2024=Year2024, TFCL1=TFCL1, TFNC1=TFNC1,
HB2=HB2, BS2=BS2, HU2=HU2, BU2=BU2, DW3=(DW3-3)/2, AT3=(AT3-12)/5.5, Trt3=TrtGrp3, #what is he doing here with these calculations?
nall=nall, nvisit=nvisit, Year3=Year3, Stand3=Stand3))
# fit the model
system.time(out.oh1 <- jags(test.data.o, inits.o, params.o, model.h1, n.chains=4,
n.thin=10, n.iter=1100, n.burnin=100)) # 49s
