mu.a5 ~ dnorm(0, 1) # harv*AT^2
mu.a6 ~ dnorm(0, 1) # burn
mu.a7 ~ dnorm(0, 1) # burn*AT
mu.a8 ~ dnorm(0, 1) # burn*AT^2
mu.a9 ~ dnorm(0, 1) # harvburn
mu.a10 ~ dnorm(0, 1) # harvburn*AT
mu.a11 ~ dnorm(0, 1) # harvburn*AT^2
mu.a12 ~ dnorm(0, 1) # salv
mu.a13 ~ dnorm(0, 1) # salv*AT
mu.a14 ~ dnorm(0, 1) # salv*AT^2
sd.a0 ~ dgamma(1, 2) # used in tau below; one for each alpha term
sd.a1 ~ dgamma(2, 1) # Jay: hyper-prior for Trt effect; allow for greater prior uncertainty than other effects. what to do with this?
sd.a2 ~ dgamma(1, 2)
sd.a3 ~ dgamma(1, 2)
sd.a4 ~ dgamma(1, 2)
sd.a5 ~ dgamma(1, 2)
sd.a6 ~ dgamma(1, 2)
sd.a7 ~ dgamma(1, 2)
sd.a8 ~ dgamma(1, 2)
sd.a9 ~ dgamma(1, 2)
sd.a10 ~ dgamma(1, 2)
sd.a11 ~ dgamma(1, 2)
sd.a12 ~ dgamma(1, 2)
sd.a13 ~ dgamma(1, 2)
sd.a14 ~ dgamma(1, 2)
tau.a0 <- 1/(sd.a0 * sd.a0) # one for each alpha term
tau.a1 <- 1/(sd.a1 * sd.a1)
tau.a2 <- 1/(sd.a2 * sd.a2)
tau.a3 <- 1/(sd.a3 * sd.a3)
tau.a4 <- 1/(sd.a4 * sd.a4)
tau.a5 <- 1/(sd.a5 * sd.a5)
tau.a6 <- 1/(sd.a6 * sd.a6)
tau.a7 <- 1/(sd.a7 * sd.a7)
tau.a8 <- 1/(sd.a8 * sd.a8)
tau.a9 <- 1/(sd.a9 * sd.a9)
tau.a10 <- 1/(sd.a10 * sd.a10)
tau.a11 <- 1/(sd.a11 * sd.a11)
tau.a12 <- 1/(sd.a12 * sd.a12)
tau.a13 <- 1/(sd.a13 * sd.a13)
tau.a14 <- 1/(sd.a14 * sd.a14)
# detection model random effects (by year)
for(i in 1:nyear){ # used all terms from above - did i do this right? took out the "trt" object
a0[i] ~ dnorm(mu.a0, tau.a0) # each plot level effect by year
aHU[i] ~ dnorm(mu.a1, tau.a1) # harvest
aAT[i] ~ dnorm(mu.a2, tau.a2) # ambient temp
aAT2[i] ~ dnorm(mu.a3, tau.a3) # ambient temp squared (quadratic)
aHUAT[i] ~ dnorm(mu.a4, tau.a4) # harv/temp interaction
aHUAT2[i] ~ dnorm(mu.a5, tau.a5) # harv/temp^2 interaction
aBU[i] ~ dnorm(mu.a6, tau.a6) # burned
aBUAT[i] ~ dnorm(mu.a7, tau.a7)
aBUAT2[i] ~ dnorm(mu.a8, tau.a8)
aHB[i] ~ dnorm(mu.a9, tau.a9) # harvested and burned
aHBAT[i] ~ dnorm(mu.a10, tau.a10)
aHBAT2[i] ~ dnorm(mu.a11, tau.a11)
aBS[i] ~ dnorm(mu.a12, tau.a12) # salvage logged
aBSAT[i] ~ dnorm(mu.a13, tau.a13)
aBSAT2[i] ~ dnorm(mu.a14, tau.a14)
}
for(i in 1:nstand){
# occupancy stand-level effects
mu1[i] <- beta0 + betaTFCL*TFCL1[i] + betaTFNC*TFNC1[i] + # added multiple tree farm designations
betaOWPB*OWPB1[i] + betaOWODF*OWODF1[i] + betaOWBLM*OWBLM1[i] # added ownership designations
mu1i[i] ~ dnorm(mu1[i], tau.b0)
b0[i] <- mu1i[i] - mu1[i]
for(k in 1:nyear){
# occupancy stand-year level effects
mu2ik[i,k] <- mu1i[i] + betaYr24*Year2024[k,i] + betaHB*HB2[k,i] + betaBU*BU2[k,i] +
betaHB*HB2[k,i] * betaBS*BS2[k,i]
}
}
for(i in 1:nall){
# occupancy plot-level effects
mu3ikj[i] <- mu2ik[Stand3[i], Year3[i]] + betaDW*DW3[i]
logit(psi[i]) <- mu3ikj[i]
z[i] ~ dbern(psi[i])
# full detection model
logit(p[i]) <- a0[Year3[i]] + aAT[Year3[i]]*AT3[i] + aAT2[Year3[i]]*AT3[i]*AT3[i] +
aHU[Year3[i]]*HU3[i] + aHUAT[Year3[i]]*HU3[i]*AT3[i] + aHUAT2[Year3[i]]*HU3[i]*AT3[i]*AT3[i] + #harv
aBU[Year3[i]]*BU3[i] + aBUAT[Year3[i]]*BU3[i]*AT3[i] + aBUAT2[Year3[i]]*BU3[i]*AT3[i]*AT3[i] + #burn
aHB[Year3[i]]*HB3[i] + aHBAT[Year3[i]]*HB3[i]*AT3[i] + aHBAT2[Year3[i]]*HB3[i]*AT3[i]*AT3[i] + #harvburn
aBS[Year3[i]]*BS3[i] + aBSAT[Year3[i]]*BS3[i]*AT3[i] + aBSAT2[Year3[i]]*BS3[i]*AT3[i]*AT3[i] + #salv
p.eff[i] <- z[i] * p[i]
for(j in 1:nvisit){
# likelihood
y[i,j] ~ dbern(p.eff[i])
}
}
}
ource("~/Library/CloudStorage/OneDrive-Personal/Documents/Academic/OSU/Git/oss-occu/2020/2020_code_jayjones/JAGS BACI models 2019_JW_edited.r")
source("~/Library/CloudStorage/OneDrive-Personal/Documents/Academic/OSU/Git/oss-occu/2020/2020_code_jayjones/JAGS BACI models 2019_JW_edited.r")
#source("JAGS BACI models 2019.r")
# --------------------------------
# 1. read in the data
# --------------------------------
load("~/Library/CloudStorage/OneDrive-Personal/Documents/Academic/OSU/Git/oss-occu/LS-jas data wrangling/output_files/oss_enes_data_packaged_jw.RData")
#load("OSS ENES packaged data thru 2019.RData")
str(osslist)
# --------------------------------
# 3. fit the 'hierarchical' model
# --------------------------------
# diagnostic check
myFun <- function(n, y, p){
out <- matrix(ncol=3, nrow=n)
miss <- is.na(y)
for(i in 1:n){
out[i,1] <- sum(((as.numeric(y) - rep(p[i,], 3))^2)[!miss]) # 253
out[i,2] <- sum(((rbinom(length(miss), 1, rep(p[i,], 3)) - rep(p[i,], 3))^2)[!miss]) # 252.2
}
out[,3] <- ifelse(out[,1] > out[,2], 1, 0)
out
}
# OSS
# model setup
zst.o <- apply(osslist$yo, 1, max, na.rm=T)
inits.o <- function(){list(z=zst.o)}
params.o <- c("beta0", "betaTFCL", "betaTFNC", "betaOWPB", "betaOWODF", "betaOWBLM", "betaYr24", "betaHU",
"betaBU", "betaHB", "betaBS", "betaDW", "SalvEffect", "BurnEffect",
"mu.a0", "mu.a1", "mu.a2", "mu.a3", "mu.a4", "mu.a5", "mu.a6", "mu.a7", "mu.a8", "mu.a9", "mu.a10",
"mu.a11", "mu.a12", "mu.a13", "mu.a14", "p.eff", "b0", "sd.b0", "a0")
test.data.o <- with(osslist, list(y=yo, nyear=nyear, nstand=nstand, Year2024=Year2024, TFCL1=TFCL1, TFNC1=TFNC1,
HB2=HB2, BS2=BS2, HU2=HU2, BU2=BU2, DW3=(DW3-3)/2, AT3=(AT3-12)/5.5, Trt3=TrtGrp3, #what is he doing here with these calculations?
nall=nall, nvisit=nvisit, Year3=Year3, Stand3=Stand3))
# fit the model
system.time(out.oh1 <- jags(test.data.o, inits.o, params.o, model.h1, n.chains=4,
n.thin=10, n.iter=1100, n.burnin=100))
View(osslist)
osslist[["HU3"]]
with(osslist)
?with
View(test.data.o)
# fit the model
system.time(out.eh1 <- jags(osslist, inits.e, params.e, model.h1, n.chains=4,
n.thin=10, n.iter=1100, n.burnin=100)) #47s
### THIS NEEDS TO BE UPDATED
test.data.o <- osslist
# fit the model
system.time(out.oh1 <- jags(test.data.o, inits.o, params.o, model.h1, n.chains=4,
n.thin=10, n.iter=1100, n.burnin=100)) # 49s
warnings()
test.data.o <- with(osslist, list(y=yo, nyear=nyear, nstand=nstand, Year2024=Year2024, TFCL1=TFCL1, TFNC1=TFNC1,
HB2=HB2, BS2=BS2, HU2=HU2, BU2=BU2, DW3=(DW3-3)/2, AT3=(AT3-12)/5.5, Trt3=TrtGrp3, #what is he doing here with these calculations?
nall=nall, nvisit=nvisit, Year3=Year3, Stand3=Stand3))
# fit the model
system.time(out.oh1 <- jags(test.data.o, inits.o, params.o, model.h1, n.chains=4,
n.thin=10, n.iter=1100, n.burnin=100)) # 49s
### THIS NEEDS TO BE UPDATED
test.data.o <- osslist
# fit the model
system.time(out.oh1 <- jags(test.data.o, inits.o, params.o, model.h1, n.chains=4,
n.thin=10, n.iter=1100, n.burnin=100)) # 49s
# model setup
zst.o <- apply(osslist$yo, 1, max, na.rm=T)
inits.o <- function(){list(z=zst.o)}
params.o <- c("beta0", "betaTFCL", "betaTFNC", "betaOWPB", "betaOWODF", "betaOWBLM", "betaYr24", "betaHU",
"betaBU", "betaHB", "betaBS", "betaDW", "SalvEffect", "BurnEffect",
"mu.a0", "mu.a1", "mu.a2", "mu.a3", "mu.a4", "mu.a5", "mu.a6", "mu.a7", "mu.a8", "mu.a9", "mu.a10",
"mu.a11", "mu.a12", "mu.a13", "mu.a14", "p.eff", "b0", "sd.b0", "a0")
### THIS NEEDS TO BE UPDATED
### Add in the level 3 treatment variables (HU3, etc)
test.data.o <- with(osslist, list(y=yo, nyear=nyear, nstand=nstand, Year2024=Year2024, TFCL1=TFCL1, TFNC1=TFNC1,
HB2=HB2, BS2=BS2, HU2=HU2, BU2=BU2,
DW3=(DW3-3)/2, AT3=(AT3-12)/5.5,  #what is he doing here with these calculations?
HB3=HB3, BS3=BS3, HU3=HU3, BU3=BU3,
nall=nall, nvisit=nvisit, Year3=Year3, Stand3=Stand3))
# fit the model
system.time(out.oh1 <- jags(test.data.o, inits.o, params.o, model.h1, n.chains=4,
n.thin=10, n.iter=1100, n.burnin=100)) # 49s
library(R2jags)
rm(list=ls())
source("~/Library/CloudStorage/OneDrive-Personal/Documents/Academic/OSU/Git/oss-occu/2020/2020_code_jayjones/JAGS BACI models 2019_JW_edited.r")
load("~/Library/CloudStorage/OneDrive-Personal/Documents/Academic/OSU/Git/oss-occu/LS-jas data wrangling/output_files/oss_enes_data_packaged_jw.RData")
#load("OSS ENES packaged data thru 2019.RData")
str(osslist)
# diagnostic check
myFun <- function(n, y, p){
out <- matrix(ncol=3, nrow=n)
miss <- is.na(y)
for(i in 1:n){
out[i,1] <- sum(((as.numeric(y) - rep(p[i,], 3))^2)[!miss]) # 253
out[i,2] <- sum(((rbinom(length(miss), 1, rep(p[i,], 3)) - rep(p[i,], 3))^2)[!miss]) # 252.2
}
out[,3] <- ifelse(out[,1] > out[,2], 1, 0)
out
}
# model setup
zst.o <- apply(osslist$yo, 1, max, na.rm=T)
inits.o <- function(){list(z=zst.o)}
params.o <- c("beta0", "betaTFCL", "betaTFNC", "betaOWPB", "betaOWODF", "betaOWBLM", "betaYr24", "betaHU",
"betaBU", "betaHB", "betaBS", "betaDW", "SalvEffect", "BurnEffect",
"mu.a0", "mu.a1", "mu.a2", "mu.a3", "mu.a4", "mu.a5", "mu.a6", "mu.a7", "mu.a8", "mu.a9", "mu.a10",
"mu.a11", "mu.a12", "mu.a13", "mu.a14", "p.eff", "b0", "sd.b0", "a0")
### THIS NEEDS TO BE UPDATED
### Add in the level 3 treatment variables (HU3, etc)
test.data.o <- with(osslist, list(y=yo, nyear=nyear, nstand=nstand, Year2024=Year2024, TFCL1=TFCL1, TFNC1=TFNC1,
HB2=HB2, BS2=BS2, HU2=HU2, BU2=BU2,
DW3=(DW3-3)/2, AT3=(AT3-12)/5.5,  #what is he doing here with these calculations?
HB3=HB3, BS3=BS3, HU3=HU3, BU3=BU3,
nall=nall, nvisit=nvisit, Year3=Year3, Stand3=Stand3))
# fit the model
system.time(out.oh1 <- jags(test.data.o, inits.o, params.o, model.h1, n.chains=4,
n.thin=10, n.iter=1100, n.burnin=100)) # 49s
### THIS NEEDS TO BE UPDATED
### Add in the level 3 treatment variables (HU3, etc)
test.data.o <- with(osslist, list(y=yo, nyear=nyear, nstand=nstand, nall=nall, nvisit=nvisit,
Year2024=Year2024, TFCL1=TFCL1, TFNC1=TFNC1,
OWPB1=OWPB1, OWODF1=OWODF1, OWBLM1=OWBLM1,
HB2=HB2, BS2=BS2, HU2=HU2, BU2=BU2,
DW3=(DW3-3)/2, AT3=(AT3-12)/5.5,  #what is he doing here with these calculations?
HB3=HB3, BS3=BS3, HU3=HU3, BU3=BU3,
Year3=Year3, Stand3=Stand3))
# fit the model
system.time(out.oh1 <- jags(test.data.o, inits.o, params.o, model.h1, n.chains=4,
n.thin=10, n.iter=1100, n.burnin=100)) # 49s
# check diagnostics
hist(out.oh1$BUGSoutput$summary[,8]) # ~all <1.05
out.oh1$BUGSoutput$summary[rownames(out.oh1$BUGSoutput$summary) %in% c("betaBU", "betaHB", "betaBS", "betaDW", "SalvEffect", "BurnEffect",
"mu.a0", "mu.a1"),]
#dont really know what this is doing
p.eff.oh1 <- out.oh1$BUGSoutput$sims.list$p.eff
d.oh1 <- myFun(400, y=as.numeric(osslist$yo), p=p.eff.oh1) #jw 9/18 i changed to 400 from 1000 bc error: Error in p[i, ] : subscript out of bounds
summary(d.oh1) # 0.54 => consistent with model
#dont really know what this is doing
p.eff.oh1 <- out.oh1$BUGSoutput$sims.list$p.eff
d.oh1 <- myFun(1000, y=as.numeric(osslist$yo), p=p.eff.oh1) #jw 9/18 i changed to 400 from 1000 bc error: Error in p[i, ] : subscript out of bounds
# ENES
# model setup
zst.e <- apply(osslist$ye, 1, max, na.rm=T)
inits.e <- function(){list(z=zst.e)}
params.e <- c("beta0", "betaTFCL", "betaTFNC", "betaOWPB", "betaOWODF", "betaOWBLM", "betaYr24", "betaHU",
"betaBU", "betaHB", "betaBS", "betaDW", "SalvEffect", "BurnEffect",
"mu.a0", "mu.a1", "mu.a2", "mu.a3", "mu.a4", "mu.a5", "mu.a6", "mu.a7", "mu.a8", "mu.a9", "mu.a10",
"mu.a11", "mu.a12", "mu.a13", "mu.a14", "p.eff", "b0", "sd.b0", "a0")
test.data.e <- with(osslist, list(y=ye, nyear=nyear, nstand=nstand, nall=nall, nvisit=nvisit,
Year2024=Year2024, TFCL1=TFCL1, TFNC1=TFNC1,
OWPB1=OWPB1, OWODF1=OWODF1, OWBLM1=OWBLM1,
HB2=HB2, BS2=BS2, HU2=HU2, BU2=BU2,
DW3=(DW3-3)/2, AT3=(AT3-12)/5.5,  #what is he doing here with these calculations?
HB3=HB3, BS3=BS3, HU3=HU3, BU3=BU3,
Year3=Year3, Stand3=Stand3))
# fit the model
system.time(out.eh1 <- jags(test.data.e, inits.e, params.e, model.h1, n.chains=4,
n.thin=10, n.iter=1100, n.burnin=100)) # 49s
# check diagnostics
hist(out.eh1$BUGSoutput$summary[,8]) # ~all <1.05
out.eh1$BUGSoutput$summary[rownames(out.eh1$BUGSoutput$summary) %in% c("betaBU", "betaHB", "betaBS", "betaDW", "SalvEffect", "BurnEffect",
"mu.a0", "mu.a1"),]
#dont really know what this is doing
p.eff.eh1 <- out.eh1$BUGSoutput$sims.list$p.eff
d.eh1 <- myFun(400, y=as.numeric(osslist$ye), p=p.eff.eh1) #jw 9/18 i changed to 400 from 1000 bc error: Error in p[i, ] : subscript out of bounds
summary(d.eh1)
library(R2jags)
library(grid)
library(gridExtra)
library(abind)
library(tidyr)
library(ggplot2)
expit <- function(x) 1/(1+exp(-x))
# naive occupancy
mean(apply(osslist$yo, 1, max, na.rm=T), na.rm=T) # 0.21 oss
mean(apply(osslist$ye, 1, max, na.rm=T), na.rm=T) # 0.15 enes
mean(apply(osslist$yo, 1, max, na.rm=T) + apply(osslist$ye, 1, max, na.rm=T) > 0, na.rm=T) # 0.29 any
mean(apply(osslist$yo, 1, max, na.rm=T) * apply(osslist$ye, 1, max, na.rm=T)) # 0.06 both
mean(apply(osslist$yo, 1, max, na.rm=T) - apply(osslist$ye, 1, max, na.rm=T) > 0, na.rm=T) # 0.14 oss only
mean(apply(osslist$yo, 1, max, na.rm=T) - apply(osslist$ye, 1, max, na.rm=T) < 0, na.rm=T) # 0.08 enes only
# unit-level naive occupancy
mean(unlist(lapply(split(apply(osslist$yo, 1, max, na.rm=T), osslist$Stand3), max)))
mean(unlist(lapply(split(apply(osslist$ye, 1, max, na.rm=T), osslist$Stand3), max)))
mean(unlist(lapply(split(apply(osslist$yo, 1, max, na.rm=T) + apply(osslist$ye, 1, max, na.rm=T) >0, osslist$Stand3), max)))
oh1.sl <- out.oh1$BUGSoutput$sims.list
eh1.sl <- out.eh1$BUGSoutput$sims.list
oa1.sl <- out.oa1$BUGSoutput$sims.list
ea1.sl <- out.ea1$BUGSoutput$sims.list
# trt effect estimator
exp(c(mean(oh1.sl$TrtEffect), quantile(oh1.sl$TrtEffect, probs=c(0.05, 0.25, 0.5, 0.75, 0.95)))) # 1.1 (0.6, 2.1)
out.oh1$BUGSoutput$summary[rownames(out.oh1$BUGSoutput$summary) %in%
c("beta0", "betaTFCL", "betaTFNC", "betaOWPB", "betaOWODF", "betaOWBLM", "betaYr24", "betaHU",
"betaBU", "betaHB", "betaBS", "betaDW", "SalvEffect", "BurnEffect",
"mu.a0", "mu.a1"),]
# trt effect estimator
exp(c(mean(eh1.sl$TrtEffect), quantile(eh1.sl$TrtEffect, probs=c(0.05, 0.25, 0.5, 0.75, 0.95)))) # 0.20 (0.08, 0.47)
out.eh1$BUGSoutput$summary[rownames(out.eh1$BUGSoutput$summary) %in%
c("beta0", "betaTFCL", "betaTFNC", "betaOWPB", "betaOWODF", "betaOWBLM", "betaYr24", "betaHU",
"betaBU", "betaHB", "betaBS", "betaDW", "SalvEffect", "BurnEffect",
"mu.a0", "mu.a1"),]
### FIGURE 1 ###
h1.occ <- merge(oh1.occ2, eh1.occ2, all=T)
setwd("~/Library/CloudStorage/OneDrive-Personal/Documents/Academic/OSU/Git/oss-occu/2020/2020_code_jayjones")
library(R2jags)
library(grid)
library(gridExtra)
library(abind)
library(tidyr)
library(ggplot2)
expit <- function(x) 1/(1+exp(-x))
load("OSS ENES packaged data thru 2019.RData")
str(osslist)
load("Model objects.RData")
oh1.sl <- out.oh1$BUGSoutput$sims.list
eh1.sl <- out.eh1$BUGSoutput$sims.list
oa1.sl <- out.oa1$BUGSoutput$sims.list
ea1.sl <- out.ea1$BUGSoutput$sims.list
# trt effect estimator
exp(c(mean(oh1.sl$TrtEffect), quantile(oh1.sl$TrtEffect, probs=c(0.05, 0.25, 0.5, 0.75, 0.95)))) # 1.1 (0.6, 2.1)
out.oh1$BUGSoutput$summary[rownames(out.oh1$BUGSoutput$summary) %in% c("TrtEffect", "betaPre", "betaPost", "beta0", "betaDW", "betaTF",
"betaYr14", "betaYr15", "betaYr16", "betaYr17", "betaYr18", "betaYr19",
"mu.a0", "mu.a1"),]
# mean occ by year by trt arm
temp.oh1 <- with(oh1.sl, cbind(beta0+betaTF/2, beta0+betaYr14+betaTF/2, beta0+betaYr15+betaTF/2, beta0+betaYr16+betaTF/2,
beta0 + betaYr17 + betaTF/2, beta0 + betaYr18 + betaTF/2, beta0 + betaYr19 + betaTF/2,
beta0+betaPre+betaTF/2, beta0+betaPre+betaYr14+betaTF/2, beta0+betaPre+betaYr15+betaTF/2,
beta0+betaPost+betaYr16+betaTF/2, beta0 + betaPost + betaYr17 + betaTF/2,
beta0 + betaPost + betaYr18 + betaTF/2, beta0+betaPost+betaYr19+betaTF/2))
oh1.occ <- expand.grid(Quantity=c("Mean", "x5", "x25", "x75", "x95"), Year=2013:2019, Trt=c("Control", "Treatment"))
oh1.occ$Occ <- as.numeric(apply(temp.oh1, 2, function(x) expit(c(mean(x), quantile(x, probs=c(0.05, 0.25, 0.75, 0.95))))))
oh1.occ$HarvestState <- ifelse(oh1.occ$Year>2015 & oh1.occ$Trt=="Treatment", "Cut", "Timbered")
#oh1.occ2 <- spread(oh1.occ, Quantity, Occ) # replaced with code below, spread is now pivot_wider
oh1.occ2 <- pivot_wider(oh1.occ, names_from = Quantity, values_from = Occ)
oh1.occ2$Species <- rep("OSS", nrow(oh1.occ2))
View(oh1.occ2)
View(temp.oh1)
exp(c(mean(eh1.sl$TrtEffect), quantile(eh1.sl$TrtEffect, probs=c(0.05, 0.25, 0.5, 0.75, 0.95)))) # 0.20 (0.08, 0.47)
out.eh1$BUGSoutput$summary[rownames(out.eh1$BUGSoutput$summary) %in% c("TrtEffect", "betaPre", "betaPost", "beta0", "betaDW", "betaTF",
"betaYr14", "betaYr15", "betaYr16", "betaYr17", "betaYr18", "betaYr19",
"mu.a0", "mu.a1"),]
# mean occ by year by trt arm
temp.eh1 <- with(eh1.sl, cbind(beta0+betaTF/2, beta0+betaYr14+betaTF/2, beta0+betaYr15+betaTF/2, beta0+betaYr16+betaTF/2,
beta0 + betaYr17 + betaTF/2, beta0 + betaYr18 + betaTF/2, beta0 + betaYr19 + betaTF/2,
beta0+betaPre+betaTF/2, beta0+betaPre+betaYr14+betaTF/2, beta0+betaPre+betaYr15+betaTF/2,
beta0+betaPost+betaYr16+betaTF/2, beta0 + betaPost + betaYr17 + betaTF/2,
beta0 + betaPost + betaYr18 + betaTF/2, beta0+betaPost+betaYr19+betaTF/2))
eh1.occ <- expand.grid(Quantity=c("Mean", "x5", "x25", "x75", "x95"), Year=2013:2019, Trt=c("Control", "Treatment"))
eh1.occ$Occ <- as.numeric(apply(temp.eh1, 2, function(x) expit(c(mean(x), quantile(x, probs=c(0.05, 0.25, 0.75, 0.95))))))
eh1.occ$HarvestState <- ifelse(eh1.occ$Year>2015 & eh1.occ$Trt=="Treatment", "Cut", "Timbered")
#eh1.occ2 <- spread(eh1.occ, Quantity, Occ) # replaced with code below, spread is now pivot_wider
eh1.occ2 <- pivot_wider(eh1.occ, names_from = Quantity, values_from = Occ)
eh1.occ2$Species <- rep("ENES", nrow(eh1.occ2))
View(eh1.occ2)
### FIGURE 1 ###
h1.occ <- merge(oh1.occ2, eh1.occ2, all=T)
h1.occ$Species <- factor(h1.occ$Species, levels=c("OSS", "ENES"))
h1.occ$Year <- with(h1.occ, ifelse(Trt=="Control", Year-0.05, Year+0.05))
oh1.occ2$Year <- with(oh1.occ2, ifelse(Trt=="Control", Year-0.05, Year+0.05))
ggplot(h1.occ, aes(Year, Mean, shape=Trt)) + geom_point(cex=2) + geom_line(aes(group=Trt)) +
theme_bw() + ylim(c(0,1)) + ylab("Occupancy probability") + facet_grid(Trt~Species) +
scale_shape_manual(values=c(16, 1)) + theme(legend.title=element_blank(), legend.position="top") +
geom_segment(aes(x=Year, y=x25, xend=Year, yend=x5)) +
geom_segment(aes(x=Year, y=x75, xend=Year, yend=x95))
#  win.metafile("OSS 2016 - Occ vs. Year by Trt.emf", width=8, height=6)
ggplot(h1.occ, aes(Year, Mean, shape=Trt)) + geom_point(cex=2) + geom_line(aes(group=Trt)) +
theme_bw() + ylim(c(0,1)) + ylab("Occupancy probability") + facet_grid(Species ~ Trt) +
scale_shape_manual(values=c(16, 1)) + theme(legend.title=element_blank(), legend.position="top") +
geom_segment(aes(x=Year, y=x25, xend=Year, yend=x5)) +
geom_segment(aes(x=Year, y=x75, xend=Year, yend=x95))
ggplot(h1.occ, aes(Year, Mean, color=Trt, shape=Trt)) + geom_point(cex=2) +
scale_shape_manual(values=c(16,1)) + geom_line(aes(group=Trt, linetype=Trt)) +
theme_bw() + ylim(c(0,1)) + ylab("Occupancy probability") + facet_wrap(~Species) +
theme(legend.title=element_blank(), legend.position="top") +
geom_segment(aes(x=Year, y=x25, xend=Year, yend=x5)) +
geom_segment(aes(x=Year, y=x75, xend=Year, yend=x95)) +
geom_vline(xintercept=2015.5, lty=2)
ggplot(oh1.occ2, aes(Year, Mean, color=Trt, shape=Trt)) + geom_point(cex=2) +
scale_shape_manual(values=c(16,1)) + geom_line(aes(group=Trt)) +
theme_bw() + ylim(c(0,1)) + ylab("Occupancy probability (90% CRI)") +
theme(legend.title=element_blank(), legend.position="top") +
geom_segment(aes(x=Year, y=x25, xend=Year, yend=x5)) +
geom_segment(aes(x=Year, y=x75, xend=Year, yend=x95)) +
geom_vline(xintercept=2015.5, lty=2)
# mean occ by trt arm
temp.oh1 <- with(oh1.sl, cbind(beta0 + betaYr14/7 + betaYr15/7 + betaYr16/7 + betaYr17/7 +
betaYr18/7 + betaYr19/7 + betaTF/2,
beta0 + betaYr14/7 + betaYr15/7 + betaYr16/7 + betaYr17/7 +
betaYr18/7 + betaYr19/7 + betaTF/2 + betaPost - betaPre))
oh1.occ <- expand.grid(Quantity=c("Mean", "x5", "x25", "x75", "x95"), Trt=c("Control", "Treatment"))
oh1.occ$Occ <- as.numeric(apply(temp.oh1, 2, function(x) expit(c(mean(x), quantile(x, probs=c(0.05, 0.25, 0.75, 0.95))))))
oh1.occ2 <- spread(oh1.occ, Quantity, Occ)
oh1.occ2$Species <- rep("OSS", nrow(oh1.occ2))
oh1.occ2$Response <- rep("Occ", nrow(oh1.occ2))
# mean occ by trt arm
temp.eh1 <- with(eh1.sl, cbind(beta0 + betaYr14/7 + betaYr15/7 + betaYr16/7 + betaYr17/7 +
betaYr18/7 + betaYr19/7 + betaTF/2,
beta0 + betaYr14/7 + betaYr15/7 + betaYr16/7 + betaYr17/7 +
betaYr18/7 + betaYr19/7 + betaTF/2 + betaPost - betaPre))
eh1.occ <- expand.grid(Quantity=c("Mean", "x5", "x25", "x75", "x95"), Trt=c("Control", "Treatment"))
eh1.occ$Occ <- as.numeric(apply(temp.eh1, 2, function(x) expit(c(mean(x), quantile(x, probs=c(0.05, 0.25, 0.75, 0.95))))))
eh1.occ2 <- spread(eh1.occ, Quantity, Occ)
eh1.occ2$Species <- rep("ENES", nrow(eh1.occ2))
eh1.occ2$Response <- rep("Occ", nrow(eh1.occ2))
boxplot(split(osslist$DW3, osslist$Trt3)) # very similar distributions
summary(osslist$DW3) # 0, 1, 3, 5, 18
quantile(osslist$DW3, probs=(0:20)/20) # 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5, 6, 7, 8, 18
lapply(split(osslist$DW3, osslist$Trt3), mean)
lapply(split(osslist$DW3, osslist$Trt3), sd)
nsim <- 2000
exp(c(mean(0.5*oh1.sl$betaDW), quantile(0.5*oh1.sl$betaDW, probs=c(0.05, 0.25, 0.5, 0.75, 0.95)))) # 1.2 (1.1, 1.3)
oh1.dw.mat <- matrix(nrow=8, ncol=nsim)
samp <- sample(1:length(oh1.sl$beta0), nsim)   #Error in sample.int(length(x), size, replace, prob) : cannot take a sample larger than the population when 'replace = FALSE'
for(i in 1:nsim){
oh1.dw.mat[,i] <- oh1.sl$beta0[samp[i]] + oh1.sl$betaTF[samp[i]]/2 + oh1.sl$betaDW[samp[i]]*((0:7)-3)/2 +
oh1.sl$betaYr14[samp[i]]/7 + oh1.sl$betaYr15[samp[i]]/7 + oh1.sl$betaYr16[samp[i]]/7 + oh1.sl$betaYr17[samp[i]]/7 +
oh1.sl$betaYr18[samp[i]]/7 + oh1.sl$betaYr19[samp[i]]/7
}
library(R2jags)
rm(list=ls())
load("~/Library/CloudStorage/OneDrive-Personal/Documents/Academic/OSU/Git/oss-occu/LS-jas data wrangling/output_files/oss_enes_data_packaged_jw.RData")
str(osslist)
source("~/Library/CloudStorage/OneDrive-Personal/Documents/Academic/OSU/Git/oss-occu/2020/2020_code_jayjones/JAGS BACI models 2019_JW_edited.r")
# diagnostic check
myFun <- function(n, y, p){
out <- matrix(ncol=3, nrow=n)
miss <- is.na(y)
for(i in 1:n){
out[i,1] <- sum(((as.numeric(y) - rep(p[i,], 3))^2)[!miss]) # 253
out[i,2] <- sum(((rbinom(length(miss), 1, rep(p[i,], 3)) - rep(p[i,], 3))^2)[!miss]) # 252.2
}
out[,3] <- ifelse(out[,1] > out[,2], 1, 0)
out
}
# model setup
zst.o <- apply(osslist$yo, 1, max, na.rm=T)
inits.o <- function(){list(z=zst.o)}
params.o <- c("beta0", "betaTFCL", "betaTFNC", "betaOWPB", "betaOWODF", "betaOWBLM", "betaYr24", "betaHU",
"betaBU", "betaHB", "betaBS", "betaDW", "SalvEffect", "BurnEffect",
"mu.a0", "mu.a1", "mu.a2", "mu.a3", "mu.a4", "mu.a5", "mu.a6", "mu.a7", "mu.a8", "mu.a9", "mu.a10",
"mu.a11", "mu.a12", "mu.a13", "mu.a14", "p.eff", "b0", "sd.b0", "a0")
test.data.o <- with(osslist, list(y=yo, nyear=nyear, nstand=nstand, nall=nall, nvisit=nvisit,
Year2024=Year2024, TFCL1=TFCL1, TFNC1=TFNC1,
OWPB1=OWPB1, OWODF1=OWODF1, OWBLM1=OWBLM1,
HB2=HB2, BS2=BS2, HU2=HU2, BU2=BU2,
DW3=(DW3-3)/2, AT3=(AT3-12)/5.5,  #what is he doing here with these calculations?
HB3=HB3, BS3=BS3, HU3=HU3, BU3=BU3,
Year3=Year3, Stand3=Stand3))
# fit the model
system.time(out.oh1 <- jags(test.data.o, inits.o, params.o, model.h1, n.chains=4,
n.thin=10, n.iter=1100, n.burnin=100)) # 49s
# check diagnostics
hist(out.oh1$BUGSoutput$summary[,8]) # ~all <1.05
out.oh1$BUGSoutput$summary[rownames(out.oh1$BUGSoutput$summary) %in% c("betaBU", "betaHB", "betaBS", "betaDW", "SalvEffect", "BurnEffect",
"mu.a0", "mu.a1"),]
#dont really know what this is doing
p.eff.oh1 <- out.oh1$BUGSoutput$sims.list$p.eff
d.oh1 <- myFun(400, y=as.numeric(osslist$yo), p=p.eff.oh1) #jw 9/18 i changed to 400 from 1000 bc error: Error in p[i, ] : subscript out of bounds
summary(d.oh1)
# model setup
zst.e <- apply(osslist$ye, 1, max, na.rm=T)
inits.e <- function(){list(z=zst.e)}
params.e <- c("beta0", "betaTFCL", "betaTFNC", "betaOWPB", "betaOWODF", "betaOWBLM", "betaYr24", "betaHU",
"betaBU", "betaHB", "betaBS", "betaDW", "SalvEffect", "BurnEffect",
"mu.a0", "mu.a1", "mu.a2", "mu.a3", "mu.a4", "mu.a5", "mu.a6", "mu.a7", "mu.a8", "mu.a9", "mu.a10",
"mu.a11", "mu.a12", "mu.a13", "mu.a14", "p.eff", "b0", "sd.b0", "a0")
test.data.e <- with(osslist, list(y=ye, nyear=nyear, nstand=nstand, nall=nall, nvisit=nvisit,
Year2024=Year2024, TFCL1=TFCL1, TFNC1=TFNC1,
OWPB1=OWPB1, OWODF1=OWODF1, OWBLM1=OWBLM1,
HB2=HB2, BS2=BS2, HU2=HU2, BU2=BU2,
DW3=(DW3-3)/2, AT3=(AT3-12)/5.5,  #what is he doing here with these calculations?
HB3=HB3, BS3=BS3, HU3=HU3, BU3=BU3,
Year3=Year3, Stand3=Stand3))
# fit the model
system.time(out.eh1 <- jags(test.data.e, inits.e, params.e, model.h1, n.chains=4,
n.thin=10, n.iter=1100, n.burnin=100)) # 21s
# fit the model
system.time(out.oh1 <- jags(test.data.o, inits.o, params.o, model.h1, n.chains=4,
#n.thin=10, n.iter=1100, n.burnin=100)) # 22s
n.thin=10, n.iter=11000, n.burnin=1000)) # 1968s
# check diagnostics
hist(out.oh1$BUGSoutput$summary[,8]) # ~all <1.05
out.oh1$BUGSoutput$summary[rownames(out.oh1$BUGSoutput$summary) %in%
c("betaBU", "betaHB", "betaBS", "betaHU", "betaDW",
"SalvEffect", "BurnEffect", "mu.a0", "mu.a1"),]
#dont really know what this is doing
p.eff.oh1 <- out.oh1$BUGSoutput$sims.list$p.eff
d.oh1 <- myFun(1000, y=as.numeric(osslist$yo), p=p.eff.oh1) #jw 9/18 i changed to 400 from 1000 bc error: Error in p[i, ] : subscript out of bounds
summary(d.oh1)
d.oh1 <- myFun(400, y=as.numeric(osslist$yo), p=p.eff.oh1) #jw 9/18 i changed to 400 from 1000 bc error: Error in p[i, ] : subscript out of bounds
summary(d.oh1)
# model setup
zst.e <- apply(osslist$ye, 1, max, na.rm=T)
inits.e <- function(){list(z=zst.e)}
params.e <- c("beta0", "betaTFCL", "betaTFNC", "betaOWPB", "betaOWODF", "betaOWBLM", "betaYr24", "betaHU",
"betaBU", "betaHB", "betaBS", "betaDW", "SalvEffect", "BurnEffect",
"mu.a0", "mu.a1", "mu.a2", "mu.a3", "mu.a4", "mu.a5", "mu.a6", "mu.a7", "mu.a8", "mu.a9", "mu.a10",
"mu.a11", "mu.a12", "mu.a13", "mu.a14", "p.eff", "b0", "sd.b0", "a0")
test.data.e <- with(osslist, list(y=ye, nyear=nyear, nstand=nstand, nall=nall, nvisit=nvisit,
Year2024=Year2024, TFCL1=TFCL1, TFNC1=TFNC1,
OWPB1=OWPB1, OWODF1=OWODF1, OWBLM1=OWBLM1,
HB2=HB2, BS2=BS2, HU2=HU2, BU2=BU2,
DW3=(DW3-3)/2, AT3=(AT3-12)/5.5,  #what is he doing here with these calculations?
HB3=HB3, BS3=BS3, HU3=HU3, BU3=BU3,
Year3=Year3, Stand3=Stand3))
# fit the model
system.time(out.eh1 <- jags(test.data.e, inits.e, params.e, model.h1, n.chains=4,
#n.thin=10, n.iter=1100, n.burnin=100)) # 21s
n.thin=10, n.iter=11000, n.burnin=1000)) # 1968s
# check diagnostics
hist(out.eh1$BUGSoutput$summary[,8]) # ~all <1.05
out.eh1$BUGSoutput$summary[rownames(out.eh1$BUGSoutput$summary) %in%
c("betaBU", "betaHB", "betaBS", "betaHU", "betaDW",
"SalvEffect", "BurnEffect", "mu.a0", "mu.a1"),]
#dont really know what this is doing
p.eff.eh1 <- out.eh1$BUGSoutput$sims.list$p.eff
d.eh1 <- myFun(400, y=as.numeric(osslist$ye), p=p.eff.eh1)
summary(d.eh1)
save(out.oh1, out.eh1, file="jags-occu-model-objects.RData")
# trt effect estimator
exp(c(mean(oh1.sl$TrtEffect), quantile(oh1.sl$TrtEffect, probs=c(0.05, 0.25, 0.5, 0.75, 0.95)))) # 1.1 (0.6, 2.1)
oh1.sl <- out.oh1$BUGSoutput$sims.list
eh1.sl <- out.eh1$BUGSoutput$sims.list
# trt effect estimator
exp(c(mean(oh1.sl$TrtEffect), quantile(oh1.sl$TrtEffect, probs=c(0.05, 0.25, 0.5, 0.75, 0.95)))) # 1.1 (0.6, 2.1)
out.oh1$BUGSoutput$summary[rownames(out.oh1$BUGSoutput$summary) %in%
c("beta0", "betaTFCL", "betaTFNC", "betaOWPB", "betaOWODF", "betaOWBLM", "betaYr24", "betaHU",
"betaBU", "betaHB", "betaBS", "betaDW", "SalvEffect", "BurnEffect",
"mu.a0", "mu.a1"),]
