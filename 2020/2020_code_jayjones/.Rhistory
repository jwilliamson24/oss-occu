rm(list=ls())
library(ggplot2)
setwd("C:/Users/jasmi/OneDrive/Documents/Academic/OSU/Git/RAFWE.WFGRS.2023")
load("./04.RCodingandFork/simulatedmodels/model.RData")
load("./04.RCodingandFork/datasetcreation/sallysonwood.RData")
sallysandwoodplot <- ggplot(model, aes(DBH, Sallys)) +
geom_point() +
stat_smooth(method = lm)
sallysandwoodplot
png(file = "./simulatedgraphs/sallygraph.png")
ggplot(model, aes(DBH, Sallys)) +
geom_point() +
stat_smooth(method = lm)
dev.off()
rm(list=ls())
setwd("C:/Users/jasmi/OneDrive/Documents/Academic/OSU/Git/RAFWE.WFGRS.2023")
load("./04.RCodingandFork/simulatedmodels/model.RData")
load("./04.RCodingandFork/datasetcreation/sallysonwood.RData")
summary(model)
sadness <- confint(model)
setwd("C:/Users/jasmi/OneDrive/Documents/Academic/OSU/Git/RAFWE.WFGRS.2023")
save(sadness, file = "./04.RCodingandFork/simulatedanalysis/sadness.RData")
View(sadness)
View(sadness)
write.table(sadness, file="./simulatedanalysis/itoldyou.txt", sep = ",", quote = FALSE)
load("C:/Users/jasmi/Downloads/1-s2.0-S0378112719324181-mmc4/Appendix S2_V3.RData")
View(osslist)
summary(osslist)
load("C:/Users/jasmi/Downloads/1-s2.0-S0378112719324181-mmc4/Appendix S2_V3.RData")
View(osslist)
library(R2jags)
install.packages(JAGS)
library(R2jags)
install.packages(R2jags)
install.packages(rjags)
install.packages("R2jags")
library(R2jags)
install.packages("rjags")
library(R2jags)
library(rjags)
remove.packages("rjags")
library(devtools)
install.packages("devtools")
library(devtools)
find_rtools()
install.packages("rjags")
library(R2jags)
library(R2jags)
library(plyr)
# hierarchical occupancy model
model.h <- function(){
# priors
aInt.mean ~ dnorm(0,0.25)
aInt.sd ~ dgamma(2, 1)
aInt.tau <- 1/(aInt.sd * aInt.sd)
bTrt ~ dnorm(0, 0.25)
bYr ~ dnorm(0, 0.25)
bTrtYr ~ dnorm(0, 0.25)
gInt ~ dnorm(0, 0.333)
# stand-level model
for(i in 1:R){
b0[i] ~ dnorm(aInt.mean, aInt.tau)
}
for(i in 1:N){
bMean[i] <- b0[StandID[i]] + bTrt*Trt[i] + bYr*Yr[i] + bTrtYr*TrtYr[i]
}
# plot level model
for(j in 1:n){
logit(psi[j]) <- bMean[StandYr[j]]
Z[j] ~ dbin(psi[j], 1)
for(k in 1:3){
logit(p[j,k]) <- gInt
p.eff[j,k] <- Z[j]*p[j,k]
y[j,k] ~ dbin(p.eff[j,k], 1)
}
}
}
genData1 <- function(R, S, posttrt, det){
preTrtOcc <- 0.70
beta0 <- log(preTrtOcc/(1-preTrtOcc))
beta3 <- log((posttrt/(1-posttrt))/(preTrtOcc/(1-preTrtOcc)))
Dat <- expand.grid(Yr=c(0,1), Stand=1:R)
Dat$Trt <- ifelse(Dat$Stand <= R/2, 0, 1)
Dat$StandYr <- 1:nrow(Dat)
b0 <- rnorm(R, mean=0, sd=1)
Dat$b0 <- b0[Dat$Stand]
Dat$logitpsi <- with(Dat, beta0 + b0 + beta3*Trt*Yr)
Dat$psi <- 1/(1+exp(-Dat$logitpsi))
Dat2 <- data.frame(Yr = rep(Dat$Yr, each=S),
Stand = rep(Dat$Stand, each=S),
Trt = rep(Dat$Trt, each=S),
StandYr = rep(Dat$StandYr, each=S),
psi = rep(Dat$psi, each=S))
occ <- rbinom(nrow(Dat2), 1, Dat2$psi)
detection <- cbind(rbinom(nrow(Dat2), 1, det*occ),
rbinom(nrow(Dat2), 1, det*occ),
rbinom(nrow(Dat2), 1, det*occ))
zst <- apply(detection, 1, max)
test.data <- list(y=detection, R=R, N=R*2, n=R*S*2, Trt=Dat$Trt, Yr=Dat$Yr, TrtYr= Dat$Trt * Dat$Yr,
StandID=Dat$Stand, StandYr = Dat2$StandYr)
list(test.data=test.data, zst=zst, Z=occ, psi=Dat2$psi)
}
fit1 <- function(dat, params, model, n.chains, n.thin, n.iter, n.burnin){
inits <- function(){list(Z=dat$zst)}
out <- jags(data=dat$test.data, inits=inits, parameters.to.save=params, model.file=model,
n.chains=n.chains, n.thin=n.thin, n.iter=n.iter, n.burnin=n.burnin)
out
}
runSim <- function(sets, nsim, params, model, n.chains, n.thin, n.iter, n.burnin, dfile){
nsets <- nrow(sets)
for(i in 1:nsets){
R <- sets$R[i]
S <- sets$S[i]
posttrt <- sets$posttrt[i]
det <- sets$det[i]
for(j in 1:nsim){
dat.ij <- genData1(R=R, S=S, posttrt=posttrt, det=det)
fm.ij <- fit1(dat.ij, params=params, model=model, n.chains=n.chains, n.thin=n.thin, n.iter=n.iter, n.burnin=n.burnin)
fname <- paste("Nstand.", R, "_Nsub.", S, "_Posttrt.", posttrt, "_det.", det, "_sim.", j, ".csv",sep="")
write.csv(fm.ij$BUGSoutput$summary, paste(dfile, fname, sep=""))
}
}
}
sets <- expand.grid(R=c(20, 30, 40, 50, 60), S=c(5, 7, 9), posttrt=c(0.1, 0.3), det=c(0.15, 0.30, 0.50))
params <- c("aInt.mean", "bTrt", "bYr", "bTrtYr", "gInt")
nsim=500
system.time(temp <- runSim(sets=sets, nsim=nsim, params=params, model=model.h, n.chains=3, n.thin=10, n.iter=10000, n.burnin=5000, dfile="C:/"))
# Multi-scale occupancy model
model.m <- function(){
alphaTrt ~ dnorm(0, 0.333)
alphaYr ~ dnorm(0, 0.333)
alphaTrtYr ~ dnorm(0, 0.1)
beta0 ~ dnorm(0, 0.333)
gamma0 ~ dnorm(0, 0.333)
a0.mean ~ dnorm(0, 0.1)
a0.var ~ dgamma(1, 1)
a0.tau <- 1/a0.var
for(i in 1:R){ # stands
a0[i] ~ dnorm(a0.mean, a0.tau)
}
for (i in 1:N){ # Stand-years
psi[i] <- a0[StandID1[i]] + alphaTrt*Trt[i] + alphaYr*Yr[i] + alphaTrtYr*TrtYr[i]
psip[i] <- 1/(1+exp(-psi[i]))
z[i] ~ dbern(psip[i])
}
for(j in 1:n){ # plots
theta[j] <- beta0
theta.eff[j] <- z[StandYr[j]]*(1/(1+exp(-theta[j])))
u[j] ~ dbern(theta.eff[j])
for(k in 1:V){ # visits
p[j,k] <- gamma0
p.eff[j,k] <- u[j] * (1/(1+exp(-p[j,k])))
y[j,k] ~ dbern(p.eff[j,k])
}
}
}
genData1 <- function(R, S, posttrt, detProb){
preTrtProb <- 0.95
subPlotProb <- 0.5
beta0 <- log(preTrtProb/(1-preTrtProb))
beta3 <- log((posttrt/(1-posttrt))/(preTrtProb/(1-preTrtProb)))
Dat1 <- expand.grid(Yr=c(0,1), Stand=1:R)
Dat1$Trt <- ifelse(Dat1$Stand <= R/2, 0, 1)
b0 <- rnorm(R, mean=0, sd=1)
Dat1$b0 <- b0[Dat1$Stand]
Dat1$logitpsi <- with(Dat1, beta0 + b0 + beta3*Trt*Yr)
Dat1$psi <- 1/(1+exp(-Dat1$logitpsi))
Dat1$StandOcc <- rbinom(nrow(Dat1), 1, Dat1$psi)
Dat2 <- data.frame(Yr=rep(Dat1$Yr, each=S),
Stand=rep(Dat1$Stand, each=S),
Trt=rep(Dat1$Trt, each=S),
StandOcc=rep(Dat1$StandOcc, each=S),
StandYr=rep(1:nrow(Dat1), each=S))
Dat2$SubPlotOcc <- rbinom(nrow(Dat2), 1, subPlotProb*Dat2$StandOcc)
zst <- (ddply(Dat2, c("Yr", "Stand"), function(x) data.frame(zst=max(x$SubPlotOcc))))$zst
detection <- cbind(rbinom(nrow(Dat2), 1, detProb*Dat2$SubPlotOcc),
rbinom(nrow(Dat2), 1, detProb*Dat2$SubPlotOcc),
rbinom(nrow(Dat2), 1, detProb*Dat2$SubPlotOcc))
ust <- apply(detection, 1, max)
test.data <- list(y=detection, R=R, N=R*2, n=R*S*2, V=3, Trt=Dat1$Trt, Yr=Dat1$Yr,
TrtYr=Dat1$Trt*Dat1$Yr, StandYr=Dat2$StandYr, StandID1=Dat1$Stand)
list(test.data=test.data, zst=zst, ust=ust, Z=Dat1$StandOcc, psi=Dat1$psi, U=Dat2$SubPlotOcc)
}
fit1 <- function(dat, params, model, n.chains, n.thin, n.iter, n.burnin){
inits <- function(){list(z=rep(1, dat$test.data$N), u=rep(1, dat$test.data$n))}
out <- jags(data=dat$test.data, inits=inits, parameters.to.save=params, model.file=model,
n.chains=n.chains, n.thin=n.thin, n.iter=n.iter, n.burnin=n.burnin)
out
}
runSim <- function(sets, nsim, params, model, n.chains, n.thin, n.iter, n.burnin, dfile){
nsets <- nrow(sets)
for(i in 1:nsets){
R <- sets$R[i]
S <- sets$S[i]
posttrt <- sets$posttrt[i]
detProb <- sets$detProb[i]
for(j in 1:nsim){
dat.ij <- genData1(R=R, S=S, posttrt=posttrt, detProb=detProb)
fm.ij <- fit1(dat.ij, params=params, model=model, n.chains=n.chains, n.thin=n.thin, n.iter=n.iter, n.burnin=n.burnin)
fname <- paste("Nstand.", R, "_Nsub.", S, "_Posttrt.", posttrt, "_det.", detProb, "_sim.", j, ".csv",sep="")
write.csv(fm.ij$BUGSoutput$summary, paste(dfile, fname, sep=""))
}
}
}
sets <- expand.grid(R=c(20, 30, 40, 50, 60), S=c(5, 7, 9), posttrt=c(0.3, 0.6), det=c(0.15, 0.30, 0.50))
params <- c("a0.mean", "alphaTrt", "alphaYr", "alphaTrtYr", "beta0", "gamma0")
nsim=500
system.time(temp <- runSim(sets=sets, nsim=nsim, params=params, model=model.m, n.chains=3, n.thin=10, n.iter=10000, n.burnin=5000, dfile="C:/"))
load("~/Academic/OSU/Git/oss-occu/2020/2020 appendix data.RData")
#
model.h1 <- function(){
# priors for occupancy model
beta0 ~ dnorm(0, 0.333)
betaTF ~ dnorm(0, 1)
betaYr14 ~ dnorm(0, 1)
betaYr15 ~ dnorm(0, 1)
betaYr16 ~ dnorm(0, 1)
betaYr17 ~ dnorm(0, 1)
betaYr18 ~ dnorm(0, 1)
betaYr19 ~ dnorm(0, 1)
betaPre ~ dnorm(0, 4) # Trt and Control sites should be similar pre-harvest
betaPost ~ dnorm(0, 0.25)
betaDW ~ dnorm(0, 0.25)
sd.b0 ~ dgamma(1, 2)
tau.b0 <- 1/(sd.b0 * sd.b0)
# treatment effect estimator
TrtEffect <- betaPost - betaPre
# priors for detection random effects
mu.a0 ~ dnorm(0, 0.333)
mu.a1 ~ dnorm(0, 1) # Trt
mu.a2 ~ dnorm(0, 1) # AT
mu.a3 ~ dnorm(0, 1) # AT^2
mu.a4 ~ dnorm(0, 1) # Trt*AT
mu.a5 ~ dnorm(0, 1) # Trt*AT^2
sd.a0 ~ dgamma(1, 2)
sd.a1 ~ dgamma(2, 1) # hyper-prior for Trt effect; allow for greater prior uncertainty than other effects.
sd.a2 ~ dgamma(1, 2)
sd.a3 ~ dgamma(1, 2)
sd.a4 ~ dgamma(1, 2)
sd.a5 ~ dgamma(1, 2)
tau.a0 <- 1/(sd.a0 * sd.a0)
tau.a1 <- 1/(sd.a1 * sd.a1)
tau.a2 <- 1/(sd.a2 * sd.a2)
tau.a3 <- 1/(sd.a3 * sd.a3)
tau.a4 <- 1/(sd.a4 * sd.a4)
tau.a5 <- 1/(sd.a5 * sd.a5)
# detection model random effects (by year)
for(i in 1:nyear){
a0[i] ~ dnorm(mu.a0, tau.a0)
aTrt[i] ~ dnorm(mu.a1, tau.a1)
aAT[i] ~ dnorm(mu.a2, tau.a2)
aAT2[i] ~ dnorm(mu.a3, tau.a3)
aTrtAT[i] ~ dnorm(mu.a4, tau.a4)
aTrtAT2[i] ~ dnorm(mu.a5, tau.a5)
}
for(i in 1:nstand){
# occupancy stand-level effects
mu1[i] <- beta0 + betaTF*TFCL1[i]
mu1i[i] ~ dnorm(mu1[i], tau.b0)
b0[i] <- mu1i[i] - mu1[i] # stand-level random effect
for(k in 1:nyear){
# occupancy stand-year level effects
mu2ik[i,k] <- mu1i[i] + betaYr14*Year2014[k,i] + betaYr15*Year2015[k,i] + betaYr16*Year2016[k,i] +
betaYr17*Year2017[k, i] + betaYr18*Year2018[k, i] + betaYr19*Year2019[k, i] +
betaPre*PreTrt2[k,i] + betaPost*PostTrt2[k,i]
}
}
for(i in 1:nall){
# occupancy plot-level effects
mu3ikj[i] <- mu2ik[Stand3[i], Year3[i]] + betaDW*DW3[i]
logit(psi[i]) <- mu3ikj[i]
z[i] ~ dbern(psi[i])
# detection model
logit(p[i]) <- a0[Year3[i]] + aTrt[Year3[i]]*Trt3[i] + aAT[Year3[i]]*AT3[i] + aAT2[Year3[i]]*AT3[i]*AT3[i] +
aTrtAT[Year3[i]]*Trt3[i]*AT3[i] + aTrtAT2[Year3[i]]*Trt3[i]*AT3[i]*AT3[i]
p.eff[i] <- z[i] * p[i]
for(j in 1:nvisit){
# likelihood
y[i,j] ~ dbern(p.eff[i])
}
}
}
model.a1 <- function(){
# Royle-Nichols abundance model
# priors for occupancy model
beta0 ~ dnorm(0, 0.333)
betaTF ~ dnorm(0, 1)
betaYr14 ~ dnorm(0, 1)
betaYr15 ~ dnorm(0, 1)
betaYr16 ~ dnorm(0, 1)
betaYr17 ~ dnorm(0, 1)
betaYr18 ~ dnorm(0, 1)
betaYr19 ~ dnorm(0, 1)
betaPre ~ dnorm(0, 4) # Trt and Control sites should be similar pre-harvest
betaPost ~ dnorm(0, 0.25)
betaDW ~ dnorm(0, 0.25)
sd.b0 ~ dgamma(1, 2)
tau.b0 <- 1/(sd.b0 * sd.b0)
# treatment effect estimator
TrtEffect <- betaPost - betaPre
# priors for detection random effects
mu.a0 ~ dnorm(0, 0.333)
mu.a1 ~ dnorm(0, 1) # Trt
mu.a2 ~ dnorm(0, 1) # AT
mu.a3 ~ dnorm(0, 1) # AT^2
mu.a4 ~ dnorm(0, 1) # Trt*AT
mu.a5 ~ dnorm(0, 1) # Trt*AT^2
sd.a0 ~ dgamma(1, 2)
sd.a1 ~ dgamma(2, 1)
sd.a2 ~ dgamma(1, 2)
sd.a3 ~ dgamma(1, 2)
sd.a4 ~ dgamma(1, 2)
sd.a5 ~ dgamma(1, 2)
tau.a0 <- 1/(sd.a0 * sd.a0)
tau.a1 <- 1/(sd.a1 * sd.a1)
tau.a2 <- 1/(sd.a2 * sd.a2)
tau.a3 <- 1/(sd.a3 * sd.a3)
tau.a4 <- 1/(sd.a4 * sd.a4)
tau.a5 <- 1/(sd.a5 * sd.a5)
# detection model random effects (by year)
for(i in 1:nyear){
a0[i] ~ dnorm(mu.a0, tau.a0)
aTrt[i] ~ dnorm(mu.a1, tau.a1)
aAT[i] ~ dnorm(mu.a2, tau.a2)
aAT2[i] ~ dnorm(mu.a3, tau.a3)
aTrtAT[i] ~ dnorm(mu.a4, tau.a4)
aTrtAT2[i] ~ dnorm(mu.a5, tau.a5)
}
for(i in 1:nstand){
# occupancy stand-level effects
mu1[i] <- beta0 + betaTF*TFCL1[i]
mu1i[i] ~ dnorm(mu1[i], tau.b0)
b0[i] <- mu1i[i] - mu1[i] # random effect
for(k in 1:nyear){
# occupancy stand-year level effects
mu2ik[i,k] <- mu1i[i] + betaYr14*Year2014[k,i] + betaYr15*Year2015[k,i] + betaYr16*Year2016[k,i] +
betaYr17*Year2017[k, i] + betaYr18*Year2018[k, i] + betaYr19*Year2019[k, i] +
betaPre*PreTrt2[k,i] + betaPost*PostTrt2[k,i]
}
}
for(i in 1:nall){
# occupancy plot-level effects
mu3ikj[i] <- mu2ik[Stand3[i], Year3[i]] + betaDW*DW3[i]
log(lambda[i]) <- mu3ikj[i]
N[i] ~ dpois(lambda[i])
# detection model
logit(theta[i]) <- a0[Year3[i]] + aTrt[Year3[i]]*Trt3[i] + aAT[Year3[i]]*AT3[i] + aAT2[Year3[i]]*AT3[i]*AT3[i] +
aTrtAT[Year3[i]]*Trt3[i]*AT3[i] + aTrtAT2[Year3[i]]*Trt3[i]*AT3[i]*AT3[i]
innerterm[i] <- 1 - theta[i]
p[i] <- 1 - pow(innerterm[i], N[i])
for(j in 1:nvisit){
# likelihood
y[i,j] ~ dbin(p[i], 1)
}
}
}
sets <- expand.grid(R=c(20, 30, 40, 50, 60), S=c(5, 7, 9), posttrt=c(0.1, 0.3), det=c(0.15, 0.30, 0.50))
View(sets)
library(R2jags)
library(plyr)
# hierarchical occupancy model
model.h <- function(){
# priors
aInt.mean ~ dnorm(0,0.25)
aInt.sd ~ dgamma(2, 1)
aInt.tau <- 1/(aInt.sd * aInt.sd)
bTrt ~ dnorm(0, 0.25)
bYr ~ dnorm(0, 0.25)
bTrtYr ~ dnorm(0, 0.25)
gInt ~ dnorm(0, 0.333)
# stand-level model
for(i in 1:R){
b0[i] ~ dnorm(aInt.mean, aInt.tau)
}
for(i in 1:N){
bMean[i] <- b0[StandID[i]] + bTrt*Trt[i] + bYr*Yr[i] + bTrtYr*TrtYr[i]
}
# plot level model
for(j in 1:n){
logit(psi[j]) <- bMean[StandYr[j]]
Z[j] ~ dbin(psi[j], 1)
for(k in 1:3){
logit(p[j,k]) <- gInt
p.eff[j,k] <- Z[j]*p[j,k]
y[j,k] ~ dbin(p.eff[j,k], 1)
}
}
}
genData1 <- function(R, S, posttrt, det){
preTrtOcc <- 0.70
beta0 <- log(preTrtOcc/(1-preTrtOcc))
beta3 <- log((posttrt/(1-posttrt))/(preTrtOcc/(1-preTrtOcc)))
Dat <- expand.grid(Yr=c(0,1), Stand=1:R)
Dat$Trt <- ifelse(Dat$Stand <= R/2, 0, 1)
Dat$StandYr <- 1:nrow(Dat)
b0 <- rnorm(R, mean=0, sd=1)
Dat$b0 <- b0[Dat$Stand]
Dat$logitpsi <- with(Dat, beta0 + b0 + beta3*Trt*Yr)
Dat$psi <- 1/(1+exp(-Dat$logitpsi))
Dat2 <- data.frame(Yr = rep(Dat$Yr, each=S),
Stand = rep(Dat$Stand, each=S),
Trt = rep(Dat$Trt, each=S),
StandYr = rep(Dat$StandYr, each=S),
psi = rep(Dat$psi, each=S))
occ <- rbinom(nrow(Dat2), 1, Dat2$psi)
detection <- cbind(rbinom(nrow(Dat2), 1, det*occ),
rbinom(nrow(Dat2), 1, det*occ),
rbinom(nrow(Dat2), 1, det*occ))
zst <- apply(detection, 1, max)
test.data <- list(y=detection, R=R, N=R*2, n=R*S*2, Trt=Dat$Trt, Yr=Dat$Yr, TrtYr= Dat$Trt * Dat$Yr,
StandID=Dat$Stand, StandYr = Dat2$StandYr)
list(test.data=test.data, zst=zst, Z=occ, psi=Dat2$psi)
}
fit1 <- function(dat, params, model, n.chains, n.thin, n.iter, n.burnin){
inits <- function(){list(Z=dat$zst)}
out <- jags(data=dat$test.data, inits=inits, parameters.to.save=params, model.file=model,
n.chains=n.chains, n.thin=n.thin, n.iter=n.iter, n.burnin=n.burnin)
out
}
runSim <- function(sets, nsim, params, model, n.chains, n.thin, n.iter, n.burnin, dfile){
nsets <- nrow(sets)
for(i in 1:nsets){
R <- sets$R[i]
S <- sets$S[i]
posttrt <- sets$posttrt[i]
det <- sets$det[i]
for(j in 1:nsim){
dat.ij <- genData1(R=R, S=S, posttrt=posttrt, det=det)
fm.ij <- fit1(dat.ij, params=params, model=model, n.chains=n.chains, n.thin=n.thin, n.iter=n.iter, n.burnin=n.burnin)
fname <- paste("Nstand.", R, "_Nsub.", S, "_Posttrt.", posttrt, "_det.", det, "_sim.", j, ".csv",sep="")
write.csv(fm.ij$BUGSoutput$summary, paste(dfile, fname, sep=""))
}
}
}
sets <- expand.grid(R=c(20, 30, 40, 50, 60), S=c(5, 7, 9), posttrt=c(0.1, 0.3), det=c(0.15, 0.30, 0.50))
params <- c("aInt.mean", "bTrt", "bYr", "bTrtYr", "gInt")
nsim=500
system.time(temp <- runSim(sets=sets, nsim=nsim, params=params, model=model.h, n.chains=3, n.thin=10, n.iter=10000, n.burnin=5000, dfile="C:/"))
dfile
View(sets)
sets <- expand.grid(R=c(20, 30, 40, 50, 60), S=c(5, 7, 9), posttrt=c(0.1, 0.3), det=c(0.15, 0.30, 0.50))
params <- c("aInt.mean", "bTrt", "bYr", "bTrtYr", "gInt")
nsim=500
system.time(temp <- runSim(sets=sets, nsim=nsim, params=params, model=model.h, n.chains=3, n.thin=10, n.iter=10000, n.burnin=5000,
dfile="C:\Users\jasmi\OneDrive\Documents\Academic\OSU\Git\oss-occu\2015\output"))
sets <- expand.grid(R=c(20, 30, 40, 50, 60), S=c(5, 7, 9), posttrt=c(0.1, 0.3), det=c(0.15, 0.30, 0.50))
params <- c("aInt.mean", "bTrt", "bYr", "bTrtYr", "gInt")
nsim=500
system.time(temp <- runSim(sets=sets, nsim=nsim, params=params, model=model.h, n.chains=3, n.thin=10, n.iter=10000, n.burnin=5000,
dfile="C:/Users/jasmi/OneDrive/Documents/Academic/OSU/Git/oss-occu/2015/output"))
sets <- expand.grid(R=c(20, 30, 40, 50, 60), S=c(5), posttrt=c(0.1, 0.3), det=c(0.15, 0.30, 0.50))
params <- c("aInt.mean", "bTrt", "bYr", "bTrtYr", "gInt")
nsim=1
system.time(temp <- runSim(sets=sets, nsim=nsim, params=params, model=model.h, n.chains=3, n.thin=10, n.iter=10000, n.burnin=5000,
dfile="C:/Users/jasmi/OneDrive/Documents/Academic/OSU/Git/oss-occu/2015/output"))
sets <- expand.grid(R=c(20), S=c(5), posttrt=c(0.1, 0.3), det=c(0.15, 0.30, 0.50))
params <- c("aInt.mean", "bTrt", "bYr", "bTrtYr", "gInt")
nsim=2
system.time(temp <- runSim(sets=sets, nsim=nsim, params=params, model=model.h, n.chains=3, n.thin=10, n.iter=10000, n.burnin=5000,
dfile="C:/Users/jasmi/OneDrive/Documents/Academic/OSU/Git/oss-occu/2015/output"))
# fit the model
system.time(out.oh1 <- jags(test.data.o, inits.o, params.o, model.h1, n.chains=4,
n.thin=10, n.iter=1100, n.burnin=100)) # 212s
library(R2jags)
rm(list=ls())
load("OSS ENES packaged data thru 2019.RData")
str(osslist)
source("JAGS BACI models 2019.r")
# diagnostic check
myFun <- function(n, y, p){
out <- matrix(ncol=3, nrow=n)
miss <- is.na(y)
for(i in 1:n){
out[i,1] <- sum(((as.numeric(y) - rep(p[i,], 3))^2)[!miss]) # 253
out[i,2] <- sum(((rbinom(length(miss), 1, rep(p[i,], 3)) - rep(p[i,], 3))^2)[!miss]) # 252.2
}
out[,3] <- ifelse(out[,1] > out[,2], 1, 0)
out
}
setwd("~/Academic/OSU/Git/oss-occu/2020/2020_code_jayjones")
load("OSS ENES packaged data thru 2019.RData")
str(osslist)
source("JAGS BACI models 2019.r")
# diagnostic check
myFun <- function(n, y, p){
out <- matrix(ncol=3, nrow=n)
miss <- is.na(y)
for(i in 1:n){
out[i,1] <- sum(((as.numeric(y) - rep(p[i,], 3))^2)[!miss]) # 253
out[i,2] <- sum(((rbinom(length(miss), 1, rep(p[i,], 3)) - rep(p[i,], 3))^2)[!miss]) # 252.2
}
out[,3] <- ifelse(out[,1] > out[,2], 1, 0)
out
}
# model setup
zst.o <- apply(osslist$yo, 1, max, na.rm=T)
inits.o <- function(){list(z=zst.o)}
params.o <- c("beta0", "betaTF", "betaYr14", "betaYr15", "betaYr16", "betaYr17", "betaYr18", "betaYr19",
"betaDW", "betaPre", "betaPost", "TrtEffect",
"mu.a0", "mu.a1", "mu.a2", "mu.a3", "mu.a4", "mu.a5", "p.eff",
"b0", "sd.b0", "a0")
test.data.o <- with(osslist, list(y=yo, nyear=nyear, nstand=nstand, Year2014=Year2014, Year2015=Year2015,
Year2016=Year2016, Year2017=Year2017, Year2018=Year2018, Year2019=Year2019,
TFCL1=TFCL1, PreTrt2=PreTrt2,
PostTrt2=PostTrt2, DW3=(DW3-3)/2, AT3=(AT3-12)/5.5, Trt3=Trt3,
nall=nall, nvisit=nvisit, Year3=Year3, Stand3=Stand3))
# fit the model
system.time(out.oh1 <- jags(test.data.o, inits.o, params.o, model.h1, n.chains=4,
n.thin=10, n.iter=1100, n.burnin=100)) # 212s
load("~/Academic/OSU/Git/oss-occu/2020/2020_code_jayjones/OSS ENES packaged data thru 2019.RData")
load("~/Academic/OSU/Git/oss-occu/2020/2020_code_jayjones/OSS ENES packaged data thru 2019.RData")
View(osslist)
